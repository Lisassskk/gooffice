

package chart

import (
	_b "encoding/xml"
	_aa "fmt"
	_dc "gitee.com/yu_sheng/gooffice"
	_f "gitee.com/yu_sheng/gooffice/schema/soo/dml"
	_c "gitee.com/yu_sheng/gooffice/schema/soo/dml/chartDrawing"
	_g "gitee.com/yu_sheng/gooffice/schema/soo/ofc/sharedTypes"
	_a "regexp"
	_bd "strconv"
)

func (_gbfef *CT_Surface3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _gbfef.Wireframe != nil {
		_ccbb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_gbfef.Wireframe, _ccbb)
	}
	if _gbfef.Ser != nil {
		_gaecb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ebbfa := range _gbfef.Ser {
			e.EncodeElement(_ebbfa, _gaecb)
		}
	}
	if _gbfef.BandFmts != nil {
		_bbbcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_gbfef.BandFmts, _bbbcb)
	}
	_cdbdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dgfb := range _gbfef.AxId {
		e.EncodeElement(_dgfb, _cdbdb)
	}
	if _gbfef.ExtLst != nil {
		_eeabf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbfef.ExtLst, _eeabf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_LblOffset() *CT_LblOffset { _cbgff := &CT_LblOffset{}; return _cbgff }
func (_ddgfc *CT_DepthPercent) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffac := range start.Attr {
		if _ffac.Name.Local == "\u0076\u0061\u006c" {
			_eggc, _bbdf := ParseUnionST_DepthPercent(_ffac.Value)
			if _bbdf != nil {
				return _bbdf
			}
			_ddgfc.ValAttr = &_eggc
			continue
		}
	}
	for {
		_cdbc, _aadg := d.Token()
		if _aadg != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _aadg)
		}
		if _acda, _dbae := _cdbc.(_b.EndElement); _dbae && _acda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gecc *CT_ErrBars) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gecc.ErrBarType = NewCT_ErrBarType()
	_gecc.ErrValType = NewCT_ErrValType()
_daga:
	for {
		_geaf, _ggcd := d.Token()
		if _ggcd != nil {
			return _ggcd
		}
		switch _cagcb := _geaf.(type) {
		case _b.StartElement:
			switch _cagcb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_gecc.ErrDir = NewCT_ErrDir()
				if _daca := d.DecodeElement(_gecc.ErrDir, &_cagcb); _daca != nil {
					return _daca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _bggc := d.DecodeElement(_gecc.ErrBarType, &_cagcb); _bggc != nil {
					return _bggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _cbbg := d.DecodeElement(_gecc.ErrValType, &_cagcb); _cbbg != nil {
					return _cbbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_gecc.NoEndCap = NewCT_Boolean()
				if _cace := d.DecodeElement(_gecc.NoEndCap, &_cagcb); _cace != nil {
					return _cace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_gecc.Plus = NewCT_NumDataSource()
				if _facb := d.DecodeElement(_gecc.Plus, &_cagcb); _facb != nil {
					return _facb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_gecc.Minus = NewCT_NumDataSource()
				if _fgbd := d.DecodeElement(_gecc.Minus, &_cagcb); _fgbd != nil {
					return _fgbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_gecc.Val = NewCT_Double()
				if _ffag := d.DecodeElement(_gecc.Val, &_cagcb); _ffag != nil {
					return _ffag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gecc.SpPr = _f.NewCT_ShapeProperties()
				if _cefa := d.DecodeElement(_gecc.SpPr, &_cagcb); _cefa != nil {
					return _cefa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gecc.ExtLst = NewCT_ExtensionList()
				if _bbcea := d.DecodeElement(_gecc.ExtLst, &_cagcb); _bbcea != nil {
					return _bbcea
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _cagcb.Name)
				if _eecfb := d.Skip(); _eecfb != nil {
					return _eecfb
				}
			}
		case _b.EndElement:
			break _daga
		case _b.CharData:
		}
	}
	return nil
}
func (_efeba ST_PictureFormat) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_efeba.String(), start)
}
func (_fecad *CT_ScatterSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fecad.Idx = NewCT_UnsignedInt()
	_fecad.Order = NewCT_UnsignedInt()
_bfdbc:
	for {
		_bdfc, _aagdd := d.Token()
		if _aagdd != nil {
			return _aagdd
		}
		switch _eegege := _bdfc.(type) {
		case _b.StartElement:
			switch _eegege.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _aafbea := d.DecodeElement(_fecad.Idx, &_eegege); _aafbea != nil {
					return _aafbea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eacde := d.DecodeElement(_fecad.Order, &_eegege); _eacde != nil {
					return _eacde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fecad.Tx = NewCT_SerTx()
				if _gcdbfb := d.DecodeElement(_fecad.Tx, &_eegege); _gcdbfb != nil {
					return _gcdbfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fecad.SpPr = _f.NewCT_ShapeProperties()
				if _gafg := d.DecodeElement(_fecad.SpPr, &_eegege); _gafg != nil {
					return _gafg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_fecad.Marker = NewCT_Marker()
				if _bdbcg := d.DecodeElement(_fecad.Marker, &_eegege); _bdbcg != nil {
					return _bdbcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fefaf := NewCT_DPt()
				if _adgcd := d.DecodeElement(_fefaf, &_eegege); _adgcd != nil {
					return _adgcd
				}
				_fecad.DPt = append(_fecad.DPt, _fefaf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fecad.DLbls = NewCT_DLbls()
				if _dabde := d.DecodeElement(_fecad.DLbls, &_eegege); _dabde != nil {
					return _dabde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cfcec := NewCT_Trendline()
				if _bbfe := d.DecodeElement(_cfcec, &_eegege); _bbfe != nil {
					return _bbfe
				}
				_fecad.Trendline = append(_fecad.Trendline, _cfcec)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gcbab := NewCT_ErrBars()
				if _acfae := d.DecodeElement(_gcbab, &_eegege); _acfae != nil {
					return _acfae
				}
				_fecad.ErrBars = append(_fecad.ErrBars, _gcbab)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_fecad.XVal = NewCT_AxDataSource()
				if _gabbd := d.DecodeElement(_fecad.XVal, &_eegege); _gabbd != nil {
					return _gabbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_fecad.YVal = NewCT_NumDataSource()
				if _gfeagd := d.DecodeElement(_fecad.YVal, &_eegege); _gfeagd != nil {
					return _gfeagd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_fecad.Smooth = NewCT_Boolean()
				if _bbab := d.DecodeElement(_fecad.Smooth, &_eegege); _bbab != nil {
					return _bbab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fecad.ExtLst = NewCT_ExtensionList()
				if _aefdf := d.DecodeElement(_fecad.ExtLst, &_eegege); _aefdf != nil {
					return _aefdf
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _eegege.Name)
				if _fgfa := d.Skip(); _fgfa != nil {
					return _fgfa
				}
			}
		case _b.EndElement:
			break _bfdbc
		case _b.CharData:
		}
	}
	return nil
}
func (_dbe *CT_AreaSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dbe.Idx, _gdc)
	_ffd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dbe.Order, _ffd)
	if _dbe.Tx != nil {
		_fg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dbe.Tx, _fg)
	}
	if _dbe.SpPr != nil {
		_afd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbe.SpPr, _afd)
	}
	if _dbe.PictureOptions != nil {
		_baa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_dbe.PictureOptions, _baa)
	}
	if _dbe.DPt != nil {
		_edb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cfg := range _dbe.DPt {
			e.EncodeElement(_cfg, _edb)
		}
	}
	if _dbe.DLbls != nil {
		_gff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dbe.DLbls, _gff)
	}
	if _dbe.Trendline != nil {
		_aegd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _adb := range _dbe.Trendline {
			e.EncodeElement(_adb, _aegd)
		}
	}
	if _dbe.ErrBars != nil {
		_gcc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _bga := range _dbe.ErrBars {
			e.EncodeElement(_bga, _gcc)
		}
	}
	if _dbe.Cat != nil {
		_cfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_dbe.Cat, _cfe)
	}
	if _dbe.Val != nil {
		_fcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_dbe.Val, _fcf)
	}
	if _dbe.ExtLst != nil {
		_dag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbe.ExtLst, _dag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_abbdg *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _abbdg.VaryColors != nil {
		if _abcg := _abbdg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _abcg != nil {
			return _abcg
		}
	}
	for _eegg, _acaag := range _abbdg.Ser {
		if _dadb := _acaag.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eegg)); _dadb != nil {
			return _dadb
		}
	}
	if _abbdg.DLbls != nil {
		if _aaca := _abbdg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _aaca != nil {
			return _aaca
		}
	}
	if _abbdg.FirstSliceAng != nil {
		if _aeeb := _abbdg.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _aeeb != nil {
			return _aeeb
		}
	}
	if _abbdg.HoleSize != nil {
		if _dfae := _abbdg.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _dfae != nil {
			return _dfae
		}
	}
	if _abbdg.ExtLst != nil {
		if _abdfd := _abbdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abdfd != nil {
			return _abdfd
		}
	}
	return nil
}

type ST_DispBlanksAs byte

// Validate validates the EG_LegendEntryData and its children
func (_baced *EG_LegendEntryData) Validate() error {
	return _baced.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}

type ST_LblAlgn byte
type CT_SurfaceSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_f.CT_ShapeProperties
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_efcba *CT_DateAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fdcef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_efcba.AxId, _fdcef)
	_ebge := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_efcba.Scaling, _ebge)
	if _efcba.Delete != nil {
		_ggaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_efcba.Delete, _ggaa)
	}
	_faac := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_efcba.AxPos, _faac)
	if _efcba.MajorGridlines != nil {
		_gdef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_efcba.MajorGridlines, _gdef)
	}
	if _efcba.MinorGridlines != nil {
		_bbbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_efcba.MinorGridlines, _bbbe)
	}
	if _efcba.Title != nil {
		_acea := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_efcba.Title, _acea)
	}
	if _efcba.NumFmt != nil {
		_dgafc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_efcba.NumFmt, _dgafc)
	}
	if _efcba.MajorTickMark != nil {
		_abff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_efcba.MajorTickMark, _abff)
	}
	if _efcba.MinorTickMark != nil {
		_gced := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_efcba.MinorTickMark, _gced)
	}
	if _efcba.TickLblPos != nil {
		_ddfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_efcba.TickLblPos, _ddfc)
	}
	if _efcba.SpPr != nil {
		_adafa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_efcba.SpPr, _adafa)
	}
	if _efcba.TxPr != nil {
		_dbgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_efcba.TxPr, _dbgg)
	}
	_bafb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_efcba.CrossAx, _bafb)
	if _efcba.Choice != nil {
		_efcba.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _efcba.Auto != nil {
		_bbfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_efcba.Auto, _bbfd)
	}
	if _efcba.LblOffset != nil {
		_bfdcb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_efcba.LblOffset, _bfdcb)
	}
	if _efcba.BaseTimeUnit != nil {
		_abbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_efcba.BaseTimeUnit, _abbg)
	}
	if _efcba.MajorUnit != nil {
		_ecbc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_efcba.MajorUnit, _ecbc)
	}
	if _efcba.MajorTimeUnit != nil {
		_fgcb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_efcba.MajorTimeUnit, _fgcb)
	}
	if _efcba.MinorUnit != nil {
		_ddbcg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_efcba.MinorUnit, _ddbcg)
	}
	if _efcba.MinorTimeUnit != nil {
		_fgdfe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_efcba.MinorTimeUnit, _fgdfe)
	}
	if _efcba.ExtLst != nil {
		_ffge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efcba.ExtLst, _ffge)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_agcc *CT_SurfaceSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_caba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_agcc.Idx, _caba)
	_eggb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_agcc.Order, _eggb)
	if _agcc.Tx != nil {
		_aggg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_agcc.Tx, _aggg)
	}
	if _agcc.SpPr != nil {
		_bdbff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agcc.SpPr, _bdbff)
	}
	if _agcc.Cat != nil {
		_fbeee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_agcc.Cat, _fbeee)
	}
	if _agcc.Val != nil {
		_ebdag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_agcc.Val, _ebdag)
	}
	if _agcc.ExtLst != nil {
		_eebff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agcc.ExtLst, _eebff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_DispBlanksAs struct{ ValAttr ST_DispBlanksAs }

func (_gaeae *EG_DLblShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gaeae.NumFmt != nil {
		_afefg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gaeae.NumFmt, _afefg)
	}
	if _gaeae.SpPr != nil {
		_aced := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gaeae.SpPr, _aced)
	}
	if _gaeae.TxPr != nil {
		_gaaae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gaeae.TxPr, _gaaae)
	}
	if _gaeae.DLblPos != nil {
		_fgdga := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_gaeae.DLblPos, _fgdga)
	}
	if _gaeae.ShowLegendKey != nil {
		_cebdf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_gaeae.ShowLegendKey, _cebdf)
	}
	if _gaeae.ShowVal != nil {
		_caae := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_gaeae.ShowVal, _caae)
	}
	if _gaeae.ShowCatName != nil {
		_gbbbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gaeae.ShowCatName, _gbbbf)
	}
	if _gaeae.ShowSerName != nil {
		_decee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gaeae.ShowSerName, _decee)
	}
	if _gaeae.ShowPercent != nil {
		_fdbfdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_gaeae.ShowPercent, _fdbfdb)
	}
	if _gaeae.ShowBubbleSize != nil {
		_ecbcg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gaeae.ShowBubbleSize, _ecbcg)
	}
	if _gaeae.Separator != nil {
		_bdfad := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_dc.AddPreserveSpaceAttr(&_bdfad, *_gaeae.Separator)
		e.EncodeElement(_gaeae.Separator, _bdfad)
	}
	return nil
}
func NewCT_Bar3DChart() *CT_Bar3DChart {
	_faf := &CT_Bar3DChart{}
	_faf.BarDir = NewCT_BarDir()
	return _faf
}
func NewCT_Grouping() *CT_Grouping { _gbcae := &CT_Grouping{}; return _gbcae }
func (_ggba *CT_NumFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _aa.Sprintf("\u0025\u0076", _ggba.FormatCodeAttr)})
	if _ggba.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_ggba.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_PageMargins and its children
func (_ggga *CT_PageMargins) Validate() error {
	return _ggga.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}
func NewCT_ErrBars() *CT_ErrBars {
	_cebe := &CT_ErrBars{}
	_cebe.ErrBarType = NewCT_ErrBarType()
	_cebe.ErrValType = NewCT_ErrValType()
	return _cebe
}
func NewChart() *Chart { _ccggc := &Chart{}; _ccggc.CT_RelId = *NewCT_RelId(); return _ccggc }

type EG_SerShared struct {
	Idx   *CT_UnsignedInt
	Order *CT_UnsignedInt
	Tx    *CT_SerTx
	SpPr  *_f.CT_ShapeProperties
}
type CT_Chart struct {
	Title            *CT_Title
	AutoTitleDeleted *CT_Boolean
	PivotFmts        *CT_PivotFmts
	View3D           *CT_View3D
	Floor            *CT_Surface
	SideWall         *CT_Surface
	BackWall         *CT_Surface
	PlotArea         *CT_PlotArea
	Legend           *CT_Legend
	PlotVisOnly      *CT_Boolean
	DispBlanksAs     *CT_DispBlanksAs
	ShowDLblsOverMax *CT_Boolean
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_gafc *CT_Chart) ValidateWithPath(path string) error {
	if _gafc.Title != nil {
		if _egag := _gafc.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _egag != nil {
			return _egag
		}
	}
	if _gafc.AutoTitleDeleted != nil {
		if _fddc := _gafc.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _fddc != nil {
			return _fddc
		}
	}
	if _gafc.PivotFmts != nil {
		if _bafdg := _gafc.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _bafdg != nil {
			return _bafdg
		}
	}
	if _gafc.View3D != nil {
		if _afgg := _gafc.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _afgg != nil {
			return _afgg
		}
	}
	if _gafc.Floor != nil {
		if _dedd := _gafc.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _dedd != nil {
			return _dedd
		}
	}
	if _gafc.SideWall != nil {
		if _fefb := _gafc.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _fefb != nil {
			return _fefb
		}
	}
	if _gafc.BackWall != nil {
		if _aege := _gafc.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _aege != nil {
			return _aege
		}
	}
	if _ggbd := _gafc.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _ggbd != nil {
		return _ggbd
	}
	if _gafc.Legend != nil {
		if _fccb := _gafc.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _fccb != nil {
			return _fccb
		}
	}
	if _gafc.PlotVisOnly != nil {
		if _dbdc := _gafc.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _dbdc != nil {
			return _dbdc
		}
	}
	if _gafc.DispBlanksAs != nil {
		if _bed := _gafc.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _bed != nil {
			return _bed
		}
	}
	if _gafc.ShowDLblsOverMax != nil {
		if _gbec := _gafc.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _gbec != nil {
			return _gbec
		}
	}
	if _gafc.ExtLst != nil {
		if _ffdga := _gafc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffdga != nil {
			return _ffdga
		}
	}
	return nil
}
func NewCT_CrossBetween() *CT_CrossBetween {
	_eecd := &CT_CrossBetween{}
	_eecd.ValAttr = ST_CrossBetween(1)
	return _eecd
}
func NewCT_Marker() *CT_Marker             { _bddd := &CT_Marker{}; return _bddd }
func NewCT_DepthPercent() *CT_DepthPercent { _edcd := &CT_DepthPercent{}; return _edcd }

type CT_CustSplit struct{ SecondPiePt []*CT_UnsignedInt }
type CT_RotY struct{ ValAttr *uint16 }

func NewCT_BarGrouping() *CT_BarGrouping { _dbda := &CT_BarGrouping{}; return _dbda }

type CT_RadarStyle struct{ ValAttr ST_RadarStyle }

func (_geedb *CT_RadarChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bdbga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_geedb.RadarStyle, _bdbga)
	if _geedb.VaryColors != nil {
		_fdbfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_geedb.VaryColors, _fdbfb)
	}
	if _geedb.Ser != nil {
		_bfec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _beba := range _geedb.Ser {
			e.EncodeElement(_beba, _bfec)
		}
	}
	if _geedb.DLbls != nil {
		_fcega := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_geedb.DLbls, _fcega)
	}
	_addec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _badb := range _geedb.AxId {
		e.EncodeElement(_badb, _addec)
	}
	if _geedb.ExtLst != nil {
		_faba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_geedb.ExtLst, _faba)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_LegendPos byte

func (_acgbb ST_LayoutTarget) String() string {
	switch _acgbb {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}
func (_fdbgf *CT_PieSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fdbgf.Idx = NewCT_UnsignedInt()
	_fdbgf.Order = NewCT_UnsignedInt()
_fccg:
	for {
		_cdcag, _ddda := d.Token()
		if _ddda != nil {
			return _ddda
		}
		switch _ebffg := _cdcag.(type) {
		case _b.StartElement:
			switch _ebffg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _egfa := d.DecodeElement(_fdbgf.Idx, &_ebffg); _egfa != nil {
					return _egfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gdbb := d.DecodeElement(_fdbgf.Order, &_ebffg); _gdbb != nil {
					return _gdbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fdbgf.Tx = NewCT_SerTx()
				if _ffdeg := d.DecodeElement(_fdbgf.Tx, &_ebffg); _ffdeg != nil {
					return _ffdeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fdbgf.SpPr = _f.NewCT_ShapeProperties()
				if _efcf := d.DecodeElement(_fdbgf.SpPr, &_ebffg); _efcf != nil {
					return _efcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_fdbgf.Explosion = NewCT_UnsignedInt()
				if _gadcf := d.DecodeElement(_fdbgf.Explosion, &_ebffg); _gadcf != nil {
					return _gadcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ggbcf := NewCT_DPt()
				if _bbgb := d.DecodeElement(_ggbcf, &_ebffg); _bbgb != nil {
					return _bbgb
				}
				_fdbgf.DPt = append(_fdbgf.DPt, _ggbcf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fdbgf.DLbls = NewCT_DLbls()
				if _gcaf := d.DecodeElement(_fdbgf.DLbls, &_ebffg); _gcaf != nil {
					return _gcaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_fdbgf.Cat = NewCT_AxDataSource()
				if _agcgf := d.DecodeElement(_fdbgf.Cat, &_ebffg); _agcgf != nil {
					return _agcgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_fdbgf.Val = NewCT_NumDataSource()
				if _gagge := d.DecodeElement(_fdbgf.Val, &_ebffg); _gagge != nil {
					return _gagge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fdbgf.ExtLst = NewCT_ExtensionList()
				if _cacce := d.DecodeElement(_fdbgf.ExtLst, &_ebffg); _cacce != nil {
					return _cacce
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _ebffg.Name)
				if _aabff := d.Skip(); _aabff != nil {
					return _aabff
				}
			}
		case _b.EndElement:
			break _fccg
		case _b.CharData:
		}
	}
	return nil
}
func (_fgag ST_DLblPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fafcc := _b.Attr{}
	_fafcc.Name = name
	switch _fgag {
	case ST_DLblPosUnset:
		_fafcc.Value = ""
	case ST_DLblPosBestFit:
		_fafcc.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_fafcc.Value = "\u0062"
	case ST_DLblPosCtr:
		_fafcc.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_fafcc.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_fafcc.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_fafcc.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_fafcc.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_fafcc.Value = "\u0072"
	case ST_DLblPosT:
		_fafcc.Value = "\u0074"
	}
	return _fafcc, nil
}
func (_gcedg *CT_TimeUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gcedg.ValAttr != ST_TimeUnitUnset {
		_adcgd, _gdcd := _gcedg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gdcd != nil {
			return _gdcd
		}
		start.Attr = append(start.Attr, _adcgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ffc *CT_AxisUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ffc.ValAttr = 0 + 1
	for _, _gab := range start.Attr {
		if _gab.Name.Local == "\u0076\u0061\u006c" {
			_gae, _bee := _bd.ParseFloat(_gab.Value, 64)
			if _bee != nil {
				return _bee
			}
			_ffc.ValAttr = _gae
			continue
		}
	}
	for {
		_dfdd, _beed := d.Token()
		if _beed != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _beed)
		}
		if _eacc, _bfg := _dfdd.(_b.EndElement); _bfg && _eacc.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Boolean() *CT_Boolean { _dcfg := &CT_Boolean{}; return _dcfg }

// Validate validates the CT_BandFmt and its children
func (_efa *CT_BandFmt) Validate() error {
	return _efa.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}
func (_afcd *CT_SplitType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _afcd.ValAttr != ST_SplitTypeUnset {
		_ebbgf, _eddac := _afcd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _eddac != nil {
			return _eddac
		}
		start.Attr = append(start.Attr, _ebbgf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_aabe *CT_ChartSpace) ValidateWithPath(path string) error {
	if _aabe.Date1904 != nil {
		if _fgdb := _aabe.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _fgdb != nil {
			return _fgdb
		}
	}
	if _aabe.Lang != nil {
		if _gcf := _aabe.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _gcf != nil {
			return _gcf
		}
	}
	if _aabe.RoundedCorners != nil {
		if _defa := _aabe.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _defa != nil {
			return _defa
		}
	}
	if _aabe.Style != nil {
		if _dgee := _aabe.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _dgee != nil {
			return _dgee
		}
	}
	if _aabe.ClrMapOvr != nil {
		if _fab := _aabe.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _fab != nil {
			return _fab
		}
	}
	if _aabe.PivotSource != nil {
		if _gcg := _aabe.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _gcg != nil {
			return _gcg
		}
	}
	if _aabe.Protection != nil {
		if _eaebd := _aabe.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _eaebd != nil {
			return _eaebd
		}
	}
	if _fgdc := _aabe.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _fgdc != nil {
		return _fgdc
	}
	if _aabe.SpPr != nil {
		if _ccbgd := _aabe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ccbgd != nil {
			return _ccbgd
		}
	}
	if _aabe.TxPr != nil {
		if _gbefb := _aabe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gbefb != nil {
			return _gbefb
		}
	}
	if _aabe.ExternalData != nil {
		if _aagd := _aabe.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _aagd != nil {
			return _aagd
		}
	}
	if _aabe.PrintSettings != nil {
		if _fcaff := _aabe.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _fcaff != nil {
			return _fcaff
		}
	}
	if _aabe.UserShapes != nil {
		if _eaaa := _aabe.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _eaaa != nil {
			return _eaaa
		}
	}
	if _aabe.ExtLst != nil {
		if _eeff := _aabe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eeff != nil {
			return _eeff
		}
	}
	return nil
}
func NewCT_BubbleSer() *CT_BubbleSer {
	_egfd := &CT_BubbleSer{}
	_egfd.Idx = NewCT_UnsignedInt()
	_egfd.Order = NewCT_UnsignedInt()
	return _egfd
}

// Validate validates the CT_SerAx and its children
func (_fcade *CT_SerAx) Validate() error {
	return _fcade.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}
func (_edfc *CT_MultiLvlStrRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fcee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_dc.AddPreserveSpaceAttr(&_fcee, _edfc.F)
	e.EncodeElement(_edfc.F, _fcee)
	if _edfc.MultiLvlStrCache != nil {
		_aafdc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_edfc.MultiLvlStrCache, _aafdc)
	}
	if _edfc.ExtLst != nil {
		_fbgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edfc.ExtLst, _fbgf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gade *CT_PictureStackUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gade.ValAttr = 0 + 1
	for _, _fcbbe := range start.Attr {
		if _fcbbe.Name.Local == "\u0076\u0061\u006c" {
			_bdbde, _gace := _bd.ParseFloat(_fcbbe.Value, 64)
			if _gace != nil {
				return _gace
			}
			_gade.ValAttr = _bdbde
			continue
		}
	}
	for {
		_fbdb, _cfef := d.Token()
		if _cfef != nil {
			return _aa.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _cfef)
		}
		if _dgbc, _badab := _fbdb.(_b.EndElement); _badab && _dgbc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Grouping struct{ ValAttr ST_Grouping }

func (_gedg *CT_Overlap) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _adagf := range start.Attr {
		if _adagf.Name.Local == "\u0076\u0061\u006c" {
			_dcfda, _cgecb := ParseUnionST_Overlap(_adagf.Value)
			if _cgecb != nil {
				return _cgecb
			}
			_gedg.ValAttr = &_dcfda
			continue
		}
	}
	for {
		_eddf, _fcbg := d.Token()
		if _fcbg != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _fcbg)
		}
		if _dagbc, _gfa := _eddf.(_b.EndElement); _gfa && _dagbc.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_RadarSer() *CT_RadarSer {
	_gdfc := &CT_RadarSer{}
	_gdfc.Idx = NewCT_UnsignedInt()
	_gdfc.Order = NewCT_UnsignedInt()
	return _gdfc
}

// Validate validates the CT_BubbleScale and its children
func (_cedd *CT_BubbleScale) Validate() error {
	return _cedd.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}

type CT_GapAmount struct{ ValAttr *ST_GapAmount }

func (_eedg *CT_Lvl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_aeagd:
	for {
		_dddcg, _bgbe := d.Token()
		if _bgbe != nil {
			return _bgbe
		}
		switch _fagdb := _dddcg.(type) {
		case _b.StartElement:
			switch _fagdb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_dgae := NewCT_StrVal()
				if _abfb := d.DecodeElement(_dgae, &_fagdb); _abfb != nil {
					return _abfb
				}
				_eedg.Pt = append(_eedg.Pt, _dgae)
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _fagdb.Name)
				if _fabff := d.Skip(); _fabff != nil {
					return _fabff
				}
			}
		case _b.EndElement:
			break _aeagd
		case _b.CharData:
		}
	}
	return nil
}
func (_bebcg ST_TrendlineType) String() string {
	switch _bebcg {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"

func (_cecdg ST_ErrValType) ValidateWithPath(path string) error {
	switch _cecdg {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cecdg))
	}
	return nil
}

type CT_Surface3DChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

func (_bbgg *CT_BuiltInUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bbgg.ValAttr != ST_BuiltInUnitUnset {
		_dfab, _fag := _bbgg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _fag != nil {
			return _fag
		}
		start.Attr = append(start.Attr, _dfab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_dfddg *CT_ManualLayout) ValidateWithPath(path string) error {
	if _dfddg.LayoutTarget != nil {
		if _ccgbg := _dfddg.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _ccgbg != nil {
			return _ccgbg
		}
	}
	if _dfddg.XMode != nil {
		if _daed := _dfddg.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _daed != nil {
			return _daed
		}
	}
	if _dfddg.YMode != nil {
		if _edbfe := _dfddg.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _edbfe != nil {
			return _edbfe
		}
	}
	if _dfddg.WMode != nil {
		if _aceag := _dfddg.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _aceag != nil {
			return _aceag
		}
	}
	if _dfddg.HMode != nil {
		if _fdeb := _dfddg.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _fdeb != nil {
			return _fdeb
		}
	}
	if _dfddg.X != nil {
		if _bgac := _dfddg.X.ValidateWithPath(path + "\u002f\u0058"); _bgac != nil {
			return _bgac
		}
	}
	if _dfddg.Y != nil {
		if _ccbd := _dfddg.Y.ValidateWithPath(path + "\u002f\u0059"); _ccbd != nil {
			return _ccbd
		}
	}
	if _dfddg.W != nil {
		if _gfgbf := _dfddg.W.ValidateWithPath(path + "\u002f\u0057"); _gfgbf != nil {
			return _gfgbf
		}
	}
	if _dfddg.H != nil {
		if _dgbb := _dfddg.H.ValidateWithPath(path + "\u002f\u0048"); _dgbb != nil {
			return _dgbb
		}
	}
	if _dfddg.ExtLst != nil {
		if _gfcb := _dfddg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfcb != nil {
			return _gfcb
		}
	}
	return nil
}

// Validate validates the CT_CatAx and its children
func (_bccb *CT_CatAx) Validate() error {
	return _bccb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}
func (_daedf ST_TimeUnit) String() string {
	switch _daedf {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}
func NewEG_LineChartShared() *EG_LineChartShared {
	_efdfc := &EG_LineChartShared{}
	_efdfc.Grouping = NewCT_Grouping()
	return _efdfc
}
func (_cfcde ST_DepthPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfcde.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_b.CharData(*_cfcde.ST_DepthPercentWithSymbol))
	}
	if _cfcde.ST_DepthPercentUShort != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_cfcde.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func (_ddfg ST_LegendPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dcceb := _b.Attr{}
	_dcceb.Name = name
	switch _ddfg {
	case ST_LegendPosUnset:
		_dcceb.Value = ""
	case ST_LegendPosB:
		_dcceb.Value = "\u0062"
	case ST_LegendPosTr:
		_dcceb.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_dcceb.Value = "\u006c"
	case ST_LegendPosR:
		_dcceb.Value = "\u0072"
	case ST_LegendPosT:
		_dcceb.Value = "\u0074"
	}
	return _dcceb, nil
}
func (_dgag ST_Crosses) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dcbbg := _b.Attr{}
	_dcbbg.Name = name
	switch _dgag {
	case ST_CrossesUnset:
		_dcbbg.Value = ""
	case ST_CrossesAutoZero:
		_dcbbg.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_dcbbg.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_dcbbg.Value = "\u006d\u0069\u006e"
	}
	return _dcbbg, nil
}
func (_dbdfd *CT_Scaling) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dbdfd.LogBase != nil {
		_dedga := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_dbdfd.LogBase, _dedga)
	}
	if _dbdfd.Orientation != nil {
		_bdgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_dbdfd.Orientation, _bdgg)
	}
	if _dbdfd.Max != nil {
		_fagb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_dbdfd.Max, _fagb)
	}
	if _dbdfd.Min != nil {
		_acffa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_dbdfd.Min, _acffa)
	}
	if _dbdfd.ExtLst != nil {
		_bfaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbdfd.ExtLst, _bfaf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ErrValType and its children
func (_egbda *CT_ErrValType) Validate() error {
	return _egbda.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}
func (_baegf ST_BubbleScale) String() string {
	if _baegf.ST_BubbleScalePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_baegf.ST_BubbleScalePercent)
	}
	if _baegf.ST_BubbleScaleUInt != nil {
		return _aa.Sprintf("\u0025\u0076", *_baegf.ST_BubbleScaleUInt)
	}
	return ""
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_eeadf *CT_ScatterSer) ValidateWithPath(path string) error {
	if _becac := _eeadf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _becac != nil {
		return _becac
	}
	if _cabbc := _eeadf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _cabbc != nil {
		return _cabbc
	}
	if _eeadf.Tx != nil {
		if _eebgg := _eeadf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _eebgg != nil {
			return _eebgg
		}
	}
	if _eeadf.SpPr != nil {
		if _agec := _eeadf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _agec != nil {
			return _agec
		}
	}
	if _eeadf.Marker != nil {
		if _efgd := _eeadf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _efgd != nil {
			return _efgd
		}
	}
	for _afed, _affe := range _eeadf.DPt {
		if _egdcf := _affe.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _afed)); _egdcf != nil {
			return _egdcf
		}
	}
	if _eeadf.DLbls != nil {
		if _dfgca := _eeadf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dfgca != nil {
			return _dfgca
		}
	}
	for _deec, _ffgbc := range _eeadf.Trendline {
		if _edceg := _ffgbc.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _deec)); _edceg != nil {
			return _edceg
		}
	}
	for _ggafg, _gbefe := range _eeadf.ErrBars {
		if _fcfd := _gbefe.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _ggafg)); _fcfd != nil {
			return _fcfd
		}
	}
	if _eeadf.XVal != nil {
		if _bgcab := _eeadf.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _bgcab != nil {
			return _bgcab
		}
	}
	if _eeadf.YVal != nil {
		if _bfeee := _eeadf.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _bfeee != nil {
			return _bfeee
		}
	}
	if _eeadf.Smooth != nil {
		if _fccfc := _eeadf.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _fccfc != nil {
			return _fccfc
		}
	}
	if _eeadf.ExtLst != nil {
		if _abfda := _eeadf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abfda != nil {
			return _abfda
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_ccbg *CT_BubbleSer) ValidateWithPath(path string) error {
	if _ccfd := _ccbg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ccfd != nil {
		return _ccfd
	}
	if _baabe := _ccbg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _baabe != nil {
		return _baabe
	}
	if _ccbg.Tx != nil {
		if _dbdag := _ccbg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dbdag != nil {
			return _dbdag
		}
	}
	if _ccbg.SpPr != nil {
		if _babe := _ccbg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _babe != nil {
			return _babe
		}
	}
	if _ccbg.InvertIfNegative != nil {
		if _cece := _ccbg.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _cece != nil {
			return _cece
		}
	}
	for _aacc, _fgfb := range _ccbg.DPt {
		if _gdad := _fgfb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _aacc)); _gdad != nil {
			return _gdad
		}
	}
	if _ccbg.DLbls != nil {
		if _abga := _ccbg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _abga != nil {
			return _abga
		}
	}
	for _fcfgf, _fdga := range _ccbg.Trendline {
		if _egcae := _fdga.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _fcfgf)); _egcae != nil {
			return _egcae
		}
	}
	for _gbfg, _ecc := range _ccbg.ErrBars {
		if _geb := _ecc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _gbfg)); _geb != nil {
			return _geb
		}
	}
	if _ccbg.XVal != nil {
		if _cae := _ccbg.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _cae != nil {
			return _cae
		}
	}
	if _ccbg.YVal != nil {
		if _gfg := _ccbg.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _gfg != nil {
			return _gfg
		}
	}
	if _ccbg.BubbleSize != nil {
		if _fae := _ccbg.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fae != nil {
			return _fae
		}
	}
	if _ccbg.Bubble3D != nil {
		if _dfca := _ccbg.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _dfca != nil {
			return _dfca
		}
	}
	if _ccbg.ExtLst != nil {
		if _aebf := _ccbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aebf != nil {
			return _aebf
		}
	}
	return nil
}
func NewCT_OfPieChart() *CT_OfPieChart {
	_gfbe := &CT_OfPieChart{}
	_gfbe.OfPieType = NewCT_OfPieType()
	return _gfbe
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_bffc *CT_Shape) ValidateWithPath(path string) error {
	if _afedd := _bffc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _afedd != nil {
		return _afedd
	}
	return nil
}

type EG_LegendEntryData struct{ TxPr *_f.CT_TextBody }

func (_adbgd ST_SplitType) Validate() error { return _adbgd.ValidateWithPath("") }

type CT_NumData struct {
	FormatCode *string
	PtCount    *CT_UnsignedInt
	Pt         []*CT_NumVal
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_SerTxChoice and its children
func (_deaae *CT_SerTxChoice) Validate() error {
	return _deaae.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_PictureStackUnit and its children
func (_cecec *CT_PictureStackUnit) Validate() error {
	return _cecec.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}

type UserShapes struct{ _c.CT_Drawing }

func (_bdfgc *ST_LblOffset) ValidateWithPath(path string) error {
	_dfbce := []string{}
	if _bdfgc.ST_LblOffsetPercent != nil {
		_dfbce = append(_dfbce, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _bdfgc.ST_LblOffsetUShort != nil {
		_dfbce = append(_dfbce, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_dfbce) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dfbce)
	}
	return nil
}
func (_aafg *CT_Double) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gfge := range start.Attr {
		if _gfge.Name.Local == "\u0076\u0061\u006c" {
			_fbfb, _gabga := _bd.ParseFloat(_gfge.Value, 64)
			if _gabga != nil {
				return _gabga
			}
			_aafg.ValAttr = _fbfb
			continue
		}
	}
	for {
		_gddg, _dcdb := d.Token()
		if _dcdb != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _dcdb)
		}
		if _aefec, _edag := _gddg.(_b.EndElement); _edag && _aefec.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dgbg *CT_AxPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dgbg.ValAttr = ST_AxPos(1)
	for _, _dfa := range start.Attr {
		if _dfa.Name.Local == "\u0076\u0061\u006c" {
			_dgbg.ValAttr.UnmarshalXMLAttr(_dfa)
			continue
		}
	}
	for {
		_edbd, _dgdg := d.Token()
		if _dgdg != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _dgdg)
		}
		if _eda, _fee := _edbd.(_b.EndElement); _fee && _eda.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_dgaea := &CT_PictureStackUnit{}
	_dgaea.ValAttr = 0 + 1
	return _dgaea
}
func NewCT_PivotFmt() *CT_PivotFmt {
	_ebga := &CT_PivotFmt{}
	_ebga.Idx = NewCT_UnsignedInt()
	return _ebga
}
func (_gfffb *CT_Extension) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gfffb.UriAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0075\u0072\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_gfffb.UriAttr)})
	}
	e.EncodeToken(start)
	if _gfffb.Any != nil {
		_gfffb.Any.MarshalXML(e, _b.StartElement{})
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_AreaSer() *CT_AreaSer {
	_bdac := &CT_AreaSer{}
	_bdac.Idx = NewCT_UnsignedInt()
	_bdac.Order = NewCT_UnsignedInt()
	return _bdac
}

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_decb *CT_SerTx) ValidateWithPath(path string) error {
	if _geaaf := _decb.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _geaaf != nil {
		return _geaaf
	}
	return nil
}

// Validate validates the CT_RadarSer and its children
func (_fdbeb *CT_RadarSer) Validate() error {
	return _fdbeb.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}
func (_cacdd *CT_SecondPieSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _agged := range start.Attr {
		if _agged.Name.Local == "\u0076\u0061\u006c" {
			_efgdf, _ceddcf := ParseUnionST_SecondPieSize(_agged.Value)
			if _ceddcf != nil {
				return _ceddcf
			}
			_cacdd.ValAttr = &_efgdf
			continue
		}
	}
	for {
		_cdda, _fbdc := d.Token()
		if _fbdc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _fbdc)
		}
		if _aaabb, _ffacf := _cdda.(_b.EndElement); _ffacf && _aaabb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_DispUnitsLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
}

// Validate validates the CT_MultiLvlStrRef and its children
func (_efede *CT_MultiLvlStrRef) Validate() error {
	return _efede.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}
func (_fac *CT_CatAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fac.AxId = NewCT_UnsignedInt()
	_fac.Scaling = NewCT_Scaling()
	_fac.AxPos = NewCT_AxPos()
	_fac.CrossAx = NewCT_UnsignedInt()
_cfbb:
	for {
		_efeadc, _cfdd := d.Token()
		if _cfdd != nil {
			return _cfdd
		}
		switch _dagda := _efeadc.(type) {
		case _b.StartElement:
			switch _dagda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _cbg := d.DecodeElement(_fac.AxId, &_dagda); _cbg != nil {
					return _cbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ddbg := d.DecodeElement(_fac.Scaling, &_dagda); _ddbg != nil {
					return _ddbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fac.Delete = NewCT_Boolean()
				if _cdfe := d.DecodeElement(_fac.Delete, &_dagda); _cdfe != nil {
					return _cdfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _bcfe := d.DecodeElement(_fac.AxPos, &_dagda); _bcfe != nil {
					return _bcfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fac.MajorGridlines = NewCT_ChartLines()
				if _fed := d.DecodeElement(_fac.MajorGridlines, &_dagda); _fed != nil {
					return _fed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fac.MinorGridlines = NewCT_ChartLines()
				if _gdfg := d.DecodeElement(_fac.MinorGridlines, &_dagda); _gdfg != nil {
					return _gdfg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_fac.Title = NewCT_Title()
				if _agcd := d.DecodeElement(_fac.Title, &_dagda); _agcd != nil {
					return _agcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fac.NumFmt = NewCT_NumFmt()
				if _gfgc := d.DecodeElement(_fac.NumFmt, &_dagda); _gfgc != nil {
					return _gfgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fac.MajorTickMark = NewCT_TickMark()
				if _fbgc := d.DecodeElement(_fac.MajorTickMark, &_dagda); _fbgc != nil {
					return _fbgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fac.MinorTickMark = NewCT_TickMark()
				if _abde := d.DecodeElement(_fac.MinorTickMark, &_dagda); _abde != nil {
					return _abde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_fac.TickLblPos = NewCT_TickLblPos()
				if _dee := d.DecodeElement(_fac.TickLblPos, &_dagda); _dee != nil {
					return _dee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fac.SpPr = _f.NewCT_ShapeProperties()
				if _adfd := d.DecodeElement(_fac.SpPr, &_dagda); _adfd != nil {
					return _adfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fac.TxPr = _f.NewCT_TextBody()
				if _bdcb := d.DecodeElement(_fac.TxPr, &_dagda); _bdcb != nil {
					return _bdcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _fege := d.DecodeElement(_fac.CrossAx, &_dagda); _fege != nil {
					return _fege
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_fac.Choice = NewEG_AxSharedChoice()
				if _begf := d.DecodeElement(&_fac.Choice.Crosses, &_dagda); _begf != nil {
					return _begf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_fac.Choice = NewEG_AxSharedChoice()
				if _aggf := d.DecodeElement(&_fac.Choice.CrossesAt, &_dagda); _aggf != nil {
					return _aggf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_fac.Auto = NewCT_Boolean()
				if _abgb := d.DecodeElement(_fac.Auto, &_dagda); _abgb != nil {
					return _abgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_fac.LblAlgn = NewCT_LblAlgn()
				if _dbdg := d.DecodeElement(_fac.LblAlgn, &_dagda); _dbdg != nil {
					return _dbdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_fac.LblOffset = NewCT_LblOffset()
				if _agd := d.DecodeElement(_fac.LblOffset, &_dagda); _agd != nil {
					return _agd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_fac.TickLblSkip = NewCT_Skip()
				if _gbcb := d.DecodeElement(_fac.TickLblSkip, &_dagda); _gbcb != nil {
					return _gbcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_fac.TickMarkSkip = NewCT_Skip()
				if _bgab := d.DecodeElement(_fac.TickMarkSkip, &_dagda); _bgab != nil {
					return _bgab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_fac.NoMultiLvlLbl = NewCT_Boolean()
				if _ccee := d.DecodeElement(_fac.NoMultiLvlLbl, &_dagda); _ccee != nil {
					return _ccee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fac.ExtLst = NewCT_ExtensionList()
				if _cad := d.DecodeElement(_fac.ExtLst, &_dagda); _cad != nil {
					return _cad
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _dagda.Name)
				if _dagb := d.Skip(); _dagb != nil {
					return _dagb
				}
			}
		case _b.EndElement:
			break _cfbb
		case _b.CharData:
		}
	}
	return nil
}

type CT_DoughnutChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	HoleSize      *CT_HoleSize
	ExtLst        *CT_ExtensionList
}

func (_feegd ST_CrossBetween) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_afbee := _b.Attr{}
	_afbee.Name = name
	switch _feegd {
	case ST_CrossBetweenUnset:
		_afbee.Value = ""
	case ST_CrossBetweenBetween:
		_afbee.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_afbee.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _afbee, nil
}
func (_gcgff *ST_PictureFormat) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_eafb, _eddfg := d.Token()
	if _eddfg != nil {
		return _eddfg
	}
	if _gaggg, _dfcdd := _eafb.(_b.EndElement); _dfcdd && _gaggg.Name == start.Name {
		*_gcgff = 1
		return nil
	}
	if _agbac, _ceabg := _eafb.(_b.CharData); !_ceabg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eafb)
	} else {
		switch string(_agbac) {
		case "":
			*_gcgff = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_gcgff = 1
		case "\u0073\u0074\u0061c\u006b":
			*_gcgff = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_gcgff = 3
		}
	}
	_eafb, _eddfg = d.Token()
	if _eddfg != nil {
		return _eddfg
	}
	if _acffc, _afcdcc := _eafb.(_b.EndElement); _afcdcc && _acffc.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eafb)
}

// Validate validates the CT_PivotFmt and its children
func (_gcga *CT_PivotFmt) Validate() error {
	return _gcga.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}
func NewCT_DateAx() *CT_DateAx {
	_cage := &CT_DateAx{}
	_cage.AxId = NewCT_UnsignedInt()
	_cage.Scaling = NewCT_Scaling()
	_cage.AxPos = NewCT_AxPos()
	_cage.CrossAx = NewCT_UnsignedInt()
	return _cage
}
func (_bbdaf *CT_StockChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _edff := range _bbdaf.Ser {
		e.EncodeElement(_edff, _bbad)
	}
	if _bbdaf.DLbls != nil {
		_bfgec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bbdaf.DLbls, _bfgec)
	}
	if _bbdaf.DropLines != nil {
		_gabf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbdaf.DropLines, _gabf)
	}
	if _bbdaf.HiLowLines != nil {
		_dedgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbdaf.HiLowLines, _dedgb)
	}
	if _bbdaf.UpDownBars != nil {
		_eeeac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_bbdaf.UpDownBars, _eeeac)
	}
	_cbeag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ebcb := range _bbdaf.AxId {
		e.EncodeElement(_ebcb, _cbeag)
	}
	if _bbdaf.ExtLst != nil {
		_gbeab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbdaf.ExtLst, _gbeab)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ecdb *CT_ErrBarType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ecdb.ValAttr != ST_ErrBarTypeUnset {
		_acee, _aafae := _ecdb.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _aafae != nil {
			return _aafae
		}
		start.Attr = append(start.Attr, _acee)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_eddd *CT_BandFmts) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gabb:
	for {
		_ded, _bgba := d.Token()
		if _bgba != nil {
			return _bgba
		}
		switch _adc := _ded.(type) {
		case _b.StartElement:
			switch _adc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_daf := NewCT_BandFmt()
				if _fggbg := d.DecodeElement(_daf, &_adc); _fggbg != nil {
					return _fggbg
				}
				_eddd.BandFmt = append(_eddd.BandFmt, _daf)
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _adc.Name)
				if _gabg := d.Skip(); _gabg != nil {
					return _gabg
				}
			}
		case _b.EndElement:
			break _gabb
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SurfaceChart and its children
func (_dbgac *CT_SurfaceChart) Validate() error {
	return _dbgac.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_afcg ST_TrendlineType) Validate() error         { return _afcg.ValidateWithPath("") }
func (_fddag ST_PageSetupOrientation) Validate() error { return _fddag.ValidateWithPath("") }

// Validate validates the CT_Pie3DChart and its children
func (_dcfce *CT_Pie3DChart) Validate() error {
	return _dcfce.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_Surface3DChart and its children
func (_gfcf *CT_Surface3DChart) Validate() error {
	return _gfcf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}
func (_abdf *CT_CustSplit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gaeg:
	for {
		_ffad, _ccgg := d.Token()
		if _ccgg != nil {
			return _ccgg
		}
		switch _ebcg := _ffad.(type) {
		case _b.StartElement:
			switch _ebcg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_ecee := NewCT_UnsignedInt()
				if _gfcac := d.DecodeElement(_ecee, &_ebcg); _gfcac != nil {
					return _gfcac
				}
				_abdf.SecondPiePt = append(_abdf.SecondPiePt, _ecee)
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _ebcg.Name)
				if _bfgbe := d.Skip(); _bfgbe != nil {
					return _bfgbe
				}
			}
		case _b.EndElement:
			break _gaeg
		case _b.CharData:
		}
	}
	return nil
}
func (_aacba *ST_TickMark) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fdfaf, _eaedc := d.Token()
	if _eaedc != nil {
		return _eaedc
	}
	if _efdg, _gbbag := _fdfaf.(_b.EndElement); _gbbag && _efdg.Name == start.Name {
		*_aacba = 1
		return nil
	}
	if _baecf, _bbbda := _fdfaf.(_b.CharData); !_bbbda {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdfaf)
	} else {
		switch string(_baecf) {
		case "":
			*_aacba = 0
		case "\u0063\u0072\u006fs\u0073":
			*_aacba = 1
		case "\u0069\u006e":
			*_aacba = 2
		case "\u006e\u006f\u006e\u0065":
			*_aacba = 3
		case "\u006f\u0075\u0074":
			*_aacba = 4
		}
	}
	_fdfaf, _eaedc = d.Token()
	if _eaedc != nil {
		return _eaedc
	}
	if _cacfc, _acaef := _fdfaf.(_b.EndElement); _acaef && _cacfc.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdfaf)
}

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

// Validate validates the CT_ErrDir and its children
func (_baea *CT_ErrDir) Validate() error {
	return _baea.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}

// Validate validates the CT_FirstSliceAng and its children
func (_eeead *CT_FirstSliceAng) Validate() error {
	return _eeead.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}
func (_cbbff ST_LayoutTarget) Validate() error { return _cbbff.ValidateWithPath("") }
func NewCT_NumVal() *CT_NumVal                 { _fade := &CT_NumVal{}; return _fade }
func (_gefe *CT_AxDataSourceChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ffde:
	for {
		_feb, _fcb := d.Token()
		if _fcb != nil {
			return _fcb
		}
		switch _efc := _feb.(type) {
		case _b.StartElement:
			switch _efc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_gefe.MultiLvlStrRef = NewCT_MultiLvlStrRef()
				if _bgce := d.DecodeElement(_gefe.MultiLvlStrRef, &_efc); _bgce != nil {
					return _bgce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_gefe.NumRef = NewCT_NumRef()
				if _fgg := d.DecodeElement(_gefe.NumRef, &_efc); _fgg != nil {
					return _fgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_gefe.NumLit = NewCT_NumData()
				if _ega := d.DecodeElement(_gefe.NumLit, &_efc); _ega != nil {
					return _ega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_gefe.StrRef = NewCT_StrRef()
				if _eeba := d.DecodeElement(_gefe.StrRef, &_efc); _eeba != nil {
					return _eeba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_gefe.StrLit = NewCT_StrData()
				if _ccdb := d.DecodeElement(_gefe.StrLit, &_efc); _ccdb != nil {
					return _ccdb
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _efc.Name)
				if _dbfd := d.Skip(); _dbfd != nil {
					return _dbfd
				}
			}
		case _b.EndElement:
			break _ffde
		case _b.CharData:
		}
	}
	return nil
}
func (_fedge *CT_Perspective) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fedge.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_fedge.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_ebggd *CT_HoleSize) ValidateWithPath(path string) error {
	if _ebggd.ValAttr != nil {
		if _cfcb := _ebggd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfcb != nil {
			return _cfcb
		}
	}
	return nil
}

// Validate validates the CT_CustSplit and its children
func (_cbee *CT_CustSplit) Validate() error {
	return _cbee.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

func (_bfgc *CT_NumDataSourceChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bfgc.NumRef != nil {
		_gacc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_bfgc.NumRef, _gacc)
	}
	if _bfgc.NumLit != nil {
		_bcgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_bfgc.NumLit, _bcgb)
	}
	return nil
}

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_badd *CT_BandFmt) ValidateWithPath(path string) error {
	if _acg := _badd.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _acg != nil {
		return _acg
	}
	if _badd.SpPr != nil {
		if _afgb := _badd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afgb != nil {
			return _afgb
		}
	}
	return nil
}

type ST_BuiltInUnit byte

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_gedac *CT_Scaling) ValidateWithPath(path string) error {
	if _gedac.LogBase != nil {
		if _gdee := _gedac.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _gdee != nil {
			return _gdee
		}
	}
	if _gedac.Orientation != nil {
		if _bgdec := _gedac.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _bgdec != nil {
			return _bgdec
		}
	}
	if _gedac.Max != nil {
		if _dabdb := _gedac.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _dabdb != nil {
			return _dabdb
		}
	}
	if _gedac.Min != nil {
		if _fecdg := _gedac.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _fecdg != nil {
			return _fecdg
		}
	}
	if _gedac.ExtLst != nil {
		if _acae := _gedac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acae != nil {
			return _acae
		}
	}
	return nil
}

// Validate validates the CT_TickMark and its children
func (_cdgdcd *CT_TickMark) Validate() error {
	return _cdgdcd.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}

// Validate validates the CT_TextLanguageID and its children
func (_bedb *CT_TextLanguageID) Validate() error {
	return _bedb.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}
func NewCT_DLblPos() *CT_DLblPos { _ggac := &CT_DLblPos{}; _ggac.ValAttr = ST_DLblPos(1); return _ggac }
func (_ebfdd *CT_TrendlineType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ebfdd.ValAttr != ST_TrendlineTypeUnset {
		_gfcd, _egebef := _ebfdd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _egebef != nil {
			return _egebef
		}
		start.Attr = append(start.Attr, _gfcd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fgggb *CT_Period) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fgggb.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_fgggb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Marker and its children
func (_gfffbc *CT_Marker) Validate() error {
	return _gfffbc.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}
func (_fdebd ST_RadarStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fdebd.String(), start)
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_ddbaf *CT_RotY) ValidateWithPath(path string) error {
	if _ddbaf.ValAttr != nil {
		if *_ddbaf.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_ddbaf.ValAttr)
		}
		if *_ddbaf.ValAttr > 360 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_ddbaf.ValAttr)
		}
	}
	return nil
}
func (_afcbd *EG_AxShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_adaed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_afcbd.AxId, _adaed)
	_eeabc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_afcbd.Scaling, _eeabc)
	if _afcbd.Delete != nil {
		_abbcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_afcbd.Delete, _abbcd)
	}
	_fdgga := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_afcbd.AxPos, _fdgga)
	if _afcbd.MajorGridlines != nil {
		_cfcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_afcbd.MajorGridlines, _cfcc)
	}
	if _afcbd.MinorGridlines != nil {
		_cggec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_afcbd.MinorGridlines, _cggec)
	}
	if _afcbd.Title != nil {
		_ebcc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_afcbd.Title, _ebcc)
	}
	if _afcbd.NumFmt != nil {
		_aecdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_afcbd.NumFmt, _aecdb)
	}
	if _afcbd.MajorTickMark != nil {
		_adegca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_afcbd.MajorTickMark, _adegca)
	}
	if _afcbd.MinorTickMark != nil {
		_dbgd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_afcbd.MinorTickMark, _dbgd)
	}
	if _afcbd.TickLblPos != nil {
		_gfed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_afcbd.TickLblPos, _gfed)
	}
	if _afcbd.SpPr != nil {
		_cffd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_afcbd.SpPr, _cffd)
	}
	if _afcbd.TxPr != nil {
		_gdacc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_afcbd.TxPr, _gdacc)
	}
	_fcffcc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_afcbd.CrossAx, _fcffcc)
	if _afcbd.Choice != nil {
		_afcbd.Choice.MarshalXML(e, _b.StartElement{})
	}
	return nil
}
func (_fdfa *ST_ErrDir) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fdfa = 0
	case "\u0078":
		*_fdfa = 1
	case "\u0079":
		*_fdfa = 2
	}
	return nil
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_cec *CT_BarDir) ValidateWithPath(path string) error {
	if _ffgb := _cec.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ffgb != nil {
		return _ffgb
	}
	return nil
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_aaga *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _acce := _aaga.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acce != nil {
		return _acce
	}
	return nil
}
func (_dae *CT_Crosses) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dae.ValAttr = ST_Crosses(1)
	for _, _aecc := range start.Attr {
		if _aecc.Name.Local == "\u0076\u0061\u006c" {
			_dae.ValAttr.UnmarshalXMLAttr(_aecc)
			continue
		}
	}
	for {
		_ecef, _gafad := d.Token()
		if _gafad != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _gafad)
		}
		if _faee, _bgbaf := _ecef.(_b.EndElement); _bgbaf && _faee.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfebe ST_MarkerStyle) Validate() error { return _dfebe.ValidateWithPath("") }

// Validate validates the CT_Extension and its children
func (_beggd *CT_Extension) Validate() error {
	return _beggd.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}
func (_afcae *Chart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afcae.CT_RelId = *NewCT_RelId()
	for _, _bgfag := range start.Attr {
		if _bgfag.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _bgfag.Name.Local == "\u0069\u0064" || _bgfag.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _bgfag.Name.Local == "\u0069\u0064" {
			_acddac, _bfbed := _bgfag.Value, error(nil)
			if _bfbed != nil {
				return _bfbed
			}
			_afcae.IdAttr = _acddac
			continue
		}
	}
	for {
		_gfged, _dffb := d.Token()
		if _dffb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _dffb)
		}
		if _ecade, _abgcg := _gfged.(_b.EndElement); _abgcg && _ecade.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_NumData and its children
func (_dagba *CT_NumData) Validate() error {
	return _dagba.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}
func NewCT_BarSer() *CT_BarSer {
	_efed := &CT_BarSer{}
	_efed.Idx = NewCT_UnsignedInt()
	_efed.Order = NewCT_UnsignedInt()
	return _efed
}

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

func (_cdgag *CT_ErrDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_dddec, _gbfb := _cdgag.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _gbfb != nil {
		return _gbfb
	}
	start.Attr = append(start.Attr, _dddec)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fdd *CT_BarChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fdd.BarDir = NewCT_BarDir()
_gbc:
	for {
		_fbe, _faa := d.Token()
		if _faa != nil {
			return _faa
		}
		switch _dde := _fbe.(type) {
		case _b.StartElement:
			switch _dde.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _cgaf := d.DecodeElement(_fdd.BarDir, &_dde); _cgaf != nil {
					return _cgaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_fdd.Grouping = NewCT_BarGrouping()
				if _cbcg := d.DecodeElement(_fdd.Grouping, &_dde); _cbcg != nil {
					return _cbcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fdd.VaryColors = NewCT_Boolean()
				if _caa := d.DecodeElement(_fdd.VaryColors, &_dde); _caa != nil {
					return _caa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fdde := NewCT_BarSer()
				if _fddf := d.DecodeElement(_fdde, &_dde); _fddf != nil {
					return _fddf
				}
				_fdd.Ser = append(_fdd.Ser, _fdde)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fdd.DLbls = NewCT_DLbls()
				if _aba := d.DecodeElement(_fdd.DLbls, &_dde); _aba != nil {
					return _aba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_fdd.GapWidth = NewCT_GapAmount()
				if _febb := d.DecodeElement(_fdd.GapWidth, &_dde); _febb != nil {
					return _febb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_fdd.Overlap = NewCT_Overlap()
				if _cgad := d.DecodeElement(_fdd.Overlap, &_dde); _cgad != nil {
					return _cgad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_aebc := NewCT_ChartLines()
				if _bgcb := d.DecodeElement(_aebc, &_dde); _bgcb != nil {
					return _bgcb
				}
				_fdd.SerLines = append(_fdd.SerLines, _aebc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fecd := NewCT_UnsignedInt()
				if _bffb := d.DecodeElement(_fecd, &_dde); _bffb != nil {
					return _bffb
				}
				_fdd.AxId = append(_fdd.AxId, _fecd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fdd.ExtLst = NewCT_ExtensionList()
				if _fba := d.DecodeElement(_fdd.ExtLst, &_dde); _fba != nil {
					return _fba
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _dde.Name)
				if _addd := d.Skip(); _addd != nil {
					return _addd
				}
			}
		case _b.EndElement:
			break _gbc
		case _b.CharData:
		}
	}
	return nil
}
func (_gbdg *CT_PivotFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gbdg.Idx = NewCT_UnsignedInt()
_bdcd:
	for {
		_eaf, _eebag := d.Token()
		if _eebag != nil {
			return _eebag
		}
		switch _dbfa := _eaf.(type) {
		case _b.StartElement:
			switch _dbfa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _agege := d.DecodeElement(_gbdg.Idx, &_dbfa); _agege != nil {
					return _agege
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gbdg.SpPr = _f.NewCT_ShapeProperties()
				if _eafe := d.DecodeElement(_gbdg.SpPr, &_dbfa); _eafe != nil {
					return _eafe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gbdg.TxPr = _f.NewCT_TextBody()
				if _eeeef := d.DecodeElement(_gbdg.TxPr, &_dbfa); _eeeef != nil {
					return _eeeef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gbdg.Marker = NewCT_Marker()
				if _cdffe := d.DecodeElement(_gbdg.Marker, &_dbfa); _cdffe != nil {
					return _cdffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_gbdg.DLbl = NewCT_DLbl()
				if _cdgde := d.DecodeElement(_gbdg.DLbl, &_dbfa); _cdgde != nil {
					return _cdgde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbdg.ExtLst = NewCT_ExtensionList()
				if _ecacc := d.DecodeElement(_gbdg.ExtLst, &_dbfa); _ecacc != nil {
					return _ecacc
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _dbfa.Name)
				if _addg := d.Skip(); _addg != nil {
					return _addg
				}
			}
		case _b.EndElement:
			break _bdcd
		case _b.CharData:
		}
	}
	return nil
}
func (_aebfg *CT_RotY) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cada := range start.Attr {
		if _cada.Name.Local == "\u0076\u0061\u006c" {
			_afeca, _egdgf := _bd.ParseUint(_cada.Value, 10, 16)
			if _egdgf != nil {
				return _egdgf
			}
			_beedb := uint16(_afeca)
			_aebfg.ValAttr = &_beedb
			continue
		}
	}
	for {
		_gacdg, _fddgd := d.Token()
		if _fddgd != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _fddgd)
		}
		if _bdde, _eegf := _gacdg.(_b.EndElement); _eegf && _bdde.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edaac ST_GapAmount) String() string {
	if _edaac.ST_GapAmountPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_edaac.ST_GapAmountPercent)
	}
	if _edaac.ST_GapAmountUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_edaac.ST_GapAmountUShort)
	}
	return ""
}

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_eecde *CT_DTable) ValidateWithPath(path string) error {
	if _eecde.ShowHorzBorder != nil {
		if _ged := _eecde.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _ged != nil {
			return _ged
		}
	}
	if _eecde.ShowVertBorder != nil {
		if _eeegc := _eecde.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _eeegc != nil {
			return _eeegc
		}
	}
	if _eecde.ShowOutline != nil {
		if _abgf := _eecde.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _abgf != nil {
			return _abgf
		}
	}
	if _eecde.ShowKeys != nil {
		if _aebbe := _eecde.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _aebbe != nil {
			return _aebbe
		}
	}
	if _eecde.SpPr != nil {
		if _afad := _eecde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afad != nil {
			return _afad
		}
	}
	if _eecde.TxPr != nil {
		if _fcg := _eecde.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fcg != nil {
			return _fcg
		}
	}
	if _eecde.ExtLst != nil {
		if _cgdbg := _eecde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgdbg != nil {
			return _cgdbg
		}
	}
	return nil
}
func NewCT_ScatterSer() *CT_ScatterSer {
	_fdbbc := &CT_ScatterSer{}
	_fdbbc.Idx = NewCT_UnsignedInt()
	_fdbbc.Order = NewCT_UnsignedInt()
	return _fdbbc
}
func (_edba *CT_SerAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edba.AxId = NewCT_UnsignedInt()
	_edba.Scaling = NewCT_Scaling()
	_edba.AxPos = NewCT_AxPos()
	_edba.CrossAx = NewCT_UnsignedInt()
_gbfgb:
	for {
		_bfceg, _bacfae := d.Token()
		if _bacfae != nil {
			return _bacfae
		}
		switch _cbbag := _bfceg.(type) {
		case _b.StartElement:
			switch _cbbag.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _egeab := d.DecodeElement(_edba.AxId, &_cbbag); _egeab != nil {
					return _egeab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ebegb := d.DecodeElement(_edba.Scaling, &_cbbag); _ebegb != nil {
					return _ebegb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_edba.Delete = NewCT_Boolean()
				if _dagbf := d.DecodeElement(_edba.Delete, &_cbbag); _dagbf != nil {
					return _dagbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _aagab := d.DecodeElement(_edba.AxPos, &_cbbag); _aagab != nil {
					return _aagab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_edba.MajorGridlines = NewCT_ChartLines()
				if _cagad := d.DecodeElement(_edba.MajorGridlines, &_cbbag); _cagad != nil {
					return _cagad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_edba.MinorGridlines = NewCT_ChartLines()
				if _cbecd := d.DecodeElement(_edba.MinorGridlines, &_cbbag); _cbecd != nil {
					return _cbecd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_edba.Title = NewCT_Title()
				if _cgcf := d.DecodeElement(_edba.Title, &_cbbag); _cgcf != nil {
					return _cgcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_edba.NumFmt = NewCT_NumFmt()
				if _deceg := d.DecodeElement(_edba.NumFmt, &_cbbag); _deceg != nil {
					return _deceg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_edba.MajorTickMark = NewCT_TickMark()
				if _ebcd := d.DecodeElement(_edba.MajorTickMark, &_cbbag); _ebcd != nil {
					return _ebcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_edba.MinorTickMark = NewCT_TickMark()
				if _effbd := d.DecodeElement(_edba.MinorTickMark, &_cbbag); _effbd != nil {
					return _effbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_edba.TickLblPos = NewCT_TickLblPos()
				if _bdeg := d.DecodeElement(_edba.TickLblPos, &_cbbag); _bdeg != nil {
					return _bdeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edba.SpPr = _f.NewCT_ShapeProperties()
				if _bebcd := d.DecodeElement(_edba.SpPr, &_cbbag); _bebcd != nil {
					return _bebcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_edba.TxPr = _f.NewCT_TextBody()
				if _degce := d.DecodeElement(_edba.TxPr, &_cbbag); _degce != nil {
					return _degce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _fgcfd := d.DecodeElement(_edba.CrossAx, &_cbbag); _fgcfd != nil {
					return _fgcfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_edba.Choice = NewEG_AxSharedChoice()
				if _cggfe := d.DecodeElement(&_edba.Choice.Crosses, &_cbbag); _cggfe != nil {
					return _cggfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_edba.Choice = NewEG_AxSharedChoice()
				if _ecgf := d.DecodeElement(&_edba.Choice.CrossesAt, &_cbbag); _ecgf != nil {
					return _ecgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_edba.TickLblSkip = NewCT_Skip()
				if _edbfed := d.DecodeElement(_edba.TickLblSkip, &_cbbag); _edbfed != nil {
					return _edbfed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_edba.TickMarkSkip = NewCT_Skip()
				if _bffggg := d.DecodeElement(_edba.TickMarkSkip, &_cbbag); _bffggg != nil {
					return _bffggg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edba.ExtLst = NewCT_ExtensionList()
				if _geabc := d.DecodeElement(_edba.ExtLst, &_cbbag); _geabc != nil {
					return _geabc
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _cbbag.Name)
				if _fdcfa := d.Skip(); _fdcfa != nil {
					return _fdcfa
				}
			}
		case _b.EndElement:
			break _gbfgb
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_Extension() *CT_Extension { _ebee := &CT_Extension{}; return _ebee }
func (_ecdea *CT_ChartSpace) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ecdea.Chart = NewCT_Chart()
_egec:
	for {
		_edddc, _acfa := d.Token()
		if _acfa != nil {
			return _acfa
		}
		switch _ead := _edddc.(type) {
		case _b.StartElement:
			switch _ead.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_ecdea.Date1904 = NewCT_Boolean()
				if _gggg := d.DecodeElement(_ecdea.Date1904, &_ead); _gggg != nil {
					return _gggg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_ecdea.Lang = NewCT_TextLanguageID()
				if _eacb := d.DecodeElement(_ecdea.Lang, &_ead); _eacb != nil {
					return _eacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_ecdea.RoundedCorners = NewCT_Boolean()
				if _feae := d.DecodeElement(_ecdea.RoundedCorners, &_ead); _feae != nil {
					return _feae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_ecdea.Style = NewCT_Style()
				if _ddd := d.DecodeElement(_ecdea.Style, &_ead); _ddd != nil {
					return _ddd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_ecdea.ClrMapOvr = _f.NewCT_ColorMapping()
				if _cdec := d.DecodeElement(_ecdea.ClrMapOvr, &_ead); _cdec != nil {
					return _cdec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_ecdea.PivotSource = NewCT_PivotSource()
				if _fgefc := d.DecodeElement(_ecdea.PivotSource, &_ead); _fgefc != nil {
					return _fgefc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_ecdea.Protection = NewCT_Protection()
				if _cddb := d.DecodeElement(_ecdea.Protection, &_ead); _cddb != nil {
					return _cddb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _def := d.DecodeElement(_ecdea.Chart, &_ead); _def != nil {
					return _def
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecdea.SpPr = _f.NewCT_ShapeProperties()
				if _efbc := d.DecodeElement(_ecdea.SpPr, &_ead); _efbc != nil {
					return _efbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ecdea.TxPr = _f.NewCT_TextBody()
				if _afdd := d.DecodeElement(_ecdea.TxPr, &_ead); _afdd != nil {
					return _afdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_ecdea.ExternalData = NewCT_ExternalData()
				if _ffdd := d.DecodeElement(_ecdea.ExternalData, &_ead); _ffdd != nil {
					return _ffdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_ecdea.PrintSettings = NewCT_PrintSettings()
				if _accb := d.DecodeElement(_ecdea.PrintSettings, &_ead); _accb != nil {
					return _accb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_ecdea.UserShapes = NewCT_RelId()
				if _feac := d.DecodeElement(_ecdea.UserShapes, &_ead); _feac != nil {
					return _feac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecdea.ExtLst = NewCT_ExtensionList()
				if _edbb := d.DecodeElement(_ecdea.ExtLst, &_ead); _edbb != nil {
					return _edbb
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _ead.Name)
				if _aea := d.Skip(); _aea != nil {
					return _aea
				}
			}
		case _b.EndElement:
			break _egec
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_Lvl() *CT_Lvl { _gbge := &CT_Lvl{}; return _gbge }

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_dcbg *CT_PlotArea) ValidateWithPath(path string) error {
	if _dcbg.Layout != nil {
		if _aafe := _dcbg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aafe != nil {
			return _aafe
		}
	}
	for _bccad, _eebfb := range _dcbg.Choice {
		if _dbbgd := _eebfb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _bccad)); _dbbgd != nil {
			return _dbbgd
		}
	}
	if _dcbg.CChoice != nil {
		if _fefeb := _dcbg.CChoice.ValidateWithPath(path + "\u002f\u0043\u0043\u0068\u006f\u0069\u0063\u0065"); _fefeb != nil {
			return _fefeb
		}
	}
	if _dcbg.DTable != nil {
		if _gedd := _dcbg.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _gedd != nil {
			return _gedd
		}
	}
	if _dcbg.SpPr != nil {
		if _dbcg := _dcbg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dbcg != nil {
			return _dbcg
		}
	}
	if _dcbg.ExtLst != nil {
		if _bbeba := _dcbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbeba != nil {
			return _bbeba
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_aeccc *CT_PageMargins) ValidateWithPath(path string) error { return nil }
func (_abec *EG_BarChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_abec.BarDir = NewCT_BarDir()
_efca:
	for {
		_badge, _eeaab := d.Token()
		if _eeaab != nil {
			return _eeaab
		}
		switch _ebad := _badge.(type) {
		case _b.StartElement:
			switch _ebad.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _gfaff := d.DecodeElement(_abec.BarDir, &_ebad); _gfaff != nil {
					return _gfaff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_abec.Grouping = NewCT_BarGrouping()
				if _efcaf := d.DecodeElement(_abec.Grouping, &_ebad); _efcaf != nil {
					return _efcaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_abec.VaryColors = NewCT_Boolean()
				if _abcge := d.DecodeElement(_abec.VaryColors, &_ebad); _abcge != nil {
					return _abcge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gaaeg := NewCT_BarSer()
				if _ccddd := d.DecodeElement(_gaaeg, &_ebad); _ccddd != nil {
					return _ccddd
				}
				_abec.Ser = append(_abec.Ser, _gaaeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_abec.DLbls = NewCT_DLbls()
				if _gcadd := d.DecodeElement(_abec.DLbls, &_ebad); _gcadd != nil {
					return _gcadd
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _ebad.Name)
				if _ecedd := d.Skip(); _ecedd != nil {
					return _ecedd
				}
			}
		case _b.EndElement:
			break _efca
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_PageMargins() *CT_PageMargins { _cdcbc := &CT_PageMargins{}; return _cdcbc }

type CT_DispUnits struct {
	Choice       *CT_DispUnitsChoice
	DispUnitsLbl *CT_DispUnitsLbl
	ExtLst       *CT_ExtensionList
}
type CT_Shape struct{ ValAttr ST_Shape }

func NewCT_SerAx() *CT_SerAx {
	_dceb := &CT_SerAx{}
	_dceb.AxId = NewCT_UnsignedInt()
	_dceb.Scaling = NewCT_Scaling()
	_dceb.AxPos = NewCT_AxPos()
	_dceb.CrossAx = NewCT_UnsignedInt()
	return _dceb
}

// Validate validates the CT_Legend and its children
func (_ddca *CT_Legend) Validate() error {
	return _ddca.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_eedc *CT_OfPieType) ValidateWithPath(path string) error {
	if _gbbff := _eedc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbbff != nil {
		return _gbbff
	}
	return nil
}

// Validate validates the CT_DPt and its children
func (_bgcg *CT_DPt) Validate() error {
	return _bgcg.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}
func NewCT_StrRef() *CT_StrRef { _fgee := &CT_StrRef{}; return _fgee }
func (_eegcb *EG_AreaChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eegcb.Grouping != nil {
		_ceec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_eegcb.Grouping, _ceec)
	}
	if _eegcb.VaryColors != nil {
		_ggfea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_eegcb.VaryColors, _ggfea)
	}
	if _eegcb.Ser != nil {
		_gabfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gggd := range _eegcb.Ser {
			e.EncodeElement(_gggd, _gabfa)
		}
	}
	if _eegcb.DLbls != nil {
		_abfec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eegcb.DLbls, _abfec)
	}
	if _eegcb.DropLines != nil {
		_aacg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eegcb.DropLines, _aacg)
	}
	return nil
}

type CT_RelId struct{ IdAttr string }
type CT_Orientation struct{ ValAttr ST_Orientation }

func (_gfeed ST_CrossBetween) ValidateWithPath(path string) error {
	switch _gfeed {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfeed))
	}
	return nil
}
func (_bfagf *CT_LegendPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bfagf.ValAttr != ST_LegendPosUnset {
		_bcgae, _abegg := _bfagf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _abegg != nil {
			return _abegg
		}
		start.Attr = append(start.Attr, _bcgae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cbdbe ST_TickMark) ValidateWithPath(path string) error {
	switch _cbdbe {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbdbe))
	}
	return nil
}
func (_dfcd *CT_DispUnitsChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dfcd.CustUnit != nil {
		_defe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dfcd.CustUnit, _defe)
	}
	if _dfcd.BuiltInUnit != nil {
		_fdfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dfcd.BuiltInUnit, _fdfb)
	}
	return nil
}

// Validate validates the CT_PieSer and its children
func (_fbde *CT_PieSer) Validate() error {
	return _fbde.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}

// Validate validates the CT_LogBase and its children
func (_bdbd *CT_LogBase) Validate() error {
	return _bdbd.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}
func (_aeag *CT_LineSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aeag.Idx = NewCT_UnsignedInt()
	_aeag.Order = NewCT_UnsignedInt()
_befe:
	for {
		_gdgd, _gdga := d.Token()
		if _gdga != nil {
			return _gdga
		}
		switch _ccafe := _gdgd.(type) {
		case _b.StartElement:
			switch _ccafe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dbba := d.DecodeElement(_aeag.Idx, &_ccafe); _dbba != nil {
					return _dbba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bddf := d.DecodeElement(_aeag.Order, &_ccafe); _bddf != nil {
					return _bddf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_aeag.Tx = NewCT_SerTx()
				if _gaea := d.DecodeElement(_aeag.Tx, &_ccafe); _gaea != nil {
					return _gaea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aeag.SpPr = _f.NewCT_ShapeProperties()
				if _defg := d.DecodeElement(_aeag.SpPr, &_ccafe); _defg != nil {
					return _defg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_aeag.Marker = NewCT_Marker()
				if _dfgd := d.DecodeElement(_aeag.Marker, &_ccafe); _dfgd != nil {
					return _dfgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ecfe := NewCT_DPt()
				if _eaada := d.DecodeElement(_ecfe, &_ccafe); _eaada != nil {
					return _eaada
				}
				_aeag.DPt = append(_aeag.DPt, _ecfe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aeag.DLbls = NewCT_DLbls()
				if _dbaeg := d.DecodeElement(_aeag.DLbls, &_ccafe); _dbaeg != nil {
					return _dbaeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_eegga := NewCT_Trendline()
				if _gaafe := d.DecodeElement(_eegga, &_ccafe); _gaafe != nil {
					return _gaafe
				}
				_aeag.Trendline = append(_aeag.Trendline, _eegga)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_aeag.ErrBars = NewCT_ErrBars()
				if _cccag := d.DecodeElement(_aeag.ErrBars, &_ccafe); _cccag != nil {
					return _cccag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_aeag.Cat = NewCT_AxDataSource()
				if _gccbd := d.DecodeElement(_aeag.Cat, &_ccafe); _gccbd != nil {
					return _gccbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_aeag.Val = NewCT_NumDataSource()
				if _bbea := d.DecodeElement(_aeag.Val, &_ccafe); _bbea != nil {
					return _bbea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_aeag.Smooth = NewCT_Boolean()
				if _gbfbb := d.DecodeElement(_aeag.Smooth, &_ccafe); _gbfbb != nil {
					return _gbfbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeag.ExtLst = NewCT_ExtensionList()
				if _adacb := d.DecodeElement(_aeag.ExtLst, &_ccafe); _adacb != nil {
					return _adacb
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _ccafe.Name)
				if _aedae := d.Skip(); _aedae != nil {
					return _aedae
				}
			}
		case _b.EndElement:
			break _befe
		case _b.CharData:
		}
	}
	return nil
}
func (_dbag *CT_CustSplit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dbag.SecondPiePt != nil {
		_dcba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _fcbba := range _dbag.SecondPiePt {
			e.EncodeElement(_fcbba, _dcba)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aeaab ST_RadarStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fgafc := _b.Attr{}
	_fgafc.Name = name
	switch _aeaab {
	case ST_RadarStyleUnset:
		_fgafc.Value = ""
	case ST_RadarStyleStandard:
		_fgafc.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_fgafc.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_fgafc.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _fgafc, nil
}

type ST_DLblPos byte

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_edab *CT_SerAx) ValidateWithPath(path string) error {
	if _ggbda := _edab.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _ggbda != nil {
		return _ggbda
	}
	if _gdefed := _edab.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _gdefed != nil {
		return _gdefed
	}
	if _edab.Delete != nil {
		if _gddaf := _edab.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _gddaf != nil {
			return _gddaf
		}
	}
	if _abfe := _edab.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _abfe != nil {
		return _abfe
	}
	if _edab.MajorGridlines != nil {
		if _cedf := _edab.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cedf != nil {
			return _cedf
		}
	}
	if _edab.MinorGridlines != nil {
		if _gaega := _edab.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _gaega != nil {
			return _gaega
		}
	}
	if _edab.Title != nil {
		if _fdfbb := _edab.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _fdfbb != nil {
			return _fdfbb
		}
	}
	if _edab.NumFmt != nil {
		if _gfbee := _edab.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gfbee != nil {
			return _gfbee
		}
	}
	if _edab.MajorTickMark != nil {
		if _aadgg := _edab.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _aadgg != nil {
			return _aadgg
		}
	}
	if _edab.MinorTickMark != nil {
		if _dgbaa := _edab.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dgbaa != nil {
			return _dgbaa
		}
	}
	if _edab.TickLblPos != nil {
		if _caff := _edab.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _caff != nil {
			return _caff
		}
	}
	if _edab.SpPr != nil {
		if _fdcbc := _edab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fdcbc != nil {
			return _fdcbc
		}
	}
	if _edab.TxPr != nil {
		if _dgdfc := _edab.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dgdfc != nil {
			return _dgdfc
		}
	}
	if _faagd := _edab.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _faagd != nil {
		return _faagd
	}
	if _edab.Choice != nil {
		if _geeac := _edab.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _geeac != nil {
			return _geeac
		}
	}
	if _edab.TickLblSkip != nil {
		if _cbadd := _edab.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _cbadd != nil {
			return _cbadd
		}
	}
	if _edab.TickMarkSkip != nil {
		if _gebdf := _edab.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _gebdf != nil {
			return _gebdf
		}
	}
	if _edab.ExtLst != nil {
		if _aggbf := _edab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aggbf != nil {
			return _aggbf
		}
	}
	return nil
}
func (_fbgbb ST_BuiltInUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fbgbb.String(), start)
}

// Validate validates the CT_LayoutTarget and its children
func (_dbbg *CT_LayoutTarget) Validate() error {
	return _dbbg.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}
func (_efag *CT_LayoutMode) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _efag.ValAttr != ST_LayoutModeUnset {
		_afae, _aaad := _efag.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _aaad != nil {
			return _aaad
		}
		start.Attr = append(start.Attr, _afae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_adfg *CT_DoughnutChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ggfa:
	for {
		_bgcbb, _fdge := d.Token()
		if _fdge != nil {
			return _fdge
		}
		switch _gefc := _bgcbb.(type) {
		case _b.StartElement:
			switch _gefc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_adfg.VaryColors = NewCT_Boolean()
				if _fbaa := d.DecodeElement(_adfg.VaryColors, &_gefc); _fbaa != nil {
					return _fbaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_babec := NewCT_PieSer()
				if _bafbe := d.DecodeElement(_babec, &_gefc); _bafbe != nil {
					return _bafbe
				}
				_adfg.Ser = append(_adfg.Ser, _babec)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_adfg.DLbls = NewCT_DLbls()
				if _fddg := d.DecodeElement(_adfg.DLbls, &_gefc); _fddg != nil {
					return _fddg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_adfg.FirstSliceAng = NewCT_FirstSliceAng()
				if _fcceg := d.DecodeElement(_adfg.FirstSliceAng, &_gefc); _fcceg != nil {
					return _fcceg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_adfg.HoleSize = NewCT_HoleSize()
				if _geead := d.DecodeElement(_adfg.HoleSize, &_gefc); _geead != nil {
					return _geead
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adfg.ExtLst = NewCT_ExtensionList()
				if _defd := d.DecodeElement(_adfg.ExtLst, &_gefc); _defd != nil {
					return _defd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _gefc.Name)
				if _bagf := d.Skip(); _bagf != nil {
					return _bagf
				}
			}
		case _b.EndElement:
			break _ggfa
		case _b.CharData:
		}
	}
	return nil
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

type CT_PivotSource struct {
	Name   string
	FmtId  *CT_UnsignedInt
	ExtLst []*CT_ExtensionList
}

func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice {
	_gafa := &CT_AxDataSourceChoice{}
	return _gafa
}
func (_aafac *CT_NumVal) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0069\u0064\u0078"}, Value: _aa.Sprintf("\u0025\u0076", _aafac.IdxAttr)})
	if _aafac.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _aa.Sprintf("\u0025\u0076", *_aafac.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_faaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
	_dc.AddPreserveSpaceAttr(&_faaa, _aafac.V)
	e.EncodeElement(_aafac.V, _faaa)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cdebe ST_LegendPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cdebe.String(), start)
}
func (_afbcc *ST_LblAlgn) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_acgab, _beag := d.Token()
	if _beag != nil {
		return _beag
	}
	if _aagae, _ffbad := _acgab.(_b.EndElement); _ffbad && _aagae.Name == start.Name {
		*_afbcc = 1
		return nil
	}
	if _acbgd, _bdebc := _acgab.(_b.CharData); !_bdebc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acgab)
	} else {
		switch string(_acbgd) {
		case "":
			*_afbcc = 0
		case "\u0063\u0074\u0072":
			*_afbcc = 1
		case "\u006c":
			*_afbcc = 2
		case "\u0072":
			*_afbcc = 3
		}
	}
	_acgab, _beag = d.Token()
	if _beag != nil {
		return _beag
	}
	if _cdfefg, _agbb := _acgab.(_b.EndElement); _agbb && _cdfefg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acgab)
}
func (_edcda ST_TimeUnit) ValidateWithPath(path string) error {
	switch _edcda {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_edcda))
	}
	return nil
}

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

type ST_LayoutMode byte

// Validate validates the CT_UpDownBar and its children
func (_bffbbd *CT_UpDownBar) Validate() error {
	return _bffbbd.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}
func (_gfcgg *CT_TxChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gfcgg.StrRef != nil {
		_ceacb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_gfcgg.StrRef, _ceacb)
	}
	if _gfcgg.Rich != nil {
		_dcccc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_gfcgg.Rich, _dcccc)
	}
	return nil
}

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_f.CT_TextBody
}

func NewCT_ErrValType() *CT_ErrValType { _gggca := &CT_ErrValType{}; return _gggca }

type EG_PieChartShared struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
}

func (_fdagb *ST_LegendPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fdagb = 0
	case "\u0062":
		*_fdagb = 1
	case "\u0074\u0072":
		*_fdagb = 2
	case "\u006c":
		*_fdagb = 3
	case "\u0072":
		*_fdagb = 4
	case "\u0074":
		*_fdagb = 5
	}
	return nil
}
func (_dcagcd *CT_PivotFmts) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ggfba:
	for {
		_bgacd, _ccfb := d.Token()
		if _ccfb != nil {
			return _ccfb
		}
		switch _fagg := _bgacd.(type) {
		case _b.StartElement:
			switch _fagg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_aedgb := NewCT_PivotFmt()
				if _afaec := d.DecodeElement(_aedgb, &_fagg); _afaec != nil {
					return _afaec
				}
				_dcagcd.PivotFmt = append(_dcagcd.PivotFmt, _aedgb)
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _fagg.Name)
				if _acab := d.Skip(); _acab != nil {
					return _acab
				}
			}
		case _b.EndElement:
			break _ggfba
		case _b.CharData:
		}
	}
	return nil
}

type CT_Style struct{ ValAttr uint8 }

func (_agfaa *EG_LegendEntryData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _agfaa.TxPr != nil {
		_ffced := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_agfaa.TxPr, _ffced)
	}
	return nil
}
func NewCT_HPercent() *CT_HPercent { _dfbbg := &CT_HPercent{}; return _dfbbg }

// Validate validates the EG_LineChartShared and its children
func (_dbge *EG_LineChartShared) Validate() error {
	return _dbge.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}
func (_efaga *CT_PivotFmts) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _efaga.PivotFmt != nil {
		_gecccf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _gbfec := range _efaga.PivotFmt {
			e.EncodeElement(_gbfec, _gecccf)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

func NewCT_DLblChoice() *CT_DLblChoice { _bbe := &CT_DLblChoice{}; return _bbe }

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_bcaag *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _bcaag.ValAttr != nil {
		if *_bcaag.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bcaag.ValAttr)
		}
		if *_bcaag.ValAttr > 360 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_bcaag.ValAttr)
		}
	}
	return nil
}
func (_ag *CT_Area3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ag.Grouping != nil {
		_ba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_ag.Grouping, _ba)
	}
	if _ag.VaryColors != nil {
		_fd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ag.VaryColors, _fd)
	}
	if _ag.Ser != nil {
		_e := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ae := range _ag.Ser {
			e.EncodeElement(_ae, _e)
		}
	}
	if _ag.DLbls != nil {
		_ee := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ag.DLbls, _ee)
	}
	if _ag.DropLines != nil {
		_bg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ag.DropLines, _bg)
	}
	if _ag.GapDepth != nil {
		_ce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_ag.GapDepth, _ce)
	}
	_bda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ea := range _ag.AxId {
		e.EncodeElement(_ea, _bda)
	}
	if _ag.ExtLst != nil {
		_aef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ag.ExtLst, _aef)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_LayoutTarget() *CT_LayoutTarget { _daebf := &CT_LayoutTarget{}; return _daebf }
func NewCT_RotY() *CT_RotY                 { _ceegc := &CT_RotY{}; return _ceegc }

type CT_DepthPercent struct{ ValAttr *ST_DepthPercent }
type CT_PivotFmts struct{ PivotFmt []*CT_PivotFmt }

// Validate validates the CT_Tx and its children
func (_ebggb *CT_Tx) Validate() error { return _ebggb.ValidateWithPath("\u0043\u0054\u005fT\u0078") }

// Validate validates the CT_DLblsChoice and its children
func (_dfaa *CT_DLblsChoice) Validate() error {
	return _dfaa.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}
func (_dfcc ST_SizeRepresents) String() string {
	switch _dfcc {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}

type CT_Title struct {
	Tx      *CT_Tx
	Layout  *CT_Layout
	Overlay *CT_Boolean
	SpPr    *_f.CT_ShapeProperties
	TxPr    *_f.CT_TextBody
	ExtLst  *CT_ExtensionList
}

func (_eddff *ST_LayoutMode) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_baadf, _caecc := d.Token()
	if _caecc != nil {
		return _caecc
	}
	if _bdge, _gbbddd := _baadf.(_b.EndElement); _gbbddd && _bdge.Name == start.Name {
		*_eddff = 1
		return nil
	}
	if _daff, _cbgb := _baadf.(_b.CharData); !_cbgb {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _baadf)
	} else {
		switch string(_daff) {
		case "":
			*_eddff = 0
		case "\u0065\u0064\u0067\u0065":
			*_eddff = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_eddff = 2
		}
	}
	_baadf, _caecc = d.Token()
	if _caecc != nil {
		return _caecc
	}
	if _gcbcfd, _dccdd := _baadf.(_b.EndElement); _dccdd && _gcbcfd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _baadf)
}
func (_fdade ST_TickLblPos) Validate() error { return _fdade.ValidateWithPath("") }
func (_dbdge *CT_ScatterStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dbdge.ValAttr != ST_ScatterStyleUnset {
		_bffbb, _edge := _dbdge.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _edge != nil {
			return _edge
		}
		start.Attr = append(start.Attr, _bffbb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_egfdcc *ST_Grouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_egedb, _feacaa := d.Token()
	if _feacaa != nil {
		return _feacaa
	}
	if _egbgb, _fbabe := _egedb.(_b.EndElement); _fbabe && _egbgb.Name == start.Name {
		*_egfdcc = 1
		return nil
	}
	if _ecdf, _dacaf := _egedb.(_b.CharData); !_dacaf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _egedb)
	} else {
		switch string(_ecdf) {
		case "":
			*_egfdcc = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_egfdcc = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_egfdcc = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_egfdcc = 3
		}
	}
	_egedb, _feacaa = d.Token()
	if _feacaa != nil {
		return _feacaa
	}
	if _agbd, _dabgb := _egedb.(_b.EndElement); _dabgb && _agbd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _egedb)
}

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_cggdf *CT_PictureFormat) ValidateWithPath(path string) error {
	if _cggdf.ValAttr == ST_PictureFormatUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _agcbb := _cggdf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agcbb != nil {
		return _agcbb
	}
	return nil
}
func (_bdad ST_OfPieType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dagef := _b.Attr{}
	_dagef.Name = name
	switch _bdad {
	case ST_OfPieTypeUnset:
		_dagef.Value = ""
	case ST_OfPieTypePie:
		_dagef.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_dagef.Value = "\u0062\u0061\u0072"
	}
	return _dagef, nil
}

// Validate validates the CT_LegendEntryChoice and its children
func (_ccfa *CT_LegendEntryChoice) Validate() error {
	return _ccfa.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}

// Validate validates the CT_ExternalData and its children
func (_fdee *CT_ExternalData) Validate() error {
	return _fdee.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}
func (_eecdf ST_Overlap) String() string {
	if _eecdf.ST_OverlapPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_eecdf.ST_OverlapPercent)
	}
	if _eecdf.ST_OverlapByte != nil {
		return _aa.Sprintf("\u0025\u0076", *_eecdf.ST_OverlapByte)
	}
	return ""
}

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_ffbgbf *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _ffbgbf.ValAttr != nil {
		if _cebee := _ffbgbf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cebee != nil {
			return _cebee
		}
	}
	return nil
}

// Validate validates the CT_PictureOptions and its children
func (_dgeeb *CT_PictureOptions) Validate() error {
	return _dgeeb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}

type CT_MultiLvlStrRef struct {
	F                string
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

func (_dgdgda *ST_TickLblPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dgdgda = 0
	case "\u0068\u0069\u0067\u0068":
		*_dgdgda = 1
	case "\u006c\u006f\u0077":
		*_dgdgda = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_dgdgda = 3
	case "\u006e\u006f\u006e\u0065":
		*_dgdgda = 4
	}
	return nil
}
func (_cbfd ST_BarGrouping) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_abea := _b.Attr{}
	_abea.Name = name
	switch _cbfd {
	case ST_BarGroupingUnset:
		_abea.Value = ""
	case ST_BarGroupingPercentStacked:
		_abea.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_abea.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_abea.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_abea.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _abea, nil
}
func (_abge *CT_LineSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bfea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_abge.Idx, _bfea)
	_eebc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_abge.Order, _eebc)
	if _abge.Tx != nil {
		_ffgbdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_abge.Tx, _ffgbdd)
	}
	if _abge.SpPr != nil {
		_ccdff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_abge.SpPr, _ccdff)
	}
	if _abge.Marker != nil {
		_acdae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_abge.Marker, _acdae)
	}
	if _abge.DPt != nil {
		_cabeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cdab := range _abge.DPt {
			e.EncodeElement(_cdab, _cabeg)
		}
	}
	if _abge.DLbls != nil {
		_cgecf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_abge.DLbls, _cgecf)
	}
	if _abge.Trendline != nil {
		_fagdf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fgeff := range _abge.Trendline {
			e.EncodeElement(_fgeff, _fagdf)
		}
	}
	if _abge.ErrBars != nil {
		_afgbd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_abge.ErrBars, _afgbd)
	}
	if _abge.Cat != nil {
		_dgdab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_abge.Cat, _dgdab)
	}
	if _abge.Val != nil {
		_ddef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_abge.Val, _ddef)
	}
	if _abge.Smooth != nil {
		_efbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_abge.Smooth, _efbe)
	}
	if _abge.ExtLst != nil {
		_efdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abge.ExtLst, _efdc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aag *CT_AreaChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aag.Grouping != nil {
		_ed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_aag.Grouping, _ed)
	}
	if _aag.VaryColors != nil {
		_cd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_aag.VaryColors, _cd)
	}
	if _aag.Ser != nil {
		_eef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ca := range _aag.Ser {
			e.EncodeElement(_ca, _eef)
		}
	}
	if _aag.DLbls != nil {
		_cgc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aag.DLbls, _cgc)
	}
	if _aag.DropLines != nil {
		_bdg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_aag.DropLines, _bdg)
	}
	_cb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ggd := range _aag.AxId {
		e.EncodeElement(_ggd, _cb)
	}
	if _aag.ExtLst != nil {
		_cba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aag.ExtLst, _cba)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cbcgd *CT_UnsignedInt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cadae := range start.Attr {
		if _cadae.Name.Local == "\u0076\u0061\u006c" {
			_gecde, _ddcdc := _bd.ParseUint(_cadae.Value, 10, 32)
			if _ddcdc != nil {
				return _ddcdc
			}
			_cbcgd.ValAttr = uint32(_gecde)
			continue
		}
	}
	for {
		_decf, _bbbfaa := d.Token()
		if _bbbfaa != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _bbbfaa)
		}
		if _dcab, _ggfga := _decf.(_b.EndElement); _ggfga && _dcab.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_TimeUnit() *CT_TimeUnit { _egege := &CT_TimeUnit{}; return _egege }

type CT_StockChart struct {
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_bfedac *EG_LegendEntryData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dffaf:
	for {
		_gecce, _aadcb := d.Token()
		if _aadcb != nil {
			return _aadcb
		}
		switch _ddcga := _gecce.(type) {
		case _b.StartElement:
			switch _ddcga.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bfedac.TxPr = _f.NewCT_TextBody()
				if _fdeg := d.DecodeElement(_bfedac.TxPr, &_ddcga); _fdeg != nil {
					return _fdeg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _ddcga.Name)
				if _daad := d.Skip(); _daad != nil {
					return _daad
				}
			}
		case _b.EndElement:
			break _dffaf
		case _b.CharData:
		}
	}
	return nil
}

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

func (_dggae ST_LegendPos) ValidateWithPath(path string) error {
	switch _dggae {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dggae))
	}
	return nil
}
func NewCT_Skip() *CT_Skip { _edfef := &CT_Skip{}; _edfef.ValAttr = 1; return _edfef }
func (_aefc *CT_PivotSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_begda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_dc.AddPreserveSpaceAttr(&_begda, _aefc.Name)
	e.EncodeElement(_aefc.Name, _begda)
	_egef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_aefc.FmtId, _egef)
	if _aefc.ExtLst != nil {
		_cggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _caac := range _aefc.ExtLst {
			e.EncodeElement(_caac, _cggf)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_CatAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblAlgn        *CT_LblAlgn
	LblOffset      *CT_LblOffset
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	NoMultiLvlLbl  *CT_Boolean
	ExtLst         *CT_ExtensionList
}

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_ffef *CT_DLbls) ValidateWithPath(path string) error {
	for _eagb, _fbcg := range _ffef.DLbl {
		if _bebg := _fbcg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _eagb)); _bebg != nil {
			return _bebg
		}
	}
	if _ffef.Choice != nil {
		if _aadc := _ffef.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aadc != nil {
			return _aadc
		}
	}
	if _ffef.ExtLst != nil {
		if _agddd := _ffef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agddd != nil {
			return _agddd
		}
	}
	return nil
}

type CT_DLbl struct {
	Idx    *CT_UnsignedInt
	Choice *CT_DLblChoice
	ExtLst *CT_ExtensionList
}

func (_eggeca *CT_Layout) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_faga:
	for {
		_dfge, _faed := d.Token()
		if _faed != nil {
			return _faed
		}
		switch _ggab := _dfge.(type) {
		case _b.StartElement:
			switch _ggab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_eggeca.ManualLayout = NewCT_ManualLayout()
				if _caag := d.DecodeElement(_eggeca.ManualLayout, &_ggab); _caag != nil {
					return _caag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eggeca.ExtLst = NewCT_ExtensionList()
				if _eead := d.DecodeElement(_eggeca.ExtLst, &_ggab); _eead != nil {
					return _eead
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _ggab.Name)
				if _gddgf := d.Skip(); _gddgf != nil {
					return _gddgf
				}
			}
		case _b.EndElement:
			break _faga
		case _b.CharData:
		}
	}
	return nil
}
func (_adcbb ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _adcbb {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adcbb))
	}
	return nil
}

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_eagcfb *CT_PivotFmt) ValidateWithPath(path string) error {
	if _afacb := _eagcfb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _afacb != nil {
		return _afacb
	}
	if _eagcfb.SpPr != nil {
		if _geafe := _eagcfb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _geafe != nil {
			return _geafe
		}
	}
	if _eagcfb.TxPr != nil {
		if _ddcd := _eagcfb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ddcd != nil {
			return _ddcd
		}
	}
	if _eagcfb.Marker != nil {
		if _ccgcg := _eagcfb.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _ccgcg != nil {
			return _ccgcg
		}
	}
	if _eagcfb.DLbl != nil {
		if _fdeea := _eagcfb.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _fdeea != nil {
			return _fdeea
		}
	}
	if _eagcfb.ExtLst != nil {
		if _ecddg := _eagcfb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecddg != nil {
			return _ecddg
		}
	}
	return nil
}
func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _gefgb := &CT_MultiLvlStrData{}; return _gefgb }
func (_aeeag *CT_RadarChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aeeag.RadarStyle = NewCT_RadarStyle()
_cfgf:
	for {
		_eabfg, _fdcac := d.Token()
		if _fdcac != nil {
			return _fdcac
		}
		switch _eadd := _eabfg.(type) {
		case _b.StartElement:
			switch _eadd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _ccagd := d.DecodeElement(_aeeag.RadarStyle, &_eadd); _ccagd != nil {
					return _ccagd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_aeeag.VaryColors = NewCT_Boolean()
				if _bdfd := d.DecodeElement(_aeeag.VaryColors, &_eadd); _bdfd != nil {
					return _bdfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_daag := NewCT_RadarSer()
				if _eeeca := d.DecodeElement(_daag, &_eadd); _eeeca != nil {
					return _eeeca
				}
				_aeeag.Ser = append(_aeeag.Ser, _daag)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aeeag.DLbls = NewCT_DLbls()
				if _egcef := d.DecodeElement(_aeeag.DLbls, &_eadd); _egcef != nil {
					return _egcef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_febd := NewCT_UnsignedInt()
				if _edbc := d.DecodeElement(_febd, &_eadd); _edbc != nil {
					return _edbc
				}
				_aeeag.AxId = append(_aeeag.AxId, _febd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeeag.ExtLst = NewCT_ExtensionList()
				if _dabe := d.DecodeElement(_aeeag.ExtLst, &_eadd); _dabe != nil {
					return _dabe
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _eadd.Name)
				if _fcgf := d.Skip(); _fcgf != nil {
					return _fcgf
				}
			}
		case _b.EndElement:
			break _cfgf
		case _b.CharData:
		}
	}
	return nil
}
func (_gedbe ST_TickLblPos) String() string {
	switch _gedbe {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type CT_Legend struct {
	LegendPos   *CT_LegendPos
	LegendEntry []*CT_LegendEntry
	Layout      *CT_Layout
	Overlay     *CT_Boolean
	SpPr        *_f.CT_ShapeProperties
	TxPr        *_f.CT_TextBody
	ExtLst      *CT_ExtensionList
}

func NewCT_AxDataSource() *CT_AxDataSource {
	_cac := &CT_AxDataSource{}
	_cac.Choice = NewCT_AxDataSourceChoice()
	return _cac
}
func (_fabae *CT_RelId) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _aa.Sprintf("\u0025\u0076", _fabae.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dcbaa *CT_TrendlineLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dcbaa.Layout != nil {
		_acbgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dcbaa.Layout, _acbgb)
	}
	if _dcbaa.Tx != nil {
		_dbdage := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dcbaa.Tx, _dbdage)
	}
	if _dcbaa.NumFmt != nil {
		_geagf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_dcbaa.NumFmt, _geagf)
	}
	if _dcbaa.SpPr != nil {
		_dbgaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcbaa.SpPr, _dbgaa)
	}
	if _dcbaa.TxPr != nil {
		_cgef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcbaa.TxPr, _cgef)
	}
	if _dcbaa.ExtLst != nil {
		_dbbbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcbaa.ExtLst, _dbbbg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_BarSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_f.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          *CT_ErrBars
	Cat              *CT_AxDataSource
	Val              *CT_NumDataSource
	Shape            *CT_Shape
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_fcfb *CT_BubbleScale) ValidateWithPath(path string) error {
	if _fcfb.ValAttr != nil {
		if _gagg := _fcfb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gagg != nil {
			return _gagg
		}
	}
	return nil
}

// Validate validates the EG_AreaChartShared and its children
func (_cedfg *EG_AreaChartShared) Validate() error {
	return _cedfg.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

// Validate validates the CT_PivotFmts and its children
func (_eebe *CT_PivotFmts) Validate() error {
	return _eebe.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_cdc *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _dbcd := _cdc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dbcd != nil {
		return _dbcd
	}
	return nil
}

// Validate validates the CT_Skip and its children
func (_cbffg *CT_Skip) Validate() error {
	return _cbffg.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}

// Validate validates the CT_DLblChoice and its children
func (_dgda *CT_DLblChoice) Validate() error {
	return _dgda.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_febbg *CT_NumData) ValidateWithPath(path string) error {
	if _febbg.PtCount != nil {
		if _abgae := _febbg.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _abgae != nil {
			return _abgae
		}
	}
	for _bbcbb, _fbbf := range _febbg.Pt {
		if _ffgeg := _fbbf.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _bbcbb)); _ffgeg != nil {
			return _ffgeg
		}
	}
	if _febbg.ExtLst != nil {
		if _fgcdb := _febbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fgcdb != nil {
			return _fgcdb
		}
	}
	return nil
}

// Validate validates the CT_SerTx and its children
func (_cgdc *CT_SerTx) Validate() error {
	return _cgdc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}

// Validate validates the CT_SplitType and its children
func (_bgddf *CT_SplitType) Validate() error {
	return _bgddf.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

type CT_Boolean struct{ ValAttr *bool }

func NewCT_Crosses() *CT_Crosses { _ebgd := &CT_Crosses{}; _ebgd.ValAttr = ST_Crosses(1); return _ebgd }

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_gcgg *CT_Layout) ValidateWithPath(path string) error {
	if _gcgg.ManualLayout != nil {
		if _deee := _gcgg.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _deee != nil {
			return _deee
		}
	}
	if _gcgg.ExtLst != nil {
		if _gffc := _gcgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gffc != nil {
			return _gffc
		}
	}
	return nil
}
func (_edda *CT_DLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edda.ValAttr = ST_DLblPos(1)
	for _, _fgcd := range start.Attr {
		if _fgcd.Name.Local == "\u0076\u0061\u006c" {
			_edda.ValAttr.UnmarshalXMLAttr(_fgcd)
			continue
		}
	}
	for {
		_gefa, _gfddf := d.Token()
		if _gfddf != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _gfddf)
		}
		if _gcfa, _ebdf := _gefa.(_b.EndElement); _ebdf && _gcfa.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_SecondPieSize() *CT_SecondPieSize { _eeafe := &CT_SecondPieSize{}; return _eeafe }

type CT_OfPieChart struct {
	OfPieType     *CT_OfPieType
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	GapWidth      *CT_GapAmount
	SplitType     *CT_SplitType
	SplitPos      *CT_Double
	CustSplit     *CT_CustSplit
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines
	ExtLst        *CT_ExtensionList
}

func (_fcabd ST_TickMark) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fcabd.String(), start)
}
func (_efff *CT_TimeUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eefc := range start.Attr {
		if _eefc.Name.Local == "\u0076\u0061\u006c" {
			_efff.ValAttr.UnmarshalXMLAttr(_eefc)
			continue
		}
	}
	for {
		_gbbdb, _agad := d.Token()
		if _agad != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _agad)
		}
		if _gdfga, _bcbcd := _gbbdb.(_b.EndElement); _bcbcd && _gdfga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adfb *CT_Skip) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_adfb.ValAttr = 1
	for _, _egdfa := range start.Attr {
		if _egdfa.Name.Local == "\u0076\u0061\u006c" {
			_aefee, _dcef := _bd.ParseUint(_egdfa.Value, 10, 32)
			if _dcef != nil {
				return _dcef
			}
			_adfb.ValAttr = uint32(_aefee)
			continue
		}
	}
	for {
		_gbcbb, _fdced := d.Token()
		if _fdced != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _fdced)
		}
		if _gdff, _cgfaf := _gbcbb.(_b.EndElement); _cgfaf && _gdff.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebda *CT_LayoutMode) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cbadg := range start.Attr {
		if _cbadg.Name.Local == "\u0076\u0061\u006c" {
			_ebda.ValAttr.UnmarshalXMLAttr(_cbadg)
			continue
		}
	}
	for {
		_gbag, _dcagb := d.Token()
		if _dcagb != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _dcagb)
		}
		if _agbf, _eede := _gbag.(_b.EndElement); _eede && _agbf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_SizeRepresents struct{ ValAttr ST_SizeRepresents }

func NewCT_Tx() *CT_Tx { _dbebc := &CT_Tx{}; _dbebc.Choice = NewCT_TxChoice(); return _dbebc }
func (_fbeac ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _fbeac {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbeac))
	}
	return nil
}
func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_caccc, _gebeb := _bd.ParseUint(s, 10, 32)
	if _gebeb != nil {
		return ST_Thickness{}, _gebeb
	}
	_ceecd := uint32(_caccc)
	return ST_Thickness{Uint32: &_ceecd}, nil
}

type CT_Scaling struct {
	LogBase     *CT_LogBase
	Orientation *CT_Orientation
	Max         *CT_Double
	Min         *CT_Double
	ExtLst      *CT_ExtensionList
}

func NewCT_OfPieType() *CT_OfPieType { _dfabb := &CT_OfPieType{}; return _dfabb }
func (_edea *CT_Line3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_eagcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_edea.Grouping, _eagcf)
	if _edea.VaryColors != nil {
		_efggc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_edea.VaryColors, _efggc)
	}
	if _edea.Ser != nil {
		_agae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fdfcc := range _edea.Ser {
			e.EncodeElement(_fdfcc, _agae)
		}
	}
	if _edea.DLbls != nil {
		_befba := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_edea.DLbls, _befba)
	}
	if _edea.DropLines != nil {
		_agfc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edea.DropLines, _agfc)
	}
	if _edea.GapDepth != nil {
		_bbdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_edea.GapDepth, _bbdd)
	}
	_geecg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _cfecg := range _edea.AxId {
		e.EncodeElement(_cfecg, _geecg)
	}
	if _edea.ExtLst != nil {
		_fagd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edea.ExtLst, _fagd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_acdf *CT_TrendlineType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _feff := range start.Attr {
		if _feff.Name.Local == "\u0076\u0061\u006c" {
			_acdf.ValAttr.UnmarshalXMLAttr(_feff)
			continue
		}
	}
	for {
		_fbdfa, _ffda := d.Token()
		if _ffda != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _ffda)
		}
		if _ebggfb, _gedf := _fbdfa.(_b.EndElement); _gedf && _ebggfb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ecdda *CT_LegendEntry) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bfce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ecdda.Idx, _bfce)
	if _ecdda.Choice != nil {
		_ecdda.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _ecdda.ExtLst != nil {
		_dagc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ecdda.ExtLst, _dagc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Thickness() *CT_Thickness { _dgcdb := &CT_Thickness{}; return _dgcdb }

// Validate validates the CT_OfPieType and its children
func (_bbfg *CT_OfPieType) Validate() error {
	return _bbfg.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_dedde *CT_DLblPos) ValidateWithPath(path string) error {
	if _dedde.ValAttr == ST_DLblPosUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gacb := _dedde.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gacb != nil {
		return _gacb
	}
	return nil
}
func (_cacec *ST_Shape) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_adeb, _cfad := d.Token()
	if _cfad != nil {
		return _cfad
	}
	if _ceda, _cegbg := _adeb.(_b.EndElement); _cegbg && _ceda.Name == start.Name {
		*_cacec = 1
		return nil
	}
	if _adcgg, _cfggd := _adeb.(_b.CharData); !_cfggd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adeb)
	} else {
		switch string(_adcgg) {
		case "":
			*_cacec = 0
		case "\u0063\u006f\u006e\u0065":
			*_cacec = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_cacec = 2
		case "\u0062\u006f\u0078":
			*_cacec = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_cacec = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_cacec = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_cacec = 6
		}
	}
	_adeb, _cfad = d.Token()
	if _cfad != nil {
		return _cfad
	}
	if _gegg, _bfgg := _adeb.(_b.EndElement); _bfgg && _gegg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adeb)
}
func NewEG_AxShared() *EG_AxShared {
	_bcgfb := &EG_AxShared{}
	_bcgfb.AxId = NewCT_UnsignedInt()
	_bcgfb.Scaling = NewCT_Scaling()
	_bcgfb.AxPos = NewCT_AxPos()
	_bcgfb.CrossAx = NewCT_UnsignedInt()
	return _bcgfb
}

// Validate validates the CT_NumVal and its children
func (_geeaf *CT_NumVal) Validate() error {
	return _geeaf.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}

type CT_AxisUnit struct{ ValAttr float64 }
type CT_SerAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	ExtLst         *CT_ExtensionList
}

func (_cfdc *CT_Chart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfdc.Title != nil {
		_cdgd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_cfdc.Title, _cdgd)
	}
	if _cfdc.AutoTitleDeleted != nil {
		_fcef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_cfdc.AutoTitleDeleted, _fcef)
	}
	if _cfdc.PivotFmts != nil {
		_egfdd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_cfdc.PivotFmts, _egfdd)
	}
	if _cfdc.View3D != nil {
		_eegeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_cfdc.View3D, _eegeg)
	}
	if _cfdc.Floor != nil {
		_afgbg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_cfdc.Floor, _afgbg)
	}
	if _cfdc.SideWall != nil {
		_ccde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_cfdc.SideWall, _ccde)
	}
	if _cfdc.BackWall != nil {
		_cgdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_cfdc.BackWall, _cgdb)
	}
	_dbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_cfdc.PlotArea, _dbb)
	if _cfdc.Legend != nil {
		_dbaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_cfdc.Legend, _dbaf)
	}
	if _cfdc.PlotVisOnly != nil {
		_cbdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_cfdc.PlotVisOnly, _cbdf)
	}
	if _cfdc.DispBlanksAs != nil {
		_egfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_cfdc.DispBlanksAs, _egfc)
	}
	if _cfdc.ShowDLblsOverMax != nil {
		_abfg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_cfdc.ShowDLblsOverMax, _abfg)
	}
	if _cfdc.ExtLst != nil {
		_befb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfdc.ExtLst, _befb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_gadea *CT_ScatterChart) ValidateWithPath(path string) error {
	if _fccf := _gadea.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _fccf != nil {
		return _fccf
	}
	if _gadea.VaryColors != nil {
		if _cddd := _gadea.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cddd != nil {
			return _cddd
		}
	}
	for _fdda, _gdgcb := range _gadea.Ser {
		if _dfcaa := _gdgcb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fdda)); _dfcaa != nil {
			return _dfcaa
		}
	}
	if _gadea.DLbls != nil {
		if _affa := _gadea.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _affa != nil {
			return _affa
		}
	}
	for _gaggf, _eface := range _gadea.AxId {
		if _fgggg := _eface.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gaggf)); _fgggg != nil {
			return _fgggg
		}
	}
	if _gadea.ExtLst != nil {
		if _fccfb := _gadea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fccfb != nil {
			return _fccfb
		}
	}
	return nil
}
func (_aedce *ST_PageSetupOrientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dfaac, _aaabc := d.Token()
	if _aaabc != nil {
		return _aaabc
	}
	if _gccfd, _decd := _dfaac.(_b.EndElement); _decd && _gccfd.Name == start.Name {
		*_aedce = 1
		return nil
	}
	if _gbabd, _ebafd := _dfaac.(_b.CharData); !_ebafd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfaac)
	} else {
		switch string(_gbabd) {
		case "":
			*_aedce = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_aedce = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_aedce = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_aedce = 3
		}
	}
	_dfaac, _aaabc = d.Token()
	if _aaabc != nil {
		return _aaabc
	}
	if _aacgg, _fddgg := _dfaac.(_b.EndElement); _fddgg && _aacgg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfaac)
}
func NewCT_ErrDir() *CT_ErrDir { _bgec := &CT_ErrDir{}; _bgec.ValAttr = ST_ErrDir(1); return _bgec }

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_ceacc *CT_TimeUnit) ValidateWithPath(path string) error {
	if _cbfc := _ceacc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbfc != nil {
		return _cbfc
	}
	return nil
}
func (_gfbd *CT_Extension) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fafce := range start.Attr {
		if _fafce.Name.Local == "\u0075\u0072\u0069" {
			_gdaca, _fgccf := _fafce.Value, error(nil)
			if _fgccf != nil {
				return _fgccf
			}
			_gfbd.UriAttr = &_gdaca
			continue
		}
	}
_fdab:
	for {
		_acb, _cebea := d.Token()
		if _cebea != nil {
			return _cebea
		}
		switch _dfgg := _acb.(type) {
		case _b.StartElement:
			switch _dfgg.Name {
			default:
				if _dbdd, _cbafg := _dc.CreateElement(_dfgg); _cbafg != nil {
					return _cbafg
				} else {
					if _gaac := d.DecodeElement(_dbdd, &_dfgg); _gaac != nil {
						return _gaac
					}
					_gfbd.Any = _dbdd
				}
			}
		case _b.EndElement:
			break _fdab
		case _b.CharData:
		}
	}
	return nil
}

type CT_LineSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   *CT_ErrBars
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}
type CT_ScatterStyle struct{ ValAttr ST_ScatterStyle }

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_acdaa *CT_Legend) ValidateWithPath(path string) error {
	if _acdaa.LegendPos != nil {
		if _cffc := _acdaa.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _cffc != nil {
			return _cffc
		}
	}
	for _ffae, _dedge := range _acdaa.LegendEntry {
		if _aecea := _dedge.ValidateWithPath(_aa.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _ffae)); _aecea != nil {
			return _aecea
		}
	}
	if _acdaa.Layout != nil {
		if _aacb := _acdaa.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aacb != nil {
			return _aacb
		}
	}
	if _acdaa.Overlay != nil {
		if _gbcg := _acdaa.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _gbcg != nil {
			return _gbcg
		}
	}
	if _acdaa.SpPr != nil {
		if _bbfc := _acdaa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bbfc != nil {
			return _bbfc
		}
	}
	if _acdaa.TxPr != nil {
		if _ffcd := _acdaa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ffcd != nil {
			return _ffcd
		}
	}
	if _acdaa.ExtLst != nil {
		if _faaf := _acdaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _faaf != nil {
			return _faaf
		}
	}
	return nil
}
func (_fgaf ST_LblAlgn) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fgaf.String(), start)
}
func (_gfggg ST_DLblPos) ValidateWithPath(path string) error {
	switch _gfggg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfggg))
	}
	return nil
}

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_baeg *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _baeg.ValAttr == ST_MarkerStyleUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _acgb := _baeg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acgb != nil {
		return _acgb
	}
	return nil
}
func (_fega ST_Orientation) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_caea := _b.Attr{}
	_caea.Name = name
	switch _fega {
	case ST_OrientationUnset:
		_caea.Value = ""
	case ST_OrientationMaxMin:
		_caea.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_caea.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _caea, nil
}

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

func (_aecb *ST_TimeUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bgdc, _gaaaef := d.Token()
	if _gaaaef != nil {
		return _gaaaef
	}
	if _dfcg, _gfdgc := _bgdc.(_b.EndElement); _gfdgc && _dfcg.Name == start.Name {
		*_aecb = 1
		return nil
	}
	if _fdfae, _ccecc := _bgdc.(_b.CharData); !_ccecc {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgdc)
	} else {
		switch string(_fdfae) {
		case "":
			*_aecb = 0
		case "\u0064\u0061\u0079\u0073":
			*_aecb = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_aecb = 2
		case "\u0079\u0065\u0061r\u0073":
			*_aecb = 3
		}
	}
	_bgdc, _gaaaef = d.Token()
	if _gaaaef != nil {
		return _gaaaef
	}
	if _eaeea, _bbdeb := _bgdc.(_b.EndElement); _bbdeb && _eaeea.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgdc)
}

type CT_Line3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_ggbdf *CT_Surface) ValidateWithPath(path string) error {
	if _ggbdf.Thickness != nil {
		if _ecccbg := _ggbdf.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _ecccbg != nil {
			return _ecccbg
		}
	}
	if _ggbdf.SpPr != nil {
		if _gegaa := _ggbdf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gegaa != nil {
			return _gegaa
		}
	}
	if _ggbdf.PictureOptions != nil {
		if _gfcbb := _ggbdf.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _gfcbb != nil {
			return _gfcbb
		}
	}
	if _ggbdf.ExtLst != nil {
		if _ebbe := _ggbdf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ebbe != nil {
			return _ebbe
		}
	}
	return nil
}

// Validate validates the CT_HoleSize and its children
func (_aaecg *CT_HoleSize) Validate() error {
	return _aaecg.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}
func (_dbgba *ST_AxPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_adbbg, _abaac := d.Token()
	if _abaac != nil {
		return _abaac
	}
	if _edeb, _efgff := _adbbg.(_b.EndElement); _efgff && _edeb.Name == start.Name {
		*_dbgba = 1
		return nil
	}
	if _eaaef, _ebffbb := _adbbg.(_b.CharData); !_ebffbb {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adbbg)
	} else {
		switch string(_eaaef) {
		case "":
			*_dbgba = 0
		case "\u0062":
			*_dbgba = 1
		case "\u006c":
			*_dbgba = 2
		case "\u0072":
			*_dbgba = 3
		case "\u0074":
			*_dbgba = 4
		}
	}
	_adbbg, _abaac = d.Token()
	if _abaac != nil {
		return _abaac
	}
	if _bbfed, _eccgg := _adbbg.(_b.EndElement); _eccgg && _bbfed.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adbbg)
}
func (_gddgb ST_TickLblPos) ValidateWithPath(path string) error {
	switch _gddgb {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gddgb))
	}
	return nil
}
func (_fbae *CT_ChartLines) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcfg:
	for {
		_babc, _ebfa := d.Token()
		if _ebfa != nil {
			return _ebfa
		}
		switch _beee := _babc.(type) {
		case _b.StartElement:
			switch _beee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbae.SpPr = _f.NewCT_ShapeProperties()
				if _ecde := d.DecodeElement(_fbae.SpPr, &_beee); _ecde != nil {
					return _ecde
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _beee.Name)
				if _gaae := d.Skip(); _gaae != nil {
					return _gaae
				}
			}
		case _b.EndElement:
			break _bcfg
		case _b.CharData:
		}
	}
	return nil
}
func (_acabdg ST_Shape) Validate() error { return _acabdg.ValidateWithPath("") }
func (_aafb *CT_DateAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aafb.AxId = NewCT_UnsignedInt()
	_aafb.Scaling = NewCT_Scaling()
	_aafb.AxPos = NewCT_AxPos()
	_aafb.CrossAx = NewCT_UnsignedInt()
_bfc:
	for {
		_cgcd, _gcage := d.Token()
		if _gcage != nil {
			return _gcage
		}
		switch _bcba := _cgcd.(type) {
		case _b.StartElement:
			switch _bcba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _afbb := d.DecodeElement(_aafb.AxId, &_bcba); _afbb != nil {
					return _afbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _eacf := d.DecodeElement(_aafb.Scaling, &_bcba); _eacf != nil {
					return _eacf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_aafb.Delete = NewCT_Boolean()
				if _ddcg := d.DecodeElement(_aafb.Delete, &_bcba); _ddcg != nil {
					return _ddcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ffadd := d.DecodeElement(_aafb.AxPos, &_bcba); _ffadd != nil {
					return _ffadd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_aafb.MajorGridlines = NewCT_ChartLines()
				if _egaee := d.DecodeElement(_aafb.MajorGridlines, &_bcba); _egaee != nil {
					return _egaee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_aafb.MinorGridlines = NewCT_ChartLines()
				if _bega := d.DecodeElement(_aafb.MinorGridlines, &_bcba); _bega != nil {
					return _bega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_aafb.Title = NewCT_Title()
				if _cede := d.DecodeElement(_aafb.Title, &_bcba); _cede != nil {
					return _cede
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_aafb.NumFmt = NewCT_NumFmt()
				if _efcea := d.DecodeElement(_aafb.NumFmt, &_bcba); _efcea != nil {
					return _efcea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_aafb.MajorTickMark = NewCT_TickMark()
				if _ggdca := d.DecodeElement(_aafb.MajorTickMark, &_bcba); _ggdca != nil {
					return _ggdca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_aafb.MinorTickMark = NewCT_TickMark()
				if _eeea := d.DecodeElement(_aafb.MinorTickMark, &_bcba); _eeea != nil {
					return _eeea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_aafb.TickLblPos = NewCT_TickLblPos()
				if _cff := d.DecodeElement(_aafb.TickLblPos, &_bcba); _cff != nil {
					return _cff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aafb.SpPr = _f.NewCT_ShapeProperties()
				if _gcab := d.DecodeElement(_aafb.SpPr, &_bcba); _gcab != nil {
					return _gcab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aafb.TxPr = _f.NewCT_TextBody()
				if _ccac := d.DecodeElement(_aafb.TxPr, &_bcba); _ccac != nil {
					return _ccac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _fcff := d.DecodeElement(_aafb.CrossAx, &_bcba); _fcff != nil {
					return _fcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_aafb.Choice = NewEG_AxSharedChoice()
				if _dfad := d.DecodeElement(&_aafb.Choice.Crosses, &_bcba); _dfad != nil {
					return _dfad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_aafb.Choice = NewEG_AxSharedChoice()
				if _cbca := d.DecodeElement(&_aafb.Choice.CrossesAt, &_bcba); _cbca != nil {
					return _cbca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_aafb.Auto = NewCT_Boolean()
				if _aeea := d.DecodeElement(_aafb.Auto, &_bcba); _aeea != nil {
					return _aeea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_aafb.LblOffset = NewCT_LblOffset()
				if _deb := d.DecodeElement(_aafb.LblOffset, &_bcba); _deb != nil {
					return _deb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aafb.BaseTimeUnit = NewCT_TimeUnit()
				if _dgac := d.DecodeElement(_aafb.BaseTimeUnit, &_bcba); _dgac != nil {
					return _dgac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_aafb.MajorUnit = NewCT_AxisUnit()
				if _eefa := d.DecodeElement(_aafb.MajorUnit, &_bcba); _eefa != nil {
					return _eefa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aafb.MajorTimeUnit = NewCT_TimeUnit()
				if _dddd := d.DecodeElement(_aafb.MajorTimeUnit, &_bcba); _dddd != nil {
					return _dddd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_aafb.MinorUnit = NewCT_AxisUnit()
				if _eaea := d.DecodeElement(_aafb.MinorUnit, &_bcba); _eaea != nil {
					return _eaea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_aafb.MinorTimeUnit = NewCT_TimeUnit()
				if _ffgbd := d.DecodeElement(_aafb.MinorTimeUnit, &_bcba); _ffgbd != nil {
					return _ffgbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aafb.ExtLst = NewCT_ExtensionList()
				if _adcf := d.DecodeElement(_aafb.ExtLst, &_bcba); _adcf != nil {
					return _adcf
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _bcba.Name)
				if _fffg := d.Skip(); _fffg != nil {
					return _fffg
				}
			}
		case _b.EndElement:
			break _bfc
		case _b.CharData:
		}
	}
	return nil
}
func NewEG_DLblShared() *EG_DLblShared { _cddea := &EG_DLblShared{}; return _cddea }
func (_bfdge ST_LblAlgn) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cebba := _b.Attr{}
	_cebba.Name = name
	switch _bfdge {
	case ST_LblAlgnUnset:
		_cebba.Value = ""
	case ST_LblAlgnCtr:
		_cebba.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_cebba.Value = "\u006c"
	case ST_LblAlgnR:
		_cebba.Value = "\u0072"
	}
	return _cebba, nil
}
func NewCT_PageSetup() *CT_PageSetup { _gcgb := &CT_PageSetup{}; return _gcgb }
func (_fgbfe *CT_SerTx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fgbfe.Choice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gcaa *CT_ErrBarType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gba := range start.Attr {
		if _gba.Name.Local == "\u0076\u0061\u006c" {
			_gcaa.ValAttr.UnmarshalXMLAttr(_gba)
			continue
		}
	}
	for {
		_dfbb, _bgdda := d.Token()
		if _bgdda != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _bgdda)
		}
		if _fbee, _cbeg := _dfbb.(_b.EndElement); _cbeg && _fbee.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_aadb *CT_ErrDir) ValidateWithPath(path string) error {
	if _aadb.ValAttr == ST_ErrDirUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bagfg := _aadb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bagfg != nil {
		return _bagfg
	}
	return nil
}
func NewCT_Style() *CT_Style { _fecgg := &CT_Style{}; _fecgg.ValAttr = 1; return _fecgg }

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_bcabc *CT_NumFmt) ValidateWithPath(path string) error { return nil }
func (_cecc *CT_BarSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cecc.Idx = NewCT_UnsignedInt()
	_cecc.Order = NewCT_UnsignedInt()
_dcd:
	for {
		_gcac, _edc := d.Token()
		if _edc != nil {
			return _edc
		}
		switch _cge := _gcac.(type) {
		case _b.StartElement:
			switch _cge.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ggb := d.DecodeElement(_cecc.Idx, &_cge); _ggb != nil {
					return _ggb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fcaf := d.DecodeElement(_cecc.Order, &_cge); _fcaf != nil {
					return _fcaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cecc.Tx = NewCT_SerTx()
				if _dge := d.DecodeElement(_cecc.Tx, &_cge); _dge != nil {
					return _dge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cecc.SpPr = _f.NewCT_ShapeProperties()
				if _fddfc := d.DecodeElement(_cecc.SpPr, &_cge); _fddfc != nil {
					return _fddfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_cecc.InvertIfNegative = NewCT_Boolean()
				if _ece := d.DecodeElement(_cecc.InvertIfNegative, &_cge); _ece != nil {
					return _ece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_cecc.PictureOptions = NewCT_PictureOptions()
				if _efeb := d.DecodeElement(_cecc.PictureOptions, &_cge); _efeb != nil {
					return _efeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_aabd := NewCT_DPt()
				if _ccdd := d.DecodeElement(_aabd, &_cge); _ccdd != nil {
					return _ccdd
				}
				_cecc.DPt = append(_cecc.DPt, _aabd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cecc.DLbls = NewCT_DLbls()
				if _ccf := d.DecodeElement(_cecc.DLbls, &_cge); _ccf != nil {
					return _ccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cdf := NewCT_Trendline()
				if _gbe := d.DecodeElement(_cdf, &_cge); _gbe != nil {
					return _gbe
				}
				_cecc.Trendline = append(_cecc.Trendline, _cdf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_cecc.ErrBars = NewCT_ErrBars()
				if _ace := d.DecodeElement(_cecc.ErrBars, &_cge); _ace != nil {
					return _ace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_cecc.Cat = NewCT_AxDataSource()
				if _aaac := d.DecodeElement(_cecc.Cat, &_cge); _aaac != nil {
					return _aaac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_cecc.Val = NewCT_NumDataSource()
				if _bcb := d.DecodeElement(_cecc.Val, &_cge); _bcb != nil {
					return _bcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_cecc.Shape = NewCT_Shape()
				if _adcd := d.DecodeElement(_cecc.Shape, &_cge); _adcd != nil {
					return _adcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cecc.ExtLst = NewCT_ExtensionList()
				if _cbcc := d.DecodeElement(_cecc.ExtLst, &_cge); _cbcc != nil {
					return _cbcc
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _cge.Name)
				if _gad := d.Skip(); _gad != nil {
					return _gad
				}
			}
		case _b.EndElement:
			break _dcd
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_LayoutMode and its children
func (_afdf *CT_LayoutMode) Validate() error {
	return _afdf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}
func (_ebebg *ST_DispBlanksAs) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_agbda, _fdgfb := d.Token()
	if _fdgfb != nil {
		return _fdgfb
	}
	if _gdegf, _aafcc := _agbda.(_b.EndElement); _aafcc && _gdegf.Name == start.Name {
		*_ebebg = 1
		return nil
	}
	if _becadd, _fdcg := _agbda.(_b.CharData); !_fdcg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agbda)
	} else {
		switch string(_becadd) {
		case "":
			*_ebebg = 0
		case "\u0073\u0070\u0061\u006e":
			*_ebebg = 1
		case "\u0067\u0061\u0070":
			*_ebebg = 2
		case "\u007a\u0065\u0072\u006f":
			*_ebebg = 3
		}
	}
	_agbda, _fdgfb = d.Token()
	if _fdgfb != nil {
		return _fdgfb
	}
	if _ecacb, _agaf := _agbda.(_b.EndElement); _agaf && _ecacb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agbda)
}
func NewCT_AreaChart() *CT_AreaChart { _dbf := &CT_AreaChart{}; return _dbf }

type CT_Thickness struct{ ValAttr ST_Thickness }

func NewCT_TickLblPos() *CT_TickLblPos { _gfdggc := &CT_TickLblPos{}; return _gfdggc }
func (_ebc *CT_BubbleScale) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ebc.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_ebc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aebafa *ST_Crosses) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bgbb, _ccgcb := d.Token()
	if _ccgcb != nil {
		return _ccgcb
	}
	if _fffgd, _fddb := _bgbb.(_b.EndElement); _fddb && _fffgd.Name == start.Name {
		*_aebafa = 1
		return nil
	}
	if _dgfec, _dcbde := _bgbb.(_b.CharData); !_dcbde {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgbb)
	} else {
		switch string(_dgfec) {
		case "":
			*_aebafa = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_aebafa = 1
		case "\u006d\u0061\u0078":
			*_aebafa = 2
		case "\u006d\u0069\u006e":
			*_aebafa = 3
		}
	}
	_bgbb, _ccgcb = d.Token()
	if _ccgcb != nil {
		return _ccgcb
	}
	if _dbfde, _gffbd := _bgbb.(_b.EndElement); _gffbd && _dbfde.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgbb)
}

type CT_NumFmt struct {
	FormatCodeAttr   string
	SourceLinkedAttr *bool
}

func (_cbedd *CT_PieChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gdecc:
	for {
		_cdcac, _eeeea := d.Token()
		if _eeeea != nil {
			return _eeeea
		}
		switch _bgfab := _cdcac.(type) {
		case _b.StartElement:
			switch _bgfab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbedd.VaryColors = NewCT_Boolean()
				if _gfcg := d.DecodeElement(_cbedd.VaryColors, &_bgfab); _gfcg != nil {
					return _gfcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggdda := NewCT_PieSer()
				if _fgaa := d.DecodeElement(_ggdda, &_bgfab); _fgaa != nil {
					return _fgaa
				}
				_cbedd.Ser = append(_cbedd.Ser, _ggdda)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbedd.DLbls = NewCT_DLbls()
				if _geafb := d.DecodeElement(_cbedd.DLbls, &_bgfab); _geafb != nil {
					return _geafb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_cbedd.FirstSliceAng = NewCT_FirstSliceAng()
				if _dcgg := d.DecodeElement(_cbedd.FirstSliceAng, &_bgfab); _dcgg != nil {
					return _dcgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbedd.ExtLst = NewCT_ExtensionList()
				if _gcfd := d.DecodeElement(_cbedd.ExtLst, &_bgfab); _gcfd != nil {
					return _gcfd
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bgfab.Name)
				if _dgbcb := d.Skip(); _dgbcb != nil {
					return _dgbcb
				}
			}
		case _b.EndElement:
			break _gdecc
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ScatterSer and its children
func (_edbbd *CT_ScatterSer) Validate() error {
	return _edbbd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

type CT_HPercent struct{ ValAttr *ST_HPercent }

// Validate validates the CT_ErrBarType and its children
func (_efde *CT_ErrBarType) Validate() error {
	return _efde.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}
func (_agdab ST_Orientation) Validate() error { return _agdab.ValidateWithPath("") }
func (_aeegg *CT_LayoutTarget) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _efgc := range start.Attr {
		if _efgc.Name.Local == "\u0076\u0061\u006c" {
			_aeegg.ValAttr.UnmarshalXMLAttr(_efgc)
			continue
		}
	}
	for {
		_egedf, _afac := d.Token()
		if _afac != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _afac)
		}
		if _cdfgf, _fdfcb := _egedf.(_b.EndElement); _fdfcb && _cdfgf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dadbgg *EG_SurfaceChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dadbgg.Wireframe != nil {
		_baebg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_dadbgg.Wireframe, _baebg)
	}
	if _dadbgg.Ser != nil {
		_gdde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cbcbg := range _dadbgg.Ser {
			e.EncodeElement(_cbcbg, _gdde)
		}
	}
	if _dadbgg.BandFmts != nil {
		_feeffc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_dadbgg.BandFmts, _feeffc)
	}
	return nil
}
func (_cdcace ST_PageSetupOrientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cdcace.String(), start)
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_faab *CT_BubbleChart) ValidateWithPath(path string) error {
	if _faab.VaryColors != nil {
		if _ddc := _faab.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ddc != nil {
			return _ddc
		}
	}
	for _fbdf, _gbg := range _faab.Ser {
		if _gfdd := _gbg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fbdf)); _gfdd != nil {
			return _gfdd
		}
	}
	if _faab.DLbls != nil {
		if _fgce := _faab.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fgce != nil {
			return _fgce
		}
	}
	if _faab.Bubble3D != nil {
		if _fcfg := _faab.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _fcfg != nil {
			return _fcfg
		}
	}
	if _faab.BubbleScale != nil {
		if _fded := _faab.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _fded != nil {
			return _fded
		}
	}
	if _faab.ShowNegBubbles != nil {
		if _aabb := _faab.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _aabb != nil {
			return _aabb
		}
	}
	if _faab.SizeRepresents != nil {
		if _eggd := _faab.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _eggd != nil {
			return _eggd
		}
	}
	for _dfb, _addfb := range _faab.AxId {
		if _fgcc := _addfb.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dfb)); _fgcc != nil {
			return _fgcc
		}
	}
	if _faab.ExtLst != nil {
		if _bead := _faab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bead != nil {
			return _bead
		}
	}
	return nil
}
func (_cgda *CT_GapAmount) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cgda.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_cgda.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TickLblPos and its children
func (_aceed *CT_TickLblPos) Validate() error {
	return _aceed.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}

type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

func (_dbc *CT_BubbleChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ggfg:
	for {
		_efead, _bbce := d.Token()
		if _bbce != nil {
			return _bbce
		}
		switch _fdbe := _efead.(type) {
		case _b.StartElement:
			switch _fdbe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dbc.VaryColors = NewCT_Boolean()
				if _ccdg := d.DecodeElement(_dbc.VaryColors, &_fdbe); _ccdg != nil {
					return _ccdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggca := NewCT_BubbleSer()
				if _ege := d.DecodeElement(_ggca, &_fdbe); _ege != nil {
					return _ege
				}
				_dbc.Ser = append(_dbc.Ser, _ggca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dbc.DLbls = NewCT_DLbls()
				if _abd := d.DecodeElement(_dbc.DLbls, &_fdbe); _abd != nil {
					return _abd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_dbc.Bubble3D = NewCT_Boolean()
				if _bafd := d.DecodeElement(_dbc.Bubble3D, &_fdbe); _bafd != nil {
					return _bafd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_dbc.BubbleScale = NewCT_BubbleScale()
				if _feefc := d.DecodeElement(_dbc.BubbleScale, &_fdbe); _feefc != nil {
					return _feefc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_dbc.ShowNegBubbles = NewCT_Boolean()
				if _adbe := d.DecodeElement(_dbc.ShowNegBubbles, &_fdbe); _adbe != nil {
					return _adbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_dbc.SizeRepresents = NewCT_SizeRepresents()
				if _fcbd := d.DecodeElement(_dbc.SizeRepresents, &_fdbe); _fcbd != nil {
					return _fcbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bba := NewCT_UnsignedInt()
				if _agcg := d.DecodeElement(_bba, &_fdbe); _agcg != nil {
					return _agcg
				}
				_dbc.AxId = append(_dbc.AxId, _bba)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbc.ExtLst = NewCT_ExtensionList()
				if _gbef := d.DecodeElement(_dbc.ExtLst, &_fdbe); _gbef != nil {
					return _gbef
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _fdbe.Name)
				if _gcddf := d.Skip(); _gcddf != nil {
					return _gcddf
				}
			}
		case _b.EndElement:
			break _ggfg
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_fgba *EG_AxShared) ValidateWithPath(path string) error {
	if _gbgec := _fgba.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _gbgec != nil {
		return _gbgec
	}
	if _dfaab := _fgba.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _dfaab != nil {
		return _dfaab
	}
	if _fgba.Delete != nil {
		if _fbbb := _fgba.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fbbb != nil {
			return _fbbb
		}
	}
	if _gccfb := _fgba.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gccfb != nil {
		return _gccfb
	}
	if _fgba.MajorGridlines != nil {
		if _abdaeb := _fgba.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _abdaeb != nil {
			return _abdaeb
		}
	}
	if _fgba.MinorGridlines != nil {
		if _adeff := _fgba.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _adeff != nil {
			return _adeff
		}
	}
	if _fgba.Title != nil {
		if _cdegg := _fgba.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _cdegg != nil {
			return _cdegg
		}
	}
	if _fgba.NumFmt != nil {
		if _cadc := _fgba.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cadc != nil {
			return _cadc
		}
	}
	if _fgba.MajorTickMark != nil {
		if _efggd := _fgba.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _efggd != nil {
			return _efggd
		}
	}
	if _fgba.MinorTickMark != nil {
		if _bgaf := _fgba.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bgaf != nil {
			return _bgaf
		}
	}
	if _fgba.TickLblPos != nil {
		if _efgdb := _fgba.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _efgdb != nil {
			return _efgdb
		}
	}
	if _fgba.SpPr != nil {
		if _fadge := _fgba.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fadge != nil {
			return _fadge
		}
	}
	if _fgba.TxPr != nil {
		if _dabee := _fgba.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dabee != nil {
			return _dabee
		}
	}
	if _afacg := _fgba.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _afacg != nil {
		return _afacg
	}
	if _fgba.Choice != nil {
		if _ddefd := _fgba.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ddefd != nil {
			return _ddefd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_ebac *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _ebac.Layout != nil {
		if _gcbaa := _ebac.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gcbaa != nil {
			return _gcbaa
		}
	}
	if _ebac.Tx != nil {
		if _cegc := _ebac.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cegc != nil {
			return _cegc
		}
	}
	if _ebac.NumFmt != nil {
		if _fbdg := _ebac.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _fbdg != nil {
			return _fbdg
		}
	}
	if _ebac.SpPr != nil {
		if _fcccd := _ebac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fcccd != nil {
			return _fcccd
		}
	}
	if _ebac.TxPr != nil {
		if _dgaa := _ebac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dgaa != nil {
			return _dgaa
		}
	}
	if _ebac.ExtLst != nil {
		if _efeab := _ebac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efeab != nil {
			return _efeab
		}
	}
	return nil
}
func (_fcbb *CT_BarDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fcbb.ValAttr != ST_BarDirUnset {
		_efg, _cbef := _fcbb.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _cbef != nil {
			return _cbef
		}
		start.Attr = append(start.Attr, _efg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Surface3DChart() *CT_Surface3DChart { _bedge := &CT_Surface3DChart{}; return _bedge }
func (_ebcbd *ST_GapAmount) Validate() error   { return _ebcbd.ValidateWithPath("") }
func (_dcgf *CT_PlotAreaChoice1) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_baggg:
	for {
		_bgbed, _ffbc := d.Token()
		if _ffbc != nil {
			return _ffbc
		}
		switch _dbcgb := _bgbed.(type) {
		case _b.StartElement:
			switch _dbcgb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_bfca := NewCT_ValAx()
				if _aacbg := d.DecodeElement(_bfca, &_dbcgb); _aacbg != nil {
					return _aacbg
				}
				_dcgf.ValAx = append(_dcgf.ValAx, _bfca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_ceag := NewCT_CatAx()
				if _fafca := d.DecodeElement(_ceag, &_dbcgb); _fafca != nil {
					return _fafca
				}
				_dcgf.CatAx = append(_dcgf.CatAx, _ceag)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_fead := NewCT_DateAx()
				if _feea := d.DecodeElement(_fead, &_dbcgb); _feea != nil {
					return _feea
				}
				_dcgf.DateAx = append(_dcgf.DateAx, _fead)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_cggb := NewCT_SerAx()
				if _facc := d.DecodeElement(_cggb, &_dbcgb); _facc != nil {
					return _facc
				}
				_dcgf.SerAx = append(_dcgf.SerAx, _cggb)
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _dbcgb.Name)
				if _aaed := d.Skip(); _aaed != nil {
					return _aaed
				}
			}
		case _b.EndElement:
			break _baggg
		case _b.CharData:
		}
	}
	return nil
}
func (_gfd *CT_AxPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_fga, _fff := _gfd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _fff != nil {
		return _fff
	}
	start.Attr = append(start.Attr, _fga)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_GapAmount and its children
func (_fcfeg *CT_GapAmount) Validate() error {
	return _fcfeg.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}

// Validate validates the CT_StrRef and its children
func (_gbcbe *CT_StrRef) Validate() error {
	return _gbcbe.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}
func (_bbgae ST_BarDir) String() string {
	switch _bbgae {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}
func (_dcda *CT_LegendEntryChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_eaad:
	for {
		_fecbf, _ccbe := d.Token()
		if _ccbe != nil {
			return _ccbe
		}
		switch _dceda := _fecbf.(type) {
		case _b.StartElement:
			switch _dceda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_dcda.Delete = NewCT_Boolean()
				if _bdbf := d.DecodeElement(_dcda.Delete, &_dceda); _bdbf != nil {
					return _bdbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dcda.TxPr = _f.NewCT_TextBody()
				if _fcace := d.DecodeElement(_dcda.TxPr, &_dceda); _fcace != nil {
					return _fcace
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dceda.Name)
				if _ffcda := d.Skip(); _ffcda != nil {
					return _ffcda
				}
			}
		case _b.EndElement:
			break _eaad
		case _b.CharData:
		}
	}
	return nil
}

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

func (_edffg *ST_BuiltInUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aeafc, _dbcfe := d.Token()
	if _dbcfe != nil {
		return _dbcfe
	}
	if _gdceb, _degca := _aeafc.(_b.EndElement); _degca && _gdceb.Name == start.Name {
		*_edffg = 1
		return nil
	}
	if _cdgbc, _abeab := _aeafc.(_b.CharData); !_abeab {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeafc)
	} else {
		switch string(_cdgbc) {
		case "":
			*_edffg = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_edffg = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_edffg = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_edffg = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_edffg = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_edffg = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_edffg = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_edffg = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_edffg = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_edffg = 9
		}
	}
	_aeafc, _dbcfe = d.Token()
	if _dbcfe != nil {
		return _dbcfe
	}
	if _ebfg, _cgcfa := _aeafc.(_b.EndElement); _cgcfa && _ebfg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeafc)
}
func NewCT_NumFmt() *CT_NumFmt { _bddb := &CT_NumFmt{}; return _bddb }

type ST_RadarStyle byte

func (_feeee ST_Thickness) String() string {
	if _feeee.ST_ThicknessPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_feeee.ST_ThicknessPercent)
	}
	if _feeee.Uint32 != nil {
		return _aa.Sprintf("\u0025\u0076", *_feeee.Uint32)
	}
	return ""
}

// Validate validates the CT_NumFmt and its children
func (_fbac *CT_NumFmt) Validate() error {
	return _fbac.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}

type CT_UpDownBars struct {
	GapWidth *CT_GapAmount
	UpBars   *CT_UpDownBar
	DownBars *CT_UpDownBar
	ExtLst   *CT_ExtensionList
}
type EG_DLblShared struct {
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_ffeeb ST_SplitType) String() string {
	switch _ffeeb {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}
func (_gbdfg *Group_DLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gbdfg.Layout != nil {
		_eggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_gbdfg.Layout, _eggf)
	}
	if _gbdfg.Tx != nil {
		_fggeba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gbdfg.Tx, _fggeba)
	}
	if _gbdfg.NumFmt != nil {
		_fabaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gbdfg.NumFmt, _fabaf)
	}
	if _gbdfg.SpPr != nil {
		_gggfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gbdfg.SpPr, _gggfg)
	}
	if _gbdfg.TxPr != nil {
		_afcfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gbdfg.TxPr, _afcfe)
	}
	if _gbdfg.DLblPos != nil {
		_acdff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_gbdfg.DLblPos, _acdff)
	}
	if _gbdfg.ShowLegendKey != nil {
		_gcddfc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_gbdfg.ShowLegendKey, _gcddfc)
	}
	if _gbdfg.ShowVal != nil {
		_agefg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_gbdfg.ShowVal, _agefg)
	}
	if _gbdfg.ShowCatName != nil {
		_ecaae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gbdfg.ShowCatName, _ecaae)
	}
	if _gbdfg.ShowSerName != nil {
		_agdaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gbdfg.ShowSerName, _agdaf)
	}
	if _gbdfg.ShowPercent != nil {
		_fcca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_gbdfg.ShowPercent, _fcca)
	}
	if _gbdfg.ShowBubbleSize != nil {
		_aaaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gbdfg.ShowBubbleSize, _aaaa)
	}
	if _gbdfg.Separator != nil {
		_feed := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_dc.AddPreserveSpaceAttr(&_feed, *_gbdfg.Separator)
		e.EncodeElement(_gbdfg.Separator, _feed)
	}
	return nil
}
func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _cfab := &CT_DispUnitsChoice{}; return _cfab }

type CT_Double struct{ ValAttr float64 }

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_bacac *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _bacac.Wireframe != nil {
		if _dadbge := _bacac.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _dadbge != nil {
			return _dadbge
		}
	}
	for _bgcba, _ccgafc := range _bacac.Ser {
		if _abffa := _ccgafc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bgcba)); _abffa != nil {
			return _abffa
		}
	}
	if _bacac.BandFmts != nil {
		if _fdcba := _bacac.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _fdcba != nil {
			return _fdcba
		}
	}
	return nil
}

// Validate validates the Group_DLbl and its children
func (_ggaed *Group_DLbl) Validate() error {
	return _ggaed.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}
func (_daeg *CT_OfPieType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _daeg.ValAttr != ST_OfPieTypeUnset {
		_dbbb, _eggeb := _daeg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _eggeb != nil {
			return _eggeb
		}
		start.Attr = append(start.Attr, _dbbb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Crosses and its children
func (_dadf *CT_Crosses) Validate() error {
	return _dadf.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}
func (_dege *CT_RadarSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dege.Idx = NewCT_UnsignedInt()
	_dege.Order = NewCT_UnsignedInt()
_aaedb:
	for {
		_eceb, _dgbdc := d.Token()
		if _dgbdc != nil {
			return _dgbdc
		}
		switch _dabd := _eceb.(type) {
		case _b.StartElement:
			switch _dabd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _abddde := d.DecodeElement(_dege.Idx, &_dabd); _abddde != nil {
					return _abddde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _caedc := d.DecodeElement(_dege.Order, &_dabd); _caedc != nil {
					return _caedc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dege.Tx = NewCT_SerTx()
				if _gaaea := d.DecodeElement(_dege.Tx, &_dabd); _gaaea != nil {
					return _gaaea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dege.SpPr = _f.NewCT_ShapeProperties()
				if _adgca := d.DecodeElement(_dege.SpPr, &_dabd); _adgca != nil {
					return _adgca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_dege.Marker = NewCT_Marker()
				if _dceef := d.DecodeElement(_dege.Marker, &_dabd); _dceef != nil {
					return _dceef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_efdf := NewCT_DPt()
				if _bggcb := d.DecodeElement(_efdf, &_dabd); _bggcb != nil {
					return _bggcb
				}
				_dege.DPt = append(_dege.DPt, _efdf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dege.DLbls = NewCT_DLbls()
				if _efbf := d.DecodeElement(_dege.DLbls, &_dabd); _efbf != nil {
					return _efbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_dege.Cat = NewCT_AxDataSource()
				if _agefd := d.DecodeElement(_dege.Cat, &_dabd); _agefd != nil {
					return _agefd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_dege.Val = NewCT_NumDataSource()
				if _beea := d.DecodeElement(_dege.Val, &_dabd); _beea != nil {
					return _beea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dege.ExtLst = NewCT_ExtensionList()
				if _fedcf := d.DecodeElement(_dege.ExtLst, &_dabd); _fedcf != nil {
					return _fedcf
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _dabd.Name)
				if _ddag := d.Skip(); _ddag != nil {
					return _ddag
				}
			}
		case _b.EndElement:
			break _aaedb
		case _b.CharData:
		}
	}
	return nil
}
func (_baca *CT_PieChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _baca.VaryColors != nil {
		_aebbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_baca.VaryColors, _aebbc)
	}
	if _baca.Ser != nil {
		_egbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cebb := range _baca.Ser {
			e.EncodeElement(_cebb, _egbad)
		}
	}
	if _baca.DLbls != nil {
		_bcdcg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_baca.DLbls, _bcdcg)
	}
	if _baca.FirstSliceAng != nil {
		_daef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_baca.FirstSliceAng, _daef)
	}
	if _baca.ExtLst != nil {
		_ccfeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_baca.ExtLst, _ccfeg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_eed *CT_DLblChoice) ValidateWithPath(path string) error {
	if _eed.Delete != nil {
		if _dced := _eed.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _dced != nil {
			return _dced
		}
	}
	if _eed.Layout != nil {
		if _cdcc := _eed.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _cdcc != nil {
			return _cdcc
		}
	}
	if _eed.Tx != nil {
		if _eefdb := _eed.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _eefdb != nil {
			return _eefdb
		}
	}
	if _eed.NumFmt != nil {
		if _bfgd := _eed.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bfgd != nil {
			return _bfgd
		}
	}
	if _eed.SpPr != nil {
		if _gge := _eed.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gge != nil {
			return _gge
		}
	}
	if _eed.TxPr != nil {
		if _ebdca := _eed.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ebdca != nil {
			return _ebdca
		}
	}
	if _eed.DLblPos != nil {
		if _ceddc := _eed.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _ceddc != nil {
			return _ceddc
		}
	}
	if _eed.ShowLegendKey != nil {
		if _acgg := _eed.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _acgg != nil {
			return _acgg
		}
	}
	if _eed.ShowVal != nil {
		if _eedd := _eed.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _eedd != nil {
			return _eedd
		}
	}
	if _eed.ShowCatName != nil {
		if _ecdd := _eed.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _ecdd != nil {
			return _ecdd
		}
	}
	if _eed.ShowSerName != nil {
		if _fdfe := _eed.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _fdfe != nil {
			return _fdfe
		}
	}
	if _eed.ShowPercent != nil {
		if _aabde := _eed.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _aabde != nil {
			return _aabde
		}
	}
	if _eed.ShowBubbleSize != nil {
		if _efbcf := _eed.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _efbcf != nil {
			return _efbcf
		}
	}
	return nil
}

type CT_LayoutTarget struct{ ValAttr ST_LayoutTarget }

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_afbba *CT_PivotFmts) ValidateWithPath(path string) error {
	for _cbeef, _cagff := range _afbba.PivotFmt {
		if _becfd := _cagff.ValidateWithPath(_aa.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _cbeef)); _becfd != nil {
			return _becfd
		}
	}
	return nil
}
func (_dadff *CT_LblOffset) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dadff.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_dadff.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dfaaa *CT_PlotAreaChoice1) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dfaaa.ValAx != nil {
		_agega := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		for _, _dcbae := range _dfaaa.ValAx {
			e.EncodeElement(_dcbae, _agega)
		}
	}
	if _dfaaa.CatAx != nil {
		_ddeff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		for _, _cgffa := range _dfaaa.CatAx {
			e.EncodeElement(_cgffa, _ddeff)
		}
	}
	if _dfaaa.DateAx != nil {
		_ggbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		for _, _fcaffe := range _dfaaa.DateAx {
			e.EncodeElement(_fcaffe, _ggbg)
		}
	}
	if _dfaaa.SerAx != nil {
		_gdae := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		for _, _bgdfd := range _dfaaa.SerAx {
			e.EncodeElement(_bgdfd, _gdae)
		}
	}
	return nil
}
func (_bacdf *ST_SecondPieSize) Validate() error { return _bacdf.ValidateWithPath("") }

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_cgcaf *CT_Period) ValidateWithPath(path string) error {
	if _cgcaf.ValAttr != nil {
		if *_cgcaf.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_cgcaf.ValAttr)
		}
	}
	return nil
}
func (_dgcdd *CT_ValAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cacdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_dgcdd.AxId, _cacdc)
	_cffcf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_dgcdd.Scaling, _cffcf)
	if _dgcdd.Delete != nil {
		_eadf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_dgcdd.Delete, _eadf)
	}
	_gbfcf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_dgcdd.AxPos, _gbfcf)
	if _dgcdd.MajorGridlines != nil {
		_gabfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dgcdd.MajorGridlines, _gabfd)
	}
	if _dgcdd.MinorGridlines != nil {
		_efcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dgcdd.MinorGridlines, _efcd)
	}
	if _dgcdd.Title != nil {
		_eccg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_dgcdd.Title, _eccg)
	}
	if _dgcdd.NumFmt != nil {
		_ggcg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_dgcdd.NumFmt, _ggcg)
	}
	if _dgcdd.MajorTickMark != nil {
		_ffdcg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_dgcdd.MajorTickMark, _ffdcg)
	}
	if _dgcdd.MinorTickMark != nil {
		_gdgca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_dgcdd.MinorTickMark, _gdgca)
	}
	if _dgcdd.TickLblPos != nil {
		_edfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_dgcdd.TickLblPos, _edfd)
	}
	if _dgcdd.SpPr != nil {
		_eadg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dgcdd.SpPr, _eadg)
	}
	if _dgcdd.TxPr != nil {
		_fcfca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dgcdd.TxPr, _fcfca)
	}
	_ecfb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_dgcdd.CrossAx, _ecfb)
	if _dgcdd.Choice != nil {
		_dgcdd.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _dgcdd.CrossBetween != nil {
		_fbgbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_dgcdd.CrossBetween, _fbgbe)
	}
	if _dgcdd.MajorUnit != nil {
		_bceg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dgcdd.MajorUnit, _bceg)
	}
	if _dgcdd.MinorUnit != nil {
		_aecd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dgcdd.MinorUnit, _aecd)
	}
	if _dgcdd.DispUnits != nil {
		_acaf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_dgcdd.DispUnits, _acaf)
	}
	if _dgcdd.ExtLst != nil {
		_cbbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgcdd.ExtLst, _cbbad)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_ddeeb *CT_SplitType) ValidateWithPath(path string) error {
	if _effde := _ddeeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _effde != nil {
		return _effde
	}
	return nil
}
func (_aafcb *ST_LegendPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cgdba, _cgbag := d.Token()
	if _cgbag != nil {
		return _cgbag
	}
	if _eaeff, _fcbfe := _cgdba.(_b.EndElement); _fcbfe && _eaeff.Name == start.Name {
		*_aafcb = 1
		return nil
	}
	if _babd, _gccfa := _cgdba.(_b.CharData); !_gccfa {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cgdba)
	} else {
		switch string(_babd) {
		case "":
			*_aafcb = 0
		case "\u0062":
			*_aafcb = 1
		case "\u0074\u0072":
			*_aafcb = 2
		case "\u006c":
			*_aafcb = 3
		case "\u0072":
			*_aafcb = 4
		case "\u0074":
			*_aafcb = 5
		}
	}
	_cgdba, _cgbag = d.Token()
	if _cgbag != nil {
		return _cgbag
	}
	if _gabfdg, _bcebe := _cgdba.(_b.EndElement); _bcebe && _gabfdg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cgdba)
}
func (_gdbeg ST_DispBlanksAs) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_agecdg := _b.Attr{}
	_agecdg.Name = name
	switch _gdbeg {
	case ST_DispBlanksAsUnset:
		_agecdg.Value = ""
	case ST_DispBlanksAsSpan:
		_agecdg.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_agecdg.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_agecdg.Value = "\u007a\u0065\u0072\u006f"
	}
	return _agecdg, nil
}

type CT_DateAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblOffset      *CT_LblOffset
	BaseTimeUnit   *CT_TimeUnit
	MajorUnit      *CT_AxisUnit
	MajorTimeUnit  *CT_TimeUnit
	MinorUnit      *CT_AxisUnit
	MinorTimeUnit  *CT_TimeUnit
	ExtLst         *CT_ExtensionList
}

func (_bfag *CT_DLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_eccc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bfag.Idx, _eccc)
	if _bfag.Choice != nil {
		_bfag.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _bfag.ExtLst != nil {
		_egaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfag.ExtLst, _egaa)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_ErrBars struct {
	ErrDir     *CT_ErrDir
	ErrBarType *CT_ErrBarType
	ErrValType *CT_ErrValType
	NoEndCap   *CT_Boolean
	Plus       *CT_NumDataSource
	Minus      *CT_NumDataSource
	Val        *CT_Double
	SpPr       *_f.CT_ShapeProperties
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_ceff *CT_UpDownBars) ValidateWithPath(path string) error {
	if _ceff.GapWidth != nil {
		if _geaca := _ceff.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _geaca != nil {
			return _geaca
		}
	}
	if _ceff.UpBars != nil {
		if _gacf := _ceff.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _gacf != nil {
			return _gacf
		}
	}
	if _ceff.DownBars != nil {
		if _ebbaa := _ceff.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _ebbaa != nil {
			return _ebbaa
		}
	}
	if _ceff.ExtLst != nil {
		if _bgeb := _ceff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgeb != nil {
			return _bgeb
		}
	}
	return nil
}
func (_egda ST_CrossBetween) Validate() error { return _egda.ValidateWithPath("") }

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_gaad *CT_LogBase) ValidateWithPath(path string) error {
	if _gaad.ValAttr < 2 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _gaad.ValAttr)
	}
	if _gaad.ValAttr > 1000 {
		return _aa.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _gaad.ValAttr)
	}
	return nil
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

func (_abbbb ST_CrossBetween) String() string {
	switch _abbbb {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_dbga *CT_ErrBarType) ValidateWithPath(path string) error {
	if _gecf := _dbga.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gecf != nil {
		return _gecf
	}
	return nil
}
func (_agbec ST_LayoutMode) ValidateWithPath(path string) error {
	switch _agbec {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agbec))
	}
	return nil
}
func NewCT_GapAmount() *CT_GapAmount { _dbgb := &CT_GapAmount{}; return _dbgb }
func (_gede ST_Crosses) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_gede.String(), start)
}
func (_ggbff *CT_NumFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _geeg := range start.Attr {
		if _geeg.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_fcab, _gfbde := _geeg.Value, error(nil)
			if _gfbde != nil {
				return _gfbde
			}
			_ggbff.FormatCodeAttr = _fcab
			continue
		}
		if _geeg.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_bfdfg, _cbeeg := _bd.ParseBool(_geeg.Value)
			if _cbeeg != nil {
				return _cbeeg
			}
			_ggbff.SourceLinkedAttr = &_bfdfg
			continue
		}
	}
	for {
		_fabc, _bcec := d.Token()
		if _bcec != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _bcec)
		}
		if _cdgbf, _cebfa := _fabc.(_b.EndElement); _cebfa && _cdgbf.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Shape byte

func (_gda *CT_BandFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gda.Idx = NewCT_UnsignedInt()
_gcb:
	for {
		_fce, _egca := d.Token()
		if _egca != nil {
			return _egca
		}
		switch _agb := _fce.(type) {
		case _b.StartElement:
			switch _agb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _feg := d.DecodeElement(_gda.Idx, &_agb); _feg != nil {
					return _feg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gda.SpPr = _f.NewCT_ShapeProperties()
				if _dgdf := d.DecodeElement(_gda.SpPr, &_agb); _dgdf != nil {
					return _dgdf
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _agb.Name)
				if _cef := d.Skip(); _cef != nil {
					return _cef
				}
			}
		case _b.EndElement:
			break _gcb
		case _b.CharData:
		}
	}
	return nil
}

type CT_ErrDir struct{ ValAttr ST_ErrDir }

func (_efbbg ST_LayoutTarget) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_abeec := _b.Attr{}
	_abeec.Name = name
	switch _efbbg {
	case ST_LayoutTargetUnset:
		_abeec.Value = ""
	case ST_LayoutTargetInner:
		_abeec.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_abeec.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _abeec, nil
}

type CT_AxDataSource struct{ Choice *CT_AxDataSourceChoice }
type CT_BarDir struct{ ValAttr ST_BarDir }
type ST_AxPos byte

func (_ddcee *CT_Marker) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cead:
	for {
		_bbaee, _feegg := d.Token()
		if _feegg != nil {
			return _feegg
		}
		switch _gbfgf := _bbaee.(type) {
		case _b.StartElement:
			switch _gbfgf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_ddcee.Symbol = NewCT_MarkerStyle()
				if _eggee := d.DecodeElement(_ddcee.Symbol, &_gbfgf); _eggee != nil {
					return _eggee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_ddcee.Size = NewCT_MarkerSize()
				if _bcfd := d.DecodeElement(_ddcee.Size, &_gbfgf); _bcfd != nil {
					return _bcfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddcee.SpPr = _f.NewCT_ShapeProperties()
				if _ggegf := d.DecodeElement(_ddcee.SpPr, &_gbfgf); _ggegf != nil {
					return _ggegf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddcee.ExtLst = NewCT_ExtensionList()
				if _edec := d.DecodeElement(_ddcee.ExtLst, &_gbfgf); _edec != nil {
					return _edec
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _gbfgf.Name)
				if _ggbc := d.Skip(); _ggbc != nil {
					return _ggbc
				}
			}
		case _b.EndElement:
			break _cead
		case _b.CharData:
		}
	}
	return nil
}
func (_fbade *ST_Thickness) ValidateWithPath(path string) error {
	_ccefgf := []string{}
	if _fbade.ST_ThicknessPercent != nil {
		_ccefgf = append(_ccefgf, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _fbade.Uint32 != nil {
		_ccefgf = append(_ccefgf, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_ccefgf) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ccefgf)
	}
	return nil
}
func (_efagb *CT_LegendEntryChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _efagb.Delete != nil {
		_feeff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_efagb.Delete, _feeff)
	}
	if _efagb.TxPr != nil {
		_gdba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_efagb.TxPr, _gdba)
	}
	return nil
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_dfee *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _dffc := _dfee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dffc != nil {
		return _dffc
	}
	return nil
}
func NewCT_CatAx() *CT_CatAx {
	_dcbe := &CT_CatAx{}
	_dcbe.AxId = NewCT_UnsignedInt()
	_dcbe.Scaling = NewCT_Scaling()
	_dcbe.AxPos = NewCT_AxPos()
	_dcbe.CrossAx = NewCT_UnsignedInt()
	return _dcbe
}

// Validate validates the ChartSpace and its children
func (_bfafd *ChartSpace) Validate() error {
	return _bfafd.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_egac *CT_Protection) ValidateWithPath(path string) error {
	if _egac.ChartObject != nil {
		if _dcdfa := _egac.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _dcdfa != nil {
			return _dcdfa
		}
	}
	if _egac.Data != nil {
		if _aebe := _egac.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _aebe != nil {
			return _aebe
		}
	}
	if _egac.Formatting != nil {
		if _fgcde := _egac.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _fgcde != nil {
			return _fgcde
		}
	}
	if _egac.Selection != nil {
		if _ccgac := _egac.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _ccgac != nil {
			return _ccgac
		}
	}
	if _egac.UserInterface != nil {
		if _geda := _egac.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _geda != nil {
			return _geda
		}
	}
	return nil
}

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

type ST_ErrDir byte

func (_aafd *CT_HoleSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aade := range start.Attr {
		if _aade.Name.Local == "\u0076\u0061\u006c" {
			_ffgab, _fadgb := ParseUnionST_HoleSize(_aade.Value)
			if _fadgb != nil {
				return _fadgb
			}
			_aafd.ValAttr = &_ffgab
			continue
		}
	}
	for {
		_fcbcd, _gcge := d.Token()
		if _gcge != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _gcge)
		}
		if _ecdc, _acecd := _fcbcd.(_b.EndElement); _acecd && _ecdc.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_PictureFormat byte

func NewCT_RadarChart() *CT_RadarChart {
	_ededa := &CT_RadarChart{}
	_ededa.RadarStyle = NewCT_RadarStyle()
	return _ededa
}
func (_dcfdb ST_AxPos) ValidateWithPath(path string) error {
	switch _dcfdb {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcfdb))
	}
	return nil
}
func (_cagee ST_SecondPieSize) String() string {
	if _cagee.ST_SecondPieSizePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_cagee.ST_SecondPieSizePercent)
	}
	if _cagee.ST_SecondPieSizeUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_cagee.ST_SecondPieSizeUShort)
	}
	return ""
}
func (_eeeg *CT_BubbleScale) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bagc := range start.Attr {
		if _bagc.Name.Local == "\u0076\u0061\u006c" {
			_dba, _dgcfc := ParseUnionST_BubbleScale(_bagc.Value)
			if _dgcfc != nil {
				return _dgcfc
			}
			_eeeg.ValAttr = &_dba
			continue
		}
	}
	for {
		_gddf, _cbfg := d.Token()
		if _cbfg != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _cbfg)
		}
		if _fcfe, _egcee := _gddf.(_b.EndElement); _egcee && _fcfe.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eecdd *CT_LblAlgn) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_eecdd.ValAttr = ST_LblAlgn(1)
	for _, _efbd := range start.Attr {
		if _efbd.Name.Local == "\u0076\u0061\u006c" {
			_eecdd.ValAttr.UnmarshalXMLAttr(_efbd)
			continue
		}
	}
	for {
		_eaaf, _cgde := d.Token()
		if _cgde != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _cgde)
		}
		if _gcff, _dfcag := _eaaf.(_b.EndElement); _dfcag && _gcff.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Order struct{ ValAttr *uint8 }

// Validate validates the CT_Grouping and its children
func (_cfbbg *CT_Grouping) Validate() error {
	return _cfbbg.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}
func (_gbbce ST_BuiltInUnit) Validate() error { return _gbbce.ValidateWithPath("") }
func NewCT_Order() *CT_Order                  { _afdde := &CT_Order{}; return _afdde }
func NewCT_View3D() *CT_View3D                { _gbfcg := &CT_View3D{}; return _gbfcg }
func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_beadc, _bddce := _bd.ParseInt(s, 10, 8)
	if _bddce != nil {
		return ST_Overlap{}, _bddce
	}
	_cfcdf := int8(_beadc)
	return ST_Overlap{ST_OverlapByte: &_cfcdf}, nil
}

type CT_AreaSer struct {
	Idx            *CT_UnsignedInt
	Order          *CT_UnsignedInt
	Tx             *CT_SerTx
	SpPr           *_f.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	DPt            []*CT_DPt
	DLbls          *CT_DLbls
	Trendline      []*CT_Trendline
	ErrBars        []*CT_ErrBars
	Cat            *CT_AxDataSource
	Val            *CT_NumDataSource
	ExtLst         *CT_ExtensionList
}

func (_fgafe ST_LegendPos) String() string {
	switch _fgafe {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}
func (_gcec ST_LblAlgn) ValidateWithPath(path string) error {
	switch _gcec {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gcec))
	}
	return nil
}
func (_dcfca *CT_Thickness) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _dcfca.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_SurfaceChartShared and its children
func (_fbecg *EG_SurfaceChartShared) Validate() error {
	return _fbecg.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}

type EG_AreaChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

func (_cegb *CT_SurfaceChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bfad:
	for {
		_bcedec, _bbac := d.Token()
		if _bbac != nil {
			return _bbac
		}
		switch _gffce := _bcedec.(type) {
		case _b.StartElement:
			switch _gffce.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_cegb.Wireframe = NewCT_Boolean()
				if _ccfdb := d.DecodeElement(_cegb.Wireframe, &_gffce); _ccfdb != nil {
					return _ccfdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_acba := NewCT_SurfaceSer()
				if _fgeea := d.DecodeElement(_acba, &_gffce); _fgeea != nil {
					return _fgeea
				}
				_cegb.Ser = append(_cegb.Ser, _acba)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_cegb.BandFmts = NewCT_BandFmts()
				if _feab := d.DecodeElement(_cegb.BandFmts, &_gffce); _feab != nil {
					return _feab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_edcg := NewCT_UnsignedInt()
				if _bfadb := d.DecodeElement(_edcg, &_gffce); _bfadb != nil {
					return _bfadb
				}
				_cegb.AxId = append(_cegb.AxId, _edcg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cegb.ExtLst = NewCT_ExtensionList()
				if _cceaec := d.DecodeElement(_cegb.ExtLst, &_gffce); _cceaec != nil {
					return _cceaec
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _gffce.Name)
				if _eaeeb := d.Skip(); _eaeeb != nil {
					return _eaeeb
				}
			}
		case _b.EndElement:
			break _bfad
		case _b.CharData:
		}
	}
	return nil
}
func (_cacbd *CT_HPercent) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gbgfc := range start.Attr {
		if _gbgfc.Name.Local == "\u0076\u0061\u006c" {
			_ebfbg, _cafb := ParseUnionST_HPercent(_gbgfc.Value)
			if _cafb != nil {
				return _cafb
			}
			_cacbd.ValAttr = &_ebfbg
			continue
		}
	}
	for {
		_eaefd, _eaeg := d.Token()
		if _eaeg != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _eaeg)
		}
		if _bebb, _fgff := _eaefd.(_b.EndElement); _fgff && _bebb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gfab *CT_StrVal) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0069\u0064\u0078"}, Value: _aa.Sprintf("\u0025\u0076", _gfab.IdxAttr)})
	e.EncodeToken(start)
	_edcab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
	_dc.AddPreserveSpaceAttr(&_edcab, _gfab.V)
	e.EncodeElement(_gfab.V, _edcab)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gaadg *EG_SerShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gaadg.Idx = NewCT_UnsignedInt()
	_gaadg.Order = NewCT_UnsignedInt()
_ddfb:
	for {
		_aecfd, _cege := d.Token()
		if _cege != nil {
			return _cege
		}
		switch _afdgca := _aecfd.(type) {
		case _b.StartElement:
			switch _afdgca.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ecbgf := d.DecodeElement(_gaadg.Idx, &_afdgca); _ecbgf != nil {
					return _ecbgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ddgg := d.DecodeElement(_gaadg.Order, &_afdgca); _ddgg != nil {
					return _ddgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gaadg.Tx = NewCT_SerTx()
				if _faffc := d.DecodeElement(_gaadg.Tx, &_afdgca); _faffc != nil {
					return _faffc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gaadg.SpPr = _f.NewCT_ShapeProperties()
				if _dcfff := d.DecodeElement(_gaadg.SpPr, &_afdgca); _dcfff != nil {
					return _dcfff
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _afdgca.Name)
				if _bbbce := d.Skip(); _bbbce != nil {
					return _bbbce
				}
			}
		case _b.EndElement:
			break _ddfb
		case _b.CharData:
		}
	}
	return nil
}

type CT_Period struct{ ValAttr *uint32 }

// Validate validates the Chart and its children
func (_acddd *Chart) Validate() error { return _acddd.ValidateWithPath("\u0043\u0068\u0061r\u0074") }
func (_ddbgf *ST_BubbleScale) ValidateWithPath(path string) error {
	_dgggf := []string{}
	if _ddbgf.ST_BubbleScalePercent != nil {
		_dgggf = append(_dgggf, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ddbgf.ST_BubbleScaleUInt != nil {
		_dgggf = append(_dgggf, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_dgggf) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dgggf)
	}
	return nil
}
func NewGroup_DLbls() *Group_DLbls       { _ebdg := &Group_DLbls{}; return _ebdg }
func (_edffc ST_ErrDir) Validate() error { return _edffc.ValidateWithPath("") }
func (_eddg *ST_GapAmount) ValidateWithPath(path string) error {
	_bbfa := []string{}
	if _eddg.ST_GapAmountPercent != nil {
		_bbfa = append(_bbfa, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _eddg.ST_GapAmountUShort != nil {
		_bbfa = append(_bbfa, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_bbfa) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bbfa)
	}
	return nil
}
func (_gcfec ST_AxPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_gcfec.String(), start)
}
func (_cbaf *CT_Bar3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cbaf.BarDir = NewCT_BarDir()
_cfd:
	for {
		_fdb, _edg := d.Token()
		if _edg != nil {
			return _edg
		}
		switch _adaa := _fdb.(type) {
		case _b.StartElement:
			switch _adaa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _dga := d.DecodeElement(_cbaf.BarDir, &_adaa); _dga != nil {
					return _dga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cbaf.Grouping = NewCT_BarGrouping()
				if _egg := d.DecodeElement(_cbaf.Grouping, &_adaa); _egg != nil {
					return _egg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbaf.VaryColors = NewCT_Boolean()
				if _ebe := d.DecodeElement(_cbaf.VaryColors, &_adaa); _ebe != nil {
					return _ebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggdd := NewCT_BarSer()
				if _ffcg := d.DecodeElement(_ggdd, &_adaa); _ffcg != nil {
					return _ffcg
				}
				_cbaf.Ser = append(_cbaf.Ser, _ggdd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbaf.DLbls = NewCT_DLbls()
				if _gbb := d.DecodeElement(_cbaf.DLbls, &_adaa); _gbb != nil {
					return _gbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_cbaf.GapWidth = NewCT_GapAmount()
				if _feeg := d.DecodeElement(_cbaf.GapWidth, &_adaa); _feeg != nil {
					return _feeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_cbaf.GapDepth = NewCT_GapAmount()
				if _cda := d.DecodeElement(_cbaf.GapDepth, &_adaa); _cda != nil {
					return _cda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_cbaf.Shape = NewCT_Shape()
				if _ebd := d.DecodeElement(_cbaf.Shape, &_adaa); _ebd != nil {
					return _ebd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fafb := NewCT_UnsignedInt()
				if _add := d.DecodeElement(_fafb, &_adaa); _add != nil {
					return _add
				}
				_cbaf.AxId = append(_cbaf.AxId, _fafb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbaf.ExtLst = NewCT_ExtensionList()
				if _gagb := d.DecodeElement(_cbaf.ExtLst, &_adaa); _gagb != nil {
					return _gagb
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _adaa.Name)
				if _dbd := d.Skip(); _dbd != nil {
					return _dbd
				}
			}
		case _b.EndElement:
			break _cfd
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_bgd *CT_Area3DChart) ValidateWithPath(path string) error {
	if _bgd.Grouping != nil {
		if _ffg := _bgd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _ffg != nil {
			return _ffg
		}
	}
	if _bgd.VaryColors != nil {
		if _cf := _bgd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cf != nil {
			return _cf
		}
	}
	for _fda, _gg := range _bgd.Ser {
		if _bb := _gg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fda)); _bb != nil {
			return _bb
		}
	}
	if _bgd.DLbls != nil {
		if _bbc := _bgd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbc != nil {
			return _bbc
		}
	}
	if _bgd.DropLines != nil {
		if _fa := _bgd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _fa != nil {
			return _fa
		}
	}
	if _bgd.GapDepth != nil {
		if _gf := _bgd.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _gf != nil {
			return _gf
		}
	}
	for _bbf, _aeg := range _bgd.AxId {
		if _fad := _aeg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bbf)); _fad != nil {
			return _fad
		}
	}
	if _bgd.ExtLst != nil {
		if _af := _bgd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _af != nil {
			return _af
		}
	}
	return nil
}
func (_deed *CT_Style) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _deed.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BubbleSer and its children
func (_dec *CT_BubbleSer) Validate() error {
	return _dec.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}
func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_afbga, _bbbafa := _bd.ParseUint(s, 10, 16)
	if _bbbafa != nil {
		return ST_SecondPieSize{}, _bbbafa
	}
	_cggc := uint16(_afbga)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_cggc}, nil
}

// Validate validates the CT_DLbl and its children
func (_babf *CT_DLbl) Validate() error {
	return _babf.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}
func (_dabeca ST_Shape) String() string {
	switch _dabeca {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}
func NewCT_DispUnits() *CT_DispUnits { _cdee := &CT_DispUnits{}; return _cdee }
func NewCT_LegendEntry() *CT_LegendEntry {
	_ccfda := &CT_LegendEntry{}
	_ccfda.Idx = NewCT_UnsignedInt()
	return _ccfda
}

type CT_StrRef struct {
	F        string
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

func NewCT_TextLanguageID() *CT_TextLanguageID { _efeca := &CT_TextLanguageID{}; return _efeca }
func (_bdbcb *CT_DispUnits) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bdbcb.Choice != nil {
		_bdbcb.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _bdbcb.DispUnitsLbl != nil {
		_ddfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_bdbcb.DispUnitsLbl, _ddfd)
	}
	if _bdbcb.ExtLst != nil {
		_dcfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bdbcb.ExtLst, _dcfc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gadg *CT_Overlap) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gadg.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_gadg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_ScatterStyle() *CT_ScatterStyle { _ddeef := &CT_ScatterStyle{}; return _ddeef }

type CT_RotX struct{ ValAttr *int8 }

func NewCT_Line3DChart() *CT_Line3DChart {
	_fbgcb := &CT_Line3DChart{}
	_fbgcb.Grouping = NewCT_Grouping()
	return _fbgcb
}
func (_fdcfg ST_Crosses) ValidateWithPath(path string) error {
	switch _fdcfg {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fdcfg))
	}
	return nil
}

var ST_HoleSizePercentPatternRe = _a.MustCompile(ST_HoleSizePercentPattern)
var ST_DepthPercentWithSymbolPatternRe = _a.MustCompile(ST_DepthPercentWithSymbolPattern)

type CT_ErrValType struct{ ValAttr ST_ErrValType }

func (_dgcab *ST_OfPieType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aefcf, _fgdcb := d.Token()
	if _fgdcb != nil {
		return _fgdcb
	}
	if _fggebb, _afecg := _aefcf.(_b.EndElement); _afecg && _fggebb.Name == start.Name {
		*_dgcab = 1
		return nil
	}
	if _ccacg, _fageag := _aefcf.(_b.CharData); !_fageag {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aefcf)
	} else {
		switch string(_ccacg) {
		case "":
			*_dgcab = 0
		case "\u0070\u0069\u0065":
			*_dgcab = 1
		case "\u0062\u0061\u0072":
			*_dgcab = 2
		}
	}
	_aefcf, _fgdcb = d.Token()
	if _fgdcb != nil {
		return _fgdcb
	}
	if _fcec, _bcebg := _aefcf.(_b.EndElement); _bcebg && _fcec.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aefcf)
}

type CT_TrendlineLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	NumFmt *CT_NumFmt
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
	ExtLst *CT_ExtensionList
}

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

func (_fdfdb *ST_PictureFormat) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fdfdb = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_fdfdb = 1
	case "\u0073\u0074\u0061c\u006b":
		*_fdfdb = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_fdfdb = 3
	}
	return nil
}

type CT_RadarChart struct {
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean
	Ser        []*CT_RadarSer
	DLbls      *CT_DLbls
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_bcaaa *UserShapes) ValidateWithPath(path string) error {
	if _ffcc := _bcaaa.CT_Drawing.ValidateWithPath(path); _ffcc != nil {
		return _ffcc
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_gegd *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _gegd.CustUnit != nil {
		if _bgdgd := _gegd.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _bgdgd != nil {
			return _bgdgd
		}
	}
	if _gegd.BuiltInUnit != nil {
		if _fcad := _gegd.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _fcad != nil {
			return _fcad
		}
	}
	return nil
}
func NewCT_Legend() *CT_Legend { _edaf := &CT_Legend{}; return _edaf }
func (_dgbcd *CT_RotX) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cfgcf := range start.Attr {
		if _cfgcf.Name.Local == "\u0076\u0061\u006c" {
			_ffeba, _egfb := _bd.ParseInt(_cfgcf.Value, 10, 8)
			if _egfb != nil {
				return _egfb
			}
			_bcgf := int8(_ffeba)
			_dgbcd.ValAttr = &_bcgf
			continue
		}
	}
	for {
		_bfac, _gafe := d.Token()
		if _gafe != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _gafe)
		}
		if _gcaag, _beeef := _bfac.(_b.EndElement); _beeef && _gcaag.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ecagf *CT_SplitType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _egbge := range start.Attr {
		if _egbge.Name.Local == "\u0076\u0061\u006c" {
			_ecagf.ValAttr.UnmarshalXMLAttr(_egbge)
			continue
		}
	}
	for {
		_fefdc, _fdfd := d.Token()
		if _fdfd != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _fdfd)
		}
		if _ffadb, _gcagf := _fefdc.(_b.EndElement); _gcagf && _ffadb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_View3D and its children
func (_cfgca *CT_View3D) Validate() error {
	return _cfgca.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}

// Validate validates the CT_PivotSource and its children
func (_fdff *CT_PivotSource) Validate() error {
	return _fdff.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}
func (_eaggd *ST_LblAlgn) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_eaggd = 0
	case "\u0063\u0074\u0072":
		*_eaggd = 1
	case "\u006c":
		*_eaggd = 2
	case "\u0072":
		*_eaggd = 3
	}
	return nil
}
func (_fdcedg ST_LayoutMode) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fdcedg.String(), start)
}
func (_fgcf *CT_DLblChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fgcf.Delete != nil {
		_bdgde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_fgcf.Delete, _bdgde)
	}
	if _fgcf.Layout != nil {
		_feaca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fgcf.Layout, _feaca)
	}
	if _fgcf.Tx != nil {
		_gaaef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fgcf.Tx, _gaaef)
	}
	if _fgcf.NumFmt != nil {
		_aeed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fgcf.NumFmt, _aeed)
	}
	if _fgcf.SpPr != nil {
		_baba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fgcf.SpPr, _baba)
	}
	if _fgcf.TxPr != nil {
		_bbcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fgcf.TxPr, _bbcb)
	}
	if _fgcf.DLblPos != nil {
		_bgabd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_fgcf.DLblPos, _bgabd)
	}
	if _fgcf.ShowLegendKey != nil {
		_bec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_fgcf.ShowLegendKey, _bec)
	}
	if _fgcf.ShowVal != nil {
		_cfbg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_fgcf.ShowVal, _cfbg)
	}
	if _fgcf.ShowCatName != nil {
		_geaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fgcf.ShowCatName, _geaa)
	}
	if _fgcf.ShowSerName != nil {
		_dca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fgcf.ShowSerName, _dca)
	}
	if _fgcf.ShowPercent != nil {
		_fdgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_fgcf.ShowPercent, _fdgg)
	}
	if _fgcf.ShowBubbleSize != nil {
		_afff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_fgcf.ShowBubbleSize, _afff)
	}
	if _fgcf.Separator != nil {
		_bcaa := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_dc.AddPreserveSpaceAttr(&_bcaa, *_fgcf.Separator)
		e.EncodeElement(_fgcf.Separator, _bcaa)
	}
	return nil
}
func NewCT_LegendPos() *CT_LegendPos { _dgcbcc := &CT_LegendPos{}; return _dgcbcc }

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_aaa *CT_AxDataSource) ValidateWithPath(path string) error {
	if _dgb := _aaa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dgb != nil {
		return _dgb
	}
	return nil
}

type CT_RadarSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_f.CT_ShapeProperties
	Marker *CT_Marker
	DPt    []*CT_DPt
	DLbls  *CT_DLbls
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_bedfc ST_AxPos) String() string {
	switch _bedfc {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}

type CT_BuiltInUnit struct{ ValAttr ST_BuiltInUnit }

func NewCT_ManualLayout() *CT_ManualLayout { _gecdb := &CT_ManualLayout{}; return _gecdb }
func (_fgffc *CT_Order) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aabcd := range start.Attr {
		if _aabcd.Name.Local == "\u0076\u0061\u006c" {
			_cdeg, _gaff := _bd.ParseUint(_aabcd.Value, 10, 8)
			if _gaff != nil {
				return _gaff
			}
			_abfbc := uint8(_cdeg)
			_fgffc.ValAttr = &_abfbc
			continue
		}
	}
	for {
		_ffeb, _gcbea := d.Token()
		if _gcbea != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _gcbea)
		}
		if _dedbd, _abedd := _ffeb.(_b.EndElement); _abedd && _dedbd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_DepthPercent and its children
func (_bage *CT_DepthPercent) Validate() error {
	return _bage.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_aedb *CT_LegendEntry) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aedb.Idx = NewCT_UnsignedInt()
_fabf:
	for {
		_gcca, _dfgb := d.Token()
		if _dfgb != nil {
			return _dfgb
		}
		switch _bbaf := _gcca.(type) {
		case _b.StartElement:
			switch _bbaf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dece := d.DecodeElement(_aedb.Idx, &_bbaf); _dece != nil {
					return _dece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _aedb.Choice == nil {
					_aedb.Choice = NewCT_LegendEntryChoice()
				}
				if _fbffb := d.DecodeElement(&_aedb.Choice.Delete, &_bbaf); _fbffb != nil {
					return _fbffb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _aedb.Choice == nil {
					_aedb.Choice = NewCT_LegendEntryChoice()
				}
				if _dgfe := d.DecodeElement(&_aedb.Choice.TxPr, &_bbaf); _dgfe != nil {
					return _dgfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aedb.ExtLst = NewCT_ExtensionList()
				if _fdbf := d.DecodeElement(_aedb.ExtLst, &_bbaf); _fdbf != nil {
					return _fdbf
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _bbaf.Name)
				if _dbbe := d.Skip(); _dbbe != nil {
					return _dbbe
				}
			}
		case _b.EndElement:
			break _fabf
		case _b.CharData:
		}
	}
	return nil
}
func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_fgdgc := &EG_SurfaceChartShared{}
	return _fgdgc
}
func (_dbgad *CT_UpDownBar) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dggeg:
	for {
		_edafc, _fdfda := d.Token()
		if _fdfda != nil {
			return _fdfda
		}
		switch _eeffg := _edafc.(type) {
		case _b.StartElement:
			switch _eeffg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dbgad.SpPr = _f.NewCT_ShapeProperties()
				if _dbdfc := d.DecodeElement(_dbgad.SpPr, &_eeffg); _dbdfc != nil {
					return _dbdfc
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _eeffg.Name)
				if _cgcafg := d.Skip(); _cgcafg != nil {
					return _cgcafg
				}
			}
		case _b.EndElement:
			break _dggeg
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_BuiltInUnit() *CT_BuiltInUnit { _abgc := &CT_BuiltInUnit{}; return _abgc }
func (_gcabf *EG_BarChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_gaecd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_gcabf.BarDir, _gaecd)
	if _gcabf.Grouping != nil {
		_dagdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_gcabf.Grouping, _dagdf)
	}
	if _gcabf.VaryColors != nil {
		_fgfda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gcabf.VaryColors, _fgfda)
	}
	if _gcabf.Ser != nil {
		_bbdga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cadcd := range _gcabf.Ser {
			e.EncodeElement(_cadcd, _bbdga)
		}
	}
	if _gcabf.DLbls != nil {
		_gcbfa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gcabf.DLbls, _gcbfa)
	}
	return nil
}
func (_befca ST_PictureFormat) Validate() error { return _befca.ValidateWithPath("") }

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_bfbd *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_eba *CT_LblOffset) ValidateWithPath(path string) error {
	if _eba.ValAttr != nil {
		if _aafbc := _eba.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aafbc != nil {
			return _aafbc
		}
	}
	return nil
}

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

// Validate validates the CT_Title and its children
func (_fgfab *CT_Title) Validate() error {
	return _fgfab.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_dbee *CT_PieChart) ValidateWithPath(path string) error {
	if _dbee.VaryColors != nil {
		if _gbcbc := _dbee.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gbcbc != nil {
			return _gbcbc
		}
	}
	for _bcbd, _eabd := range _dbee.Ser {
		if _gece := _eabd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bcbd)); _gece != nil {
			return _gece
		}
	}
	if _dbee.DLbls != nil {
		if _eceda := _dbee.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _eceda != nil {
			return _eceda
		}
	}
	if _dbee.FirstSliceAng != nil {
		if _fgfc := _dbee.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _fgfc != nil {
			return _fgfc
		}
	}
	if _dbee.ExtLst != nil {
		if _bdfb := _dbee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bdfb != nil {
			return _bdfb
		}
	}
	return nil
}
func (_egeae *CT_SerAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_egbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_egeae.AxId, _egbf)
	_aegcd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_egeae.Scaling, _aegcd)
	if _egeae.Delete != nil {
		_gdbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_egeae.Delete, _gdbe)
	}
	_cedc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_egeae.AxPos, _cedc)
	if _egeae.MajorGridlines != nil {
		_egcdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_egeae.MajorGridlines, _egcdb)
	}
	if _egeae.MinorGridlines != nil {
		_adae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_egeae.MinorGridlines, _adae)
	}
	if _egeae.Title != nil {
		_aacad := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_egeae.Title, _aacad)
	}
	if _egeae.NumFmt != nil {
		_ddec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_egeae.NumFmt, _ddec)
	}
	if _egeae.MajorTickMark != nil {
		_cbaed := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_egeae.MajorTickMark, _cbaed)
	}
	if _egeae.MinorTickMark != nil {
		_defc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_egeae.MinorTickMark, _defc)
	}
	if _egeae.TickLblPos != nil {
		_degge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_egeae.TickLblPos, _degge)
	}
	if _egeae.SpPr != nil {
		_deddd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_egeae.SpPr, _deddd)
	}
	if _egeae.TxPr != nil {
		_efegbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_egeae.TxPr, _efegbc)
	}
	_ecfeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_egeae.CrossAx, _ecfeb)
	if _egeae.Choice != nil {
		_egeae.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _egeae.TickLblSkip != nil {
		_ecff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_egeae.TickLblSkip, _ecff)
	}
	if _egeae.TickMarkSkip != nil {
		_aabbeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_egeae.TickMarkSkip, _aabbeb)
	}
	if _egeae.ExtLst != nil {
		_ffgge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_egeae.ExtLst, _ffgge)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_eaafd *CT_RadarStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eaafd.ValAttr != ST_RadarStyleUnset {
		_cagg, _cbddf := _eaafd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _cbddf != nil {
			return _cbddf
		}
		start.Attr = append(start.Attr, _cagg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Chart and its children
func (_agdd *CT_Chart) Validate() error {
	return _agdd.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}

type ChartSpace struct{ CT_ChartSpace }

func (_eeeaa *CT_Perspective) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _abcag := range start.Attr {
		if _abcag.Name.Local == "\u0076\u0061\u006c" {
			_ebceb, _bbegc := _bd.ParseUint(_abcag.Value, 10, 8)
			if _bbegc != nil {
				return _bbegc
			}
			_cgfbg := uint8(_ebceb)
			_eeeaa.ValAttr = &_cgfbg
			continue
		}
	}
	for {
		_eebfa, _bdbg := d.Token()
		if _bdbg != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _bdbg)
		}
		if _cdfef, _edfg := _eebfa.(_b.EndElement); _edfg && _cdfef.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Perspective and its children
func (_bcefe *CT_Perspective) Validate() error {
	return _bcefe.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

func (_aabfc *CT_PictureOptions) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aabfc.ApplyToFront != nil {
		_dbbeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_aabfc.ApplyToFront, _dbbeg)
	}
	if _aabfc.ApplyToSides != nil {
		_dgaee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_aabfc.ApplyToSides, _dgaee)
	}
	if _aabfc.ApplyToEnd != nil {
		_ccdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_aabfc.ApplyToEnd, _ccdc)
	}
	if _aabfc.PictureFormat != nil {
		_eeca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_aabfc.PictureFormat, _eeca)
	}
	if _aabfc.PictureStackUnit != nil {
		_ggggc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aabfc.PictureStackUnit, _ggggc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_DPt struct {
	Idx              *CT_UnsignedInt
	InvertIfNegative *CT_Boolean
	Marker           *CT_Marker
	Bubble3D         *CT_Boolean
	Explosion        *CT_UnsignedInt
	SpPr             *_f.CT_ShapeProperties
	PictureOptions   *CT_PictureOptions
	ExtLst           *CT_ExtensionList
}

func NewCT_ChartSpace() *CT_ChartSpace {
	_ebeg := &CT_ChartSpace{}
	_ebeg.Chart = NewCT_Chart()
	return _ebeg
}
func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _dfabc := &CT_PlotAreaChoice{}; return _dfabc }
func (_acbd *CT_PageSetup) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _acbd.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.PaperSizeAttr)})
	}
	if _acbd.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.PaperHeightAttr)})
	}
	if _acbd.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.PaperWidthAttr)})
	}
	if _acbd.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.FirstPageNumberAttr)})
	}
	if _acbd.OrientationAttr != ST_PageSetupOrientationUnset {
		_dcad, _acac := _acbd.OrientationAttr.MarshalXMLAttr(_b.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _acac != nil {
			return _acac
		}
		start.Attr = append(start.Attr, _dcad)
	}
	if _acbd.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acbd.BlackAndWhiteAttr))})
	}
	if _acbd.DraftAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acbd.DraftAttr))})
	}
	if _acbd.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acbd.UseFirstPageNumberAttr))})
	}
	if _acbd.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.HorizontalDpiAttr)})
	}
	if _acbd.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.VerticalDpiAttr)})
	}
	if _acbd.CopiesAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _aa.Sprintf("\u0025\u0076", *_acbd.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebfe *CT_RotY) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ebfe.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_ebfe.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ffee *CT_ExternalData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gaaf := range start.Attr {
		if _gaaf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _gaaf.Name.Local == "\u0069\u0064" || _gaaf.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _gaaf.Name.Local == "\u0069\u0064" {
			_ddcf, _afdbc := _gaaf.Value, error(nil)
			if _afdbc != nil {
				return _afdbc
			}
			_ffee.IdAttr = _ddcf
			continue
		}
	}
_fcae:
	for {
		_ebfb, _cagca := d.Token()
		if _cagca != nil {
			return _cagca
		}
		switch _eeef := _ebfb.(type) {
		case _b.StartElement:
			switch _eeef.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_ffee.AutoUpdate = NewCT_Boolean()
				if _degbd := d.DecodeElement(_ffee.AutoUpdate, &_eeef); _degbd != nil {
					return _degbd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _eeef.Name)
				if _agba := d.Skip(); _agba != nil {
					return _agba
				}
			}
		case _b.EndElement:
			break _fcae
		case _b.CharData:
		}
	}
	return nil
}
func (_eagfg ST_TickLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_eagfg.String(), start)
}

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_bebbg *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _adcg := _bebbg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adcg != nil {
		return _adcg
	}
	return nil
}
func (_feegc *CT_HeaderFooter) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fddcf := range start.Attr {
		if _fddcf.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_edce, _cbed := _bd.ParseBool(_fddcf.Value)
			if _cbed != nil {
				return _cbed
			}
			_feegc.AlignWithMarginsAttr = &_edce
			continue
		}
		if _fddcf.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_afbdc, _cgbad := _bd.ParseBool(_fddcf.Value)
			if _cgbad != nil {
				return _cgbad
			}
			_feegc.DifferentOddEvenAttr = &_afbdc
			continue
		}
		if _fddcf.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_gagf, _cgdac := _bd.ParseBool(_fddcf.Value)
			if _cgdac != nil {
				return _cgdac
			}
			_feegc.DifferentFirstAttr = &_gagf
			continue
		}
	}
_eeaa:
	for {
		_bbed, _fadgc := d.Token()
		if _fadgc != nil {
			return _fadgc
		}
		switch _gfgef := _bbed.(type) {
		case _b.StartElement:
			switch _gfgef.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_feegc.OddHeader = new(string)
				if _aabc := d.DecodeElement(_feegc.OddHeader, &_gfgef); _aabc != nil {
					return _aabc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_feegc.OddFooter = new(string)
				if _dedg := d.DecodeElement(_feegc.OddFooter, &_gfgef); _dedg != nil {
					return _dedg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_feegc.EvenHeader = new(string)
				if _ggddc := d.DecodeElement(_feegc.EvenHeader, &_gfgef); _ggddc != nil {
					return _ggddc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_feegc.EvenFooter = new(string)
				if _ecaf := d.DecodeElement(_feegc.EvenFooter, &_gfgef); _ecaf != nil {
					return _ecaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_feegc.FirstHeader = new(string)
				if _dbebe := d.DecodeElement(_feegc.FirstHeader, &_gfgef); _dbebe != nil {
					return _dbebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_feegc.FirstFooter = new(string)
				if _fbagg := d.DecodeElement(_feegc.FirstFooter, &_gfgef); _fbagg != nil {
					return _fbagg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _gfgef.Name)
				if _beeg := d.Skip(); _beeg != nil {
					return _beeg
				}
			}
		case _b.EndElement:
			break _eeaa
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_ffgbg *CT_PageSetup) ValidateWithPath(path string) error {
	if _ffgbg.PaperHeightAttr != nil {
		if !_g.ST_PositiveUniversalMeasurePatternRe.MatchString(*_ffgbg.PaperHeightAttr) {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _g.ST_PositiveUniversalMeasurePatternRe, *_ffgbg.PaperHeightAttr)
		}
	}
	if _ffgbg.PaperHeightAttr != nil {
		if !_g.ST_UniversalMeasurePatternRe.MatchString(*_ffgbg.PaperHeightAttr) {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _g.ST_UniversalMeasurePatternRe, *_ffgbg.PaperHeightAttr)
		}
	}
	if _ffgbg.PaperWidthAttr != nil {
		if !_g.ST_PositiveUniversalMeasurePatternRe.MatchString(*_ffgbg.PaperWidthAttr) {
			return _aa.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _g.ST_PositiveUniversalMeasurePatternRe, *_ffgbg.PaperWidthAttr)
		}
	}
	if _ffgbg.PaperWidthAttr != nil {
		if !_g.ST_UniversalMeasurePatternRe.MatchString(*_ffgbg.PaperWidthAttr) {
			return _aa.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _g.ST_UniversalMeasurePatternRe, *_ffgbg.PaperWidthAttr)
		}
	}
	if _fabb := _ffgbg.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _fabb != nil {
		return _fabb
	}
	return nil
}
func NewCT_TrendlineType() *CT_TrendlineType { _ecbe := &CT_TrendlineType{}; return _ecbe }

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

func (_acaac *ST_TickLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dgff, _ceae := d.Token()
	if _ceae != nil {
		return _ceae
	}
	if _afdad, _dcgd := _dgff.(_b.EndElement); _dcgd && _afdad.Name == start.Name {
		*_acaac = 1
		return nil
	}
	if _acbbgb, _daaaf := _dgff.(_b.CharData); !_daaaf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgff)
	} else {
		switch string(_acbbgb) {
		case "":
			*_acaac = 0
		case "\u0068\u0069\u0067\u0068":
			*_acaac = 1
		case "\u006c\u006f\u0077":
			*_acaac = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_acaac = 3
		case "\u006e\u006f\u006e\u0065":
			*_acaac = 4
		}
	}
	_dgff, _ceae = d.Token()
	if _ceae != nil {
		return _ceae
	}
	if _fegbeg, _aabbf := _dgff.(_b.EndElement); _aabbf && _fegbeg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgff)
}
func (_dcc *CT_DLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcc.Idx = NewCT_UnsignedInt()
_bfdg:
	for {
		_cfc, _dbdb := d.Token()
		if _dbdb != nil {
			return _dbdb
		}
		switch _egga := _cfc.(type) {
		case _b.StartElement:
			switch _egga.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ddde := d.DecodeElement(_dcc.Idx, &_egga); _ddde != nil {
					return _ddde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _aae := d.DecodeElement(&_dcc.Choice.Delete, &_egga); _aae != nil {
					return _aae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _ggag := d.DecodeElement(&_dcc.Choice.Layout, &_egga); _ggag != nil {
					return _ggag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _cdag := d.DecodeElement(&_dcc.Choice.Tx, &_egga); _cdag != nil {
					return _cdag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _begg := d.DecodeElement(&_dcc.Choice.NumFmt, &_egga); _begg != nil {
					return _begg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _cacb := d.DecodeElement(&_dcc.Choice.SpPr, &_egga); _cacb != nil {
					return _cacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _faff := d.DecodeElement(&_dcc.Choice.TxPr, &_egga); _faff != nil {
					return _faff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _dcdf := d.DecodeElement(&_dcc.Choice.DLblPos, &_egga); _dcdf != nil {
					return _dcdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _adca := d.DecodeElement(&_dcc.Choice.ShowLegendKey, &_egga); _adca != nil {
					return _adca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _aece := d.DecodeElement(&_dcc.Choice.ShowVal, &_egga); _aece != nil {
					return _aece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _dbdce := d.DecodeElement(&_dcc.Choice.ShowCatName, &_egga); _dbdce != nil {
					return _dbdce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _cbae := d.DecodeElement(&_dcc.Choice.ShowSerName, &_egga); _cbae != nil {
					return _cbae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _dddc := d.DecodeElement(&_dcc.Choice.ShowPercent, &_egga); _dddc != nil {
					return _dddc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _cfga := d.DecodeElement(&_dcc.Choice.ShowBubbleSize, &_egga); _cfga != nil {
					return _cfga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _dcc.Choice == nil {
					_dcc.Choice = NewCT_DLblChoice()
				}
				if _cedg := d.DecodeElement(&_dcc.Choice.Separator, &_egga); _cedg != nil {
					return _cedg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcc.ExtLst = NewCT_ExtensionList()
				if _acff := d.DecodeElement(_dcc.ExtLst, &_egga); _acff != nil {
					return _acff
				}
			default:
				_dc.Log("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _egga.Name)
				if _cbac := d.Skip(); _cbac != nil {
					return _cbac
				}
			}
		case _b.EndElement:
			break _bfdg
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_acca *CT_Line3DChart) ValidateWithPath(path string) error {
	if _gbfaf := _acca.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gbfaf != nil {
		return _gbfaf
	}
	if _acca.VaryColors != nil {
		if _cbab := _acca.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cbab != nil {
			return _cbab
		}
	}
	for _gdgba, _cfcae := range _acca.Ser {
		if _bfcd := _cfcae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gdgba)); _bfcd != nil {
			return _bfcd
		}
	}
	if _acca.DLbls != nil {
		if _abda := _acca.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _abda != nil {
			return _abda
		}
	}
	if _acca.DropLines != nil {
		if _ggafe := _acca.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ggafe != nil {
			return _ggafe
		}
	}
	if _acca.GapDepth != nil {
		if _fbbd := _acca.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _fbbd != nil {
			return _fbbd
		}
	}
	for _abggc, _dfgge := range _acca.AxId {
		if _ebfd := _dfgge.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _abggc)); _ebfd != nil {
			return _ebfd
		}
	}
	if _acca.ExtLst != nil {
		if _dbed := _acca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbed != nil {
			return _dbed
		}
	}
	return nil
}
func (_dbgce *CT_Shape) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dbgce.ValAttr != ST_ShapeUnset {
		_aabdg, _geegd := _dbgce.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _geegd != nil {
			return _geegd
		}
		start.Attr = append(start.Attr, _aabdg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gddgd *CT_GapAmount) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _adgg := range start.Attr {
		if _adgg.Name.Local == "\u0076\u0061\u006c" {
			_fefc, _cagd := ParseUnionST_GapAmount(_adgg.Value)
			if _cagd != nil {
				return _cagd
			}
			_gddgd.ValAttr = &_fefc
			continue
		}
	}
	for {
		_cffa, _bebfa := d.Token()
		if _bebfa != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _bebfa)
		}
		if _efec, _cabg := _cffa.(_b.EndElement); _cabg && _efec.Name == start.Name {
			break
		}
	}
	return nil
}

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

func (_cddbe *CT_NumData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cddbe.FormatCode != nil {
		_edece := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_dc.AddPreserveSpaceAttr(&_edece, *_cddbe.FormatCode)
		e.EncodeElement(_cddbe.FormatCode, _edece)
	}
	if _cddbe.PtCount != nil {
		_gbde := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_cddbe.PtCount, _gbde)
	}
	if _cddbe.Pt != nil {
		_aaccb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _ccgc := range _cddbe.Pt {
			e.EncodeElement(_ccgc, _aaccb)
		}
	}
	if _cddbe.ExtLst != nil {
		_gcdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cddbe.ExtLst, _gcdf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aabbe *CT_Orientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bege := range start.Attr {
		if _bege.Name.Local == "\u0076\u0061\u006c" {
			_aabbe.ValAttr.UnmarshalXMLAttr(_bege)
			continue
		}
	}
	for {
		_fddcfe, _adff := d.Token()
		if _adff != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _adff)
		}
		if _dfec, _addea := _fddcfe.(_b.EndElement); _addea && _dfec.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_fbffg *CT_Boolean) ValidateWithPath(path string) error { return nil }
func NewCT_CustSplit() *CT_CustSplit                          { _dgbe := &CT_CustSplit{}; return _dgbe }
func (_bdcde ST_LayoutMode) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_daefg := _b.Attr{}
	_daefg.Name = name
	switch _bdcde {
	case ST_LayoutModeUnset:
		_daefg.Value = ""
	case ST_LayoutModeEdge:
		_daefg.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_daefg.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _daefg, nil
}
func (_gaaa *CT_Trendline) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gaaa.TrendlineType = NewCT_TrendlineType()
_bfffg:
	for {
		_cdegf, _aabcf := d.Token()
		if _aabcf != nil {
			return _aabcf
		}
		switch _bageb := _cdegf.(type) {
		case _b.StartElement:
			switch _bageb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_gaaa.Name = new(string)
				if _eeada := d.DecodeElement(_gaaa.Name, &_bageb); _eeada != nil {
					return _eeada
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gaaa.SpPr = _f.NewCT_ShapeProperties()
				if _edgeg := d.DecodeElement(_gaaa.SpPr, &_bageb); _edgeg != nil {
					return _edgeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _dffcg := d.DecodeElement(_gaaa.TrendlineType, &_bageb); _dffcg != nil {
					return _dffcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_gaaa.Order = NewCT_Order()
				if _bfdgb := d.DecodeElement(_gaaa.Order, &_bageb); _bfdgb != nil {
					return _bfdgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_gaaa.Period = NewCT_Period()
				if _fbece := d.DecodeElement(_gaaa.Period, &_bageb); _fbece != nil {
					return _fbece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_gaaa.Forward = NewCT_Double()
				if _dccde := d.DecodeElement(_gaaa.Forward, &_bageb); _dccde != nil {
					return _dccde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_gaaa.Backward = NewCT_Double()
				if _feccg := d.DecodeElement(_gaaa.Backward, &_bageb); _feccg != nil {
					return _feccg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_gaaa.Intercept = NewCT_Double()
				if _fbace := d.DecodeElement(_gaaa.Intercept, &_bageb); _fbace != nil {
					return _fbace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_gaaa.DispRSqr = NewCT_Boolean()
				if _fffcb := d.DecodeElement(_gaaa.DispRSqr, &_bageb); _fffcb != nil {
					return _fffcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_gaaa.DispEq = NewCT_Boolean()
				if _babb := d.DecodeElement(_gaaa.DispEq, &_bageb); _babb != nil {
					return _babb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_gaaa.TrendlineLbl = NewCT_TrendlineLbl()
				if _fggbd := d.DecodeElement(_gaaa.TrendlineLbl, &_bageb); _fggbd != nil {
					return _fggbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaaa.ExtLst = NewCT_ExtensionList()
				if _ddfcba := d.DecodeElement(_gaaa.ExtLst, &_bageb); _ddfcba != nil {
					return _ddfcba
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _bageb.Name)
				if _aagg := d.Skip(); _aagg != nil {
					return _aagg
				}
			}
		case _b.EndElement:
			break _bfffg
		case _b.CharData:
		}
	}
	return nil
}
func (_gggde ST_ErrValType) Validate() error { return _gggde.ValidateWithPath("") }

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

func (_cgd *CT_BarDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _geae := range start.Attr {
		if _geae.Name.Local == "\u0076\u0061\u006c" {
			_cgd.ValAttr.UnmarshalXMLAttr(_geae)
			continue
		}
	}
	for {
		_efea, _fgc := d.Token()
		if _fgc != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _fgc)
		}
		if _bacc, _edf := _efea.(_b.EndElement); _edf && _bacc.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_CrossBetween and its children
func (_bbbb *CT_CrossBetween) Validate() error {
	return _bbbb.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}
func NewCT_LegendEntryChoice() *CT_LegendEntryChoice {
	_fgfbc := &CT_LegendEntryChoice{}
	return _fgfbc
}
func (_fcfa *CT_Tx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fcfa.Choice = NewCT_TxChoice()
_dabge:
	for {
		_adbdd, _cacf := d.Token()
		if _cacf != nil {
			return _cacf
		}
		switch _dadbg := _adbdd.(type) {
		case _b.StartElement:
			switch _dadbg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_fcfa.Choice = NewCT_TxChoice()
				if _fbgcg := d.DecodeElement(&_fcfa.Choice.StrRef, &_dadbg); _fbgcg != nil {
					return _fbgcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_fcfa.Choice = NewCT_TxChoice()
				if _babfad := d.DecodeElement(&_fcfa.Choice.Rich, &_dadbg); _babfad != nil {
					return _babfad
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _dadbg.Name)
				if _ebbd := d.Skip(); _ebbd != nil {
					return _ebbd
				}
			}
		case _b.EndElement:
			break _dabge
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_Area3DChart() *CT_Area3DChart { _db := &CT_Area3DChart{}; return _db }

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_cbd *CT_AxPos) ValidateWithPath(path string) error {
	if _cbd.ValAttr == ST_AxPosUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cebf := _cbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cebf != nil {
		return _cebf
	}
	return nil
}
func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 { _afaaf := &CT_PlotAreaChoice1{}; return _afaaf }
func NewCT_BubbleChart() *CT_BubbleChart         { _fafg := &CT_BubbleChart{}; return _fafg }
func (_acbdfd *CT_Shape) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cfba := range start.Attr {
		if _cfba.Name.Local == "\u0076\u0061\u006c" {
			_acbdfd.ValAttr.UnmarshalXMLAttr(_cfba)
			continue
		}
	}
	for {
		_egfdc, _gafef := d.Token()
		if _gafef != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _gafef)
		}
		if _eccb, _gbff := _egfdc.(_b.EndElement); _gbff && _eccb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gfc *CT_BarGrouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gfc.ValAttr != ST_BarGroupingUnset {
		_gacg, _gfca := _gfc.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gfca != nil {
			return _gfca
		}
		start.Attr = append(start.Attr, _gacg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Perspective() *CT_Perspective         { _fdef := &CT_Perspective{}; return _fdef }
func NewCT_Orientation() *CT_Orientation         { _eeebb := &CT_Orientation{}; return _eeebb }
func (_fcggb ST_SizeRepresents) Validate() error { return _fcggb.ValidateWithPath("") }

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

func (_bcf *CT_CatAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bcag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_bcf.AxId, _bcag)
	_baff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_bcf.Scaling, _baff)
	if _bcf.Delete != nil {
		_adf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bcf.Delete, _adf)
	}
	_gbfd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_bcf.AxPos, _gbfd)
	if _bcf.MajorGridlines != nil {
		_bdbec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcf.MajorGridlines, _bdbec)
	}
	if _bcf.MinorGridlines != nil {
		_ggcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcf.MinorGridlines, _ggcf)
	}
	if _bcf.Title != nil {
		_ccddb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_bcf.Title, _ccddb)
	}
	if _bcf.NumFmt != nil {
		_bace := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bcf.NumFmt, _bace)
	}
	if _bcf.MajorTickMark != nil {
		_fgecf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bcf.MajorTickMark, _fgecf)
	}
	if _bcf.MinorTickMark != nil {
		_gefef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bcf.MinorTickMark, _gefef)
	}
	if _bcf.TickLblPos != nil {
		_dbcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_bcf.TickLblPos, _dbcb)
	}
	if _bcf.SpPr != nil {
		_ecag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bcf.SpPr, _ecag)
	}
	if _bcf.TxPr != nil {
		_fadc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bcf.TxPr, _fadc)
	}
	_gacgc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_bcf.CrossAx, _gacgc)
	if _bcf.Choice != nil {
		_bcf.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _bcf.Auto != nil {
		_ebeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_bcf.Auto, _ebeb)
	}
	if _bcf.LblAlgn != nil {
		_gfdbg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_bcf.LblAlgn, _gfdbg)
	}
	if _bcf.LblOffset != nil {
		_geea := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_bcf.LblOffset, _geea)
	}
	if _bcf.TickLblSkip != nil {
		_bfeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_bcf.TickLblSkip, _bfeg)
	}
	if _bcf.TickMarkSkip != nil {
		_ebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_bcf.TickMarkSkip, _ebg)
	}
	if _bcf.NoMultiLvlLbl != nil {
		_bebf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_bcf.NoMultiLvlLbl, _bebf)
	}
	if _bcf.ExtLst != nil {
		_gfgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcf.ExtLst, _gfgg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bffcb *ST_MarkerStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bffcb = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_bffcb = 1
	case "\u0064\u0061\u0073\u0068":
		*_bffcb = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_bffcb = 3
	case "\u0064\u006f\u0074":
		*_bffcb = 4
	case "\u006e\u006f\u006e\u0065":
		*_bffcb = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_bffcb = 6
	case "\u0070\u006c\u0075\u0073":
		*_bffcb = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_bffcb = 8
	case "\u0073\u0074\u0061\u0072":
		*_bffcb = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_bffcb = 10
	case "\u0078":
		*_bffcb = 11
	case "\u0061\u0075\u0074\u006f":
		*_bffcb = 12
	}
	return nil
}
func (_cga *CT_Bar3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_efd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_cga.BarDir, _efd)
	if _cga.Grouping != nil {
		_deg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cga.Grouping, _deg)
	}
	if _cga.VaryColors != nil {
		_fec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cga.VaryColors, _fec)
	}
	if _cga.Ser != nil {
		_cfea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cfgg := range _cga.Ser {
			e.EncodeElement(_cfgg, _cfea)
		}
	}
	if _cga.DLbls != nil {
		_cca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cga.DLbls, _cca)
	}
	if _cga.GapWidth != nil {
		_cgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_cga.GapWidth, _cgg)
	}
	if _cga.GapDepth != nil {
		_dcfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_cga.GapDepth, _dcfd)
	}
	if _cga.Shape != nil {
		_bde := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_cga.Shape, _bde)
	}
	_ade := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _gdf := range _cga.AxId {
		e.EncodeElement(_gdf, _ade)
	}
	if _cga.ExtLst != nil {
		_eec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cga.ExtLst, _eec)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dade *CT_DispUnitsChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cfcd:
	for {
		_cffg, _bgee := d.Token()
		if _bgee != nil {
			return _bgee
		}
		switch _efgg := _cffg.(type) {
		case _b.StartElement:
			switch _efgg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_dade.CustUnit = NewCT_Double()
				if _fcfba := d.DecodeElement(_dade.CustUnit, &_efgg); _fcfba != nil {
					return _fcfba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_dade.BuiltInUnit = NewCT_BuiltInUnit()
				if _gfea := d.DecodeElement(_dade.BuiltInUnit, &_efgg); _gfea != nil {
					return _gfea
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _efgg.Name)
				if _cacaf := d.Skip(); _cacaf != nil {
					return _cacaf
				}
			}
		case _b.EndElement:
			break _cfcd
		case _b.CharData:
		}
	}
	return nil
}
func (_ageg *CT_PageMargins) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gccac := range start.Attr {
		if _gccac.Name.Local == "\u006c" {
			_dafb, _afgee := _bd.ParseFloat(_gccac.Value, 64)
			if _afgee != nil {
				return _afgee
			}
			_ageg.LAttr = _dafb
			continue
		}
		if _gccac.Name.Local == "\u0072" {
			_babcf, _dcff := _bd.ParseFloat(_gccac.Value, 64)
			if _dcff != nil {
				return _dcff
			}
			_ageg.RAttr = _babcf
			continue
		}
		if _gccac.Name.Local == "\u0074" {
			_cdce, _afeg := _bd.ParseFloat(_gccac.Value, 64)
			if _afeg != nil {
				return _afeg
			}
			_ageg.TAttr = _cdce
			continue
		}
		if _gccac.Name.Local == "\u0062" {
			_dagdaa, _gdefe := _bd.ParseFloat(_gccac.Value, 64)
			if _gdefe != nil {
				return _gdefe
			}
			_ageg.BAttr = _dagdaa
			continue
		}
		if _gccac.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_dbfb, _efbb := _bd.ParseFloat(_gccac.Value, 64)
			if _efbb != nil {
				return _efbb
			}
			_ageg.HeaderAttr = _dbfb
			continue
		}
		if _gccac.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_cedeb, _cgfc := _bd.ParseFloat(_gccac.Value, 64)
			if _cgfc != nil {
				return _cgfc
			}
			_ageg.FooterAttr = _cedeb
			continue
		}
	}
	for {
		_eegd, _eggeg := d.Token()
		if _eggeg != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _eggeg)
		}
		if _egcdd, _aacbd := _eegd.(_b.EndElement); _aacbd && _egcdd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_acd *CT_BarGrouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eca := range start.Attr {
		if _eca.Name.Local == "\u0076\u0061\u006c" {
			_acd.ValAttr.UnmarshalXMLAttr(_eca)
			continue
		}
	}
	for {
		_cgab, _ggg := d.Token()
		if _ggg != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _ggg)
		}
		if _ffgg, _fbab := _cgab.(_b.EndElement); _fbab && _ffgg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PieChart() *CT_PieChart { _bcbe := &CT_PieChart{}; return _bcbe }

type CT_ErrBarType struct{ ValAttr ST_ErrBarType }

func NewCT_FirstSliceAng() *CT_FirstSliceAng { _cfgea := &CT_FirstSliceAng{}; return _cfgea }
func (_gcag *CT_DLbls) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _gcag.DLbl != nil {
		_bgbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _ecb := range _gcag.DLbl {
			e.EncodeElement(_ecb, _bgbad)
		}
	}
	if _gcag.Choice != nil {
		_gcag.Choice.MarshalXML(e, _b.StartElement{})
	}
	if _gcag.ExtLst != nil {
		_cfdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcag.ExtLst, _cfdb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_efegg *CT_StrVal) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dffcc := range start.Attr {
		if _dffcc.Name.Local == "\u0069\u0064\u0078" {
			_aeage, _gcgde := _bd.ParseUint(_dffcc.Value, 10, 32)
			if _gcgde != nil {
				return _gcgde
			}
			_efegg.IdxAttr = uint32(_aeage)
			continue
		}
	}
_aaacb:
	for {
		_abgcb, _cecgc := d.Token()
		if _cecgc != nil {
			return _cecgc
		}
		switch _adba := _abgcb.(type) {
		case _b.StartElement:
			switch _adba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _ecccb := d.DecodeElement(&_efegg.V, &_adba); _ecccb != nil {
					return _ecccb
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _adba.Name)
				if _fdebb := d.Skip(); _fdebb != nil {
					return _fdebb
				}
			}
		case _b.EndElement:
			break _aaacb
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Overlap and its children
func (_bcca *CT_Overlap) Validate() error {
	return _bcca.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}
func (_beaag *ST_MarkerStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afcdc, _beedf := d.Token()
	if _beedf != nil {
		return _beedf
	}
	if _beaf, _edbg := _afcdc.(_b.EndElement); _edbg && _beaf.Name == start.Name {
		*_beaag = 1
		return nil
	}
	if _babcg, _dggee := _afcdc.(_b.CharData); !_dggee {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afcdc)
	} else {
		switch string(_babcg) {
		case "":
			*_beaag = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_beaag = 1
		case "\u0064\u0061\u0073\u0068":
			*_beaag = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_beaag = 3
		case "\u0064\u006f\u0074":
			*_beaag = 4
		case "\u006e\u006f\u006e\u0065":
			*_beaag = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_beaag = 6
		case "\u0070\u006c\u0075\u0073":
			*_beaag = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_beaag = 8
		case "\u0073\u0074\u0061\u0072":
			*_beaag = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_beaag = 10
		case "\u0078":
			*_beaag = 11
		case "\u0061\u0075\u0074\u006f":
			*_beaag = 12
		}
	}
	_afcdc, _beedf = d.Token()
	if _beedf != nil {
		return _beedf
	}
	if _bcbdb, _cfbdf := _afcdc.(_b.EndElement); _cfbdf && _bcbdb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afcdc)
}

type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

func (_ceccd *CT_DLblsChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ceccd.Delete != nil {
		_aggfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ceccd.Delete, _aggfd)
	}
	if _ceccd.NumFmt != nil {
		_fcbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ceccd.NumFmt, _fcbc)
	}
	if _ceccd.SpPr != nil {
		_eab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ceccd.SpPr, _eab)
	}
	if _ceccd.TxPr != nil {
		_gfff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ceccd.TxPr, _gfff)
	}
	if _ceccd.DLblPos != nil {
		_cegg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_ceccd.DLblPos, _cegg)
	}
	if _ceccd.ShowLegendKey != nil {
		_gcde := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_ceccd.ShowLegendKey, _gcde)
	}
	if _ceccd.ShowVal != nil {
		_ecf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_ceccd.ShowVal, _ecf)
	}
	if _ceccd.ShowCatName != nil {
		_gggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ceccd.ShowCatName, _gggf)
	}
	if _ceccd.ShowSerName != nil {
		_aeda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ceccd.ShowSerName, _aeda)
	}
	if _ceccd.ShowPercent != nil {
		_gddb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_ceccd.ShowPercent, _gddb)
	}
	if _ceccd.ShowBubbleSize != nil {
		_ecfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ceccd.ShowBubbleSize, _ecfd)
	}
	if _ceccd.Separator != nil {
		_gbefa := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_dc.AddPreserveSpaceAttr(&_gbefa, *_ceccd.Separator)
		e.EncodeElement(_ceccd.Separator, _gbefa)
	}
	if _ceccd.ShowLeaderLines != nil {
		_fafc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ceccd.ShowLeaderLines, _fafc)
	}
	if _ceccd.LeaderLines != nil {
		_fdbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ceccd.LeaderLines, _fdbg)
	}
	return nil
}
func NewEG_LegendEntryData() *EG_LegendEntryData { _bcbef := &EG_LegendEntryData{}; return _bcbef }
func (_fgbed *CT_Legend) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fgbed.LegendPos != nil {
		_cbdb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_fgbed.LegendPos, _cbdb)
	}
	if _fgbed.LegendEntry != nil {
		_ggcba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _dbfef := range _fgbed.LegendEntry {
			e.EncodeElement(_dbfef, _ggcba)
		}
	}
	if _fgbed.Layout != nil {
		_aeaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fgbed.Layout, _aeaf)
	}
	if _fgbed.Overlay != nil {
		_aabeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_fgbed.Overlay, _aabeb)
	}
	if _fgbed.SpPr != nil {
		_gegce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fgbed.SpPr, _gegce)
	}
	if _fgbed.TxPr != nil {
		_ggdcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fgbed.TxPr, _ggdcc)
	}
	if _fgbed.ExtLst != nil {
		_ebceg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgbed.ExtLst, _ebceg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_dg *CT_AreaChart) ValidateWithPath(path string) error {
	if _dg.Grouping != nil {
		if _fdac := _dg.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _fdac != nil {
			return _fdac
		}
	}
	if _dg.VaryColors != nil {
		if _bgdf := _dg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bgdf != nil {
			return _bgdf
		}
	}
	for _bad, _ad := range _dg.Ser {
		if _gbf := _ad.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bad)); _gbf != nil {
			return _gbf
		}
	}
	if _dg.DLbls != nil {
		if _fbf := _dg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fbf != nil {
			return _fbf
		}
	}
	if _dg.DropLines != nil {
		if _gef := _dg.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _gef != nil {
			return _gef
		}
	}
	for _fea, _fca := range _dg.AxId {
		if _gc := _fca.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fea)); _gc != nil {
			return _gc
		}
	}
	if _dg.ExtLst != nil {
		if _be := _dg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _be != nil {
			return _be
		}
	}
	return nil
}
func (_abcd ST_DispBlanksAs) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_abcd.String(), start)
}
func (_gac *CT_AxDataSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gac.Choice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_PlotArea struct {
	Layout  *CT_Layout
	Choice  []*CT_PlotAreaChoice
	CChoice *CT_PlotAreaChoice1
	DTable  *CT_DTable
	SpPr    *_f.CT_ShapeProperties
	ExtLst  *CT_ExtensionList
}

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_fcbbdf *CT_ValAx) ValidateWithPath(path string) error {
	if _ggaaa := _fcbbdf.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _ggaaa != nil {
		return _ggaaa
	}
	if _dbde := _fcbbdf.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _dbde != nil {
		return _dbde
	}
	if _fcbbdf.Delete != nil {
		if _dgec := _fcbbdf.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _dgec != nil {
			return _dgec
		}
	}
	if _gcabd := _fcbbdf.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gcabd != nil {
		return _gcabd
	}
	if _fcbbdf.MajorGridlines != nil {
		if _cfeac := _fcbbdf.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cfeac != nil {
			return _cfeac
		}
	}
	if _fcbbdf.MinorGridlines != nil {
		if _gaag := _fcbbdf.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _gaag != nil {
			return _gaag
		}
	}
	if _fcbbdf.Title != nil {
		if _gbfgbb := _fcbbdf.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _gbfgbb != nil {
			return _gbfgbb
		}
	}
	if _fcbbdf.NumFmt != nil {
		if _ggeed := _fcbbdf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ggeed != nil {
			return _ggeed
		}
	}
	if _fcbbdf.MajorTickMark != nil {
		if _gdfca := _fcbbdf.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gdfca != nil {
			return _gdfca
		}
	}
	if _fcbbdf.MinorTickMark != nil {
		if _fddec := _fcbbdf.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fddec != nil {
			return _fddec
		}
	}
	if _fcbbdf.TickLblPos != nil {
		if _acag := _fcbbdf.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _acag != nil {
			return _acag
		}
	}
	if _fcbbdf.SpPr != nil {
		if _adegc := _fcbbdf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adegc != nil {
			return _adegc
		}
	}
	if _fcbbdf.TxPr != nil {
		if _cfgeb := _fcbbdf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cfgeb != nil {
			return _cfgeb
		}
	}
	if _fbggf := _fcbbdf.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _fbggf != nil {
		return _fbggf
	}
	if _fcbbdf.Choice != nil {
		if _fcge := _fcbbdf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _fcge != nil {
			return _fcge
		}
	}
	if _fcbbdf.CrossBetween != nil {
		if _decg := _fcbbdf.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _decg != nil {
			return _decg
		}
	}
	if _fcbbdf.MajorUnit != nil {
		if _cefee := _fcbbdf.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _cefee != nil {
			return _cefee
		}
	}
	if _fcbbdf.MinorUnit != nil {
		if _deaeg := _fcbbdf.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _deaeg != nil {
			return _deaeg
		}
	}
	if _fcbbdf.DispUnits != nil {
		if _ecfdd := _fcbbdf.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _ecfdd != nil {
			return _ecfdd
		}
	}
	if _fcbbdf.ExtLst != nil {
		if _agefdd := _fcbbdf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agefdd != nil {
			return _agefdd
		}
	}
	return nil
}

type EG_SurfaceChartShared struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
}

func (_dgedb ST_RadarStyle) ValidateWithPath(path string) error {
	switch _dgedb {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgedb))
	}
	return nil
}

type CT_PageMargins struct {
	LAttr      float64
	RAttr      float64
	TAttr      float64
	BAttr      float64
	HeaderAttr float64
	FooterAttr float64
}

// Validate validates the CT_ChartLines and its children
func (_ebff *CT_ChartLines) Validate() error {
	return _ebff.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_ggdf *CT_RelId) ValidateWithPath(path string) error { return nil }

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

func (_bacge *CT_Skip) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _bacge.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_LayoutTarget byte

func NewCT_PictureOptions() *CT_PictureOptions { _ggdg := &CT_PictureOptions{}; return _ggdg }
func NewCT_SizeRepresents() *CT_SizeRepresents { _fdba := &CT_SizeRepresents{}; return _fdba }

type CT_PictureStackUnit struct{ ValAttr float64 }

func (_fbbgc *CT_TextLanguageID) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _badf := range start.Attr {
		if _badf.Name.Local == "\u0076\u0061\u006c" {
			_egccfd, _agbc := _badf.Value, error(nil)
			if _agbc != nil {
				return _agbc
			}
			_fbbgc.ValAttr = _egccfd
			continue
		}
	}
	for {
		_ecga, _afadg := d.Token()
		if _afadg != nil {
			return _aa.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _afadg)
		}
		if _gbeaf, _degee := _ecga.(_b.EndElement); _degee && _gbeaf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Trendline struct {
	Name          *string
	SpPr          *_f.CT_ShapeProperties
	TrendlineType *CT_TrendlineType
	Order         *CT_Order
	Period        *CT_Period
	Forward       *CT_Double
	Backward      *CT_Double
	Intercept     *CT_Double
	DispRSqr      *CT_Boolean
	DispEq        *CT_Boolean
	TrendlineLbl  *CT_TrendlineLbl
	ExtLst        *CT_ExtensionList
}

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

func NewCT_BarChart() *CT_BarChart {
	_egbd := &CT_BarChart{}
	_egbd.BarDir = NewCT_BarDir()
	return _egbd
}

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_dgaf *CT_ChartLines) ValidateWithPath(path string) error {
	if _dgaf.SpPr != nil {
		if _ebde := _dgaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ebde != nil {
			return _ebde
		}
	}
	return nil
}
func (_cgdea ST_Grouping) Validate() error { return _cgdea.ValidateWithPath("") }

// Validate validates the CT_PlotAreaChoice1 and its children
func (_cbabg *CT_PlotAreaChoice1) Validate() error {
	return _cbabg.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}
func (_feaf ST_TimeUnit) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cfaad := _b.Attr{}
	_cfaad.Name = name
	switch _feaf {
	case ST_TimeUnitUnset:
		_cfaad.Value = ""
	case ST_TimeUnitDays:
		_cfaad.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_cfaad.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_cfaad.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _cfaad, nil
}

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

func (_cdbd *CT_PlotArea) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcfbg:
	for {
		_dddcb, _gbegc := d.Token()
		if _gbegc != nil {
			return _gbegc
		}
		switch _aadf := _dddcb.(type) {
		case _b.StartElement:
			switch _aadf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cdbd.Layout = NewCT_Layout()
				if _bffe := d.DecodeElement(_cdbd.Layout, &_aadf); _bffe != nil {
					return _bffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_debac := NewCT_PlotAreaChoice()
				if _adbd := d.DecodeElement(&_debac.AreaChart, &_aadf); _adbd != nil {
					return _adbd
				}
				_cdbd.Choice = append(_cdbd.Choice, _debac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gdgea := NewCT_PlotAreaChoice()
				if _ccgaf := d.DecodeElement(&_gdgea.Area3DChart, &_aadf); _ccgaf != nil {
					return _ccgaf
				}
				_cdbd.Choice = append(_cdbd.Choice, _gdgea)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_fgdfg := NewCT_PlotAreaChoice()
				if _bgcfc := d.DecodeElement(&_fgdfg.LineChart, &_aadf); _bgcfc != nil {
					return _bgcfc
				}
				_cdbd.Choice = append(_cdbd.Choice, _fgdfg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_ebega := NewCT_PlotAreaChoice()
				if _gbfea := d.DecodeElement(&_ebega.Line3DChart, &_aadf); _gbfea != nil {
					return _gbfea
				}
				_cdbd.Choice = append(_cdbd.Choice, _ebega)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_cdbcf := NewCT_PlotAreaChoice()
				if _eebac := d.DecodeElement(&_cdbcf.StockChart, &_aadf); _eebac != nil {
					return _eebac
				}
				_cdbd.Choice = append(_cdbd.Choice, _cdbcf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cddef := NewCT_PlotAreaChoice()
				if _abag := d.DecodeElement(&_cddef.RadarChart, &_aadf); _abag != nil {
					return _abag
				}
				_cdbd.Choice = append(_cdbd.Choice, _cddef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_egbaf := NewCT_PlotAreaChoice()
				if _bgabg := d.DecodeElement(&_egbaf.ScatterChart, &_aadf); _bgabg != nil {
					return _bgabg
				}
				_cdbd.Choice = append(_cdbd.Choice, _egbaf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_cgcgc := NewCT_PlotAreaChoice()
				if _aefg := d.DecodeElement(&_cgcgc.PieChart, &_aadf); _aefg != nil {
					return _aefg
				}
				_cdbd.Choice = append(_cdbd.Choice, _cgcgc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cfbeg := NewCT_PlotAreaChoice()
				if _cbga := d.DecodeElement(&_cfbeg.Pie3DChart, &_aadf); _cbga != nil {
					return _cbga
				}
				_cdbd.Choice = append(_cdbd.Choice, _cfbeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_accdb := NewCT_PlotAreaChoice()
				if _dcae := d.DecodeElement(&_accdb.DoughnutChart, &_aadf); _dcae != nil {
					return _dcae
				}
				_cdbd.Choice = append(_cdbd.Choice, _accdb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_daddd := NewCT_PlotAreaChoice()
				if _dagcb := d.DecodeElement(&_daddd.BarChart, &_aadf); _dagcb != nil {
					return _dagcb
				}
				_cdbd.Choice = append(_cdbd.Choice, _daddd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfege := NewCT_PlotAreaChoice()
				if _eeedb := d.DecodeElement(&_bfege.Bar3DChart, &_aadf); _eeedb != nil {
					return _eeedb
				}
				_cdbd.Choice = append(_cdbd.Choice, _bfege)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_ecbf := NewCT_PlotAreaChoice()
				if _gfgde := d.DecodeElement(&_ecbf.OfPieChart, &_aadf); _gfgde != nil {
					return _gfgde
				}
				_cdbd.Choice = append(_cdbd.Choice, _ecbf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_degd := NewCT_PlotAreaChoice()
				if _cfcbg := d.DecodeElement(&_degd.SurfaceChart, &_aadf); _cfcbg != nil {
					return _cfcbg
				}
				_cdbd.Choice = append(_cdbd.Choice, _degd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_cbccf := NewCT_PlotAreaChoice()
				if _acggg := d.DecodeElement(&_cbccf.Surface3DChart, &_aadf); _acggg != nil {
					return _acggg
				}
				_cdbd.Choice = append(_cdbd.Choice, _cbccf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bdda := NewCT_PlotAreaChoice()
				if _cbec := d.DecodeElement(&_bdda.BubbleChart, &_aadf); _cbec != nil {
					return _cbec
				}
				_cdbd.Choice = append(_cdbd.Choice, _bdda)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				if _cdbd.CChoice == nil {
					_cdbd.CChoice = NewCT_PlotAreaChoice1()
				}
				if _gggba := d.DecodeElement(&_cdbd.CChoice.ValAx, &_aadf); _gggba != nil {
					return _gggba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				if _cdbd.CChoice == nil {
					_cdbd.CChoice = NewCT_PlotAreaChoice1()
				}
				if _fcfcf := d.DecodeElement(&_cdbd.CChoice.CatAx, &_aadf); _fcfcf != nil {
					return _fcfcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				if _cdbd.CChoice == nil {
					_cdbd.CChoice = NewCT_PlotAreaChoice1()
				}
				if _ffbgb := d.DecodeElement(&_cdbd.CChoice.DateAx, &_aadf); _ffbgb != nil {
					return _ffbgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				if _cdbd.CChoice == nil {
					_cdbd.CChoice = NewCT_PlotAreaChoice1()
				}
				if _gcgbb := d.DecodeElement(&_cdbd.CChoice.SerAx, &_aadf); _gcgbb != nil {
					return _gcgbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_cdbd.DTable = NewCT_DTable()
				if _abdeb := d.DecodeElement(_cdbd.DTable, &_aadf); _abdeb != nil {
					return _abdeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cdbd.SpPr = _f.NewCT_ShapeProperties()
				if _aafab := d.DecodeElement(_cdbd.SpPr, &_aadf); _aafab != nil {
					return _aafab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdbd.ExtLst = NewCT_ExtensionList()
				if _eefac := d.DecodeElement(_cdbd.ExtLst, &_aadf); _eefac != nil {
					return _eefac
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _aadf.Name)
				if _agdca := d.Skip(); _agdca != nil {
					return _agdca
				}
			}
		case _b.EndElement:
			break _bcfbg
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_RadarStyle() *CT_RadarStyle { _bdcbd := &CT_RadarStyle{}; return _bdcbd }

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_gccee *CT_Tx) ValidateWithPath(path string) error {
	if _eccea := _gccee.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _eccea != nil {
		return _eccea
	}
	return nil
}
func (_dfcdg *CT_PivotSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dfcdg.FmtId = NewCT_UnsignedInt()
_cdecf:
	for {
		_eaefda, _daee := d.Token()
		if _daee != nil {
			return _daee
		}
		switch _fbcf := _eaefda.(type) {
		case _b.StartElement:
			switch _fbcf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _ggde := d.DecodeElement(&_dfcdg.Name, &_fbcf); _ggde != nil {
					return _ggde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _gffd := d.DecodeElement(_dfcdg.FmtId, &_fbcf); _gffd != nil {
					return _gffd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_effc := NewCT_ExtensionList()
				if _fcgg := d.DecodeElement(_effc, &_fbcf); _fcgg != nil {
					return _fcgg
				}
				_dfcdg.ExtLst = append(_dfcdg.ExtLst, _effc)
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _fbcf.Name)
				if _ggdae := d.Skip(); _ggdae != nil {
					return _ggdae
				}
			}
		case _b.EndElement:
			break _cdecf
		case _b.CharData:
		}
	}
	return nil
}
func (_afdbf *CT_RadarStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aebac := range start.Attr {
		if _aebac.Name.Local == "\u0076\u0061\u006c" {
			_afdbf.ValAttr.UnmarshalXMLAttr(_aebac)
			continue
		}
	}
	for {
		_bgacdg, _gdea := d.Token()
		if _gdea != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _gdea)
		}
		if _edcaf, _bdcc := _bgacdg.(_b.EndElement); _bdcc && _edcaf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dgdgd *CT_NumRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bgdb:
	for {
		_cdabg, _aafc := d.Token()
		if _aafc != nil {
			return _aafc
		}
		switch _fbaab := _cdabg.(type) {
		case _b.StartElement:
			switch _fbaab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _fbfd := d.DecodeElement(&_dgdgd.F, &_fbaab); _fbfd != nil {
					return _fbfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_dgdgd.NumCache = NewCT_NumData()
				if _eacd := d.DecodeElement(_dgdgd.NumCache, &_fbaab); _eacd != nil {
					return _eacd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dgdgd.ExtLst = NewCT_ExtensionList()
				if _cgedf := d.DecodeElement(_dgdgd.ExtLst, &_fbaab); _cgedf != nil {
					return _cgedf
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _fbaab.Name)
				if _adeg := d.Skip(); _adeg != nil {
					return _adeg
				}
			}
		case _b.EndElement:
			break _bgdb
		case _b.CharData:
		}
	}
	return nil
}
func (_daffd ST_DLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_daffd.String(), start)
}

type ST_CrossBetween byte
type ST_SplitType byte

func NewCT_StockChart() *CT_StockChart { _gfdgg := &CT_StockChart{}; return _gfdgg }
func (_cbfdg ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _cbfdg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbfdg))
	}
	return nil
}

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_gfbda *CT_Order) ValidateWithPath(path string) error {
	if _gfbda.ValAttr != nil {
		if *_gfbda.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_gfbda.ValAttr)
		}
		if *_gfbda.ValAttr > 6 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_gfbda.ValAttr)
		}
	}
	return nil
}

type CT_PrintSettings struct {
	HeaderFooter    *CT_HeaderFooter
	PageMargins     *CT_PageMargins
	PageSetup       *CT_PageSetup
	LegacyDrawingHF *CT_RelId
}

func (_cedeg *CT_LegendPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fadca := range start.Attr {
		if _fadca.Name.Local == "\u0076\u0061\u006c" {
			_cedeg.ValAttr.UnmarshalXMLAttr(_fadca)
			continue
		}
	}
	for {
		_acged, _ecgg := d.Token()
		if _ecgg != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _ecgg)
		}
		if _fcga, _dddeg := _acged.(_b.EndElement); _dddeg && _fcga.Name == start.Name {
			break
		}
	}
	return nil
}
func (_befa *CT_Double) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _befa.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DLbls and its children
func (_dbg *CT_DLbls) Validate() error {
	return _dbg.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_bcac *CT_Marker) ValidateWithPath(path string) error {
	if _bcac.Symbol != nil {
		if _dcbd := _bcac.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _dcbd != nil {
			return _dcbd
		}
	}
	if _bcac.Size != nil {
		if _bbbaf := _bcac.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _bbbaf != nil {
			return _bbbaf
		}
	}
	if _bcac.SpPr != nil {
		if _aabac := _bcac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aabac != nil {
			return _aabac
		}
	}
	if _bcac.ExtLst != nil {
		if _gagad := _bcac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gagad != nil {
			return _gagad
		}
	}
	return nil
}

type CT_BubbleChart struct {
	VaryColors     *CT_Boolean
	Ser            []*CT_BubbleSer
	DLbls          *CT_DLbls
	Bubble3D       *CT_Boolean
	BubbleScale    *CT_BubbleScale
	ShowNegBubbles *CT_Boolean
	SizeRepresents *CT_SizeRepresents
	AxId           []*CT_UnsignedInt
	ExtLst         *CT_ExtensionList
}
type CT_Pie3DChart struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
	ExtLst     *CT_ExtensionList
}

func (_afgaf ST_SizeRepresents) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_afgaf.String(), start)
}

// Validate validates the CT_BarDir and its children
func (_bge *CT_BarDir) Validate() error {
	return _bge.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_begfbb *CT_Style) ValidateWithPath(path string) error {
	if _begfbb.ValAttr < 1 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _begfbb.ValAttr)
	}
	if _begfbb.ValAttr > 48 {
		return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _begfbb.ValAttr)
	}
	return nil
}
func (_aebbaa ST_ErrBarType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_aebbaa.String(), start)
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_afaf *CT_Orientation) ValidateWithPath(path string) error {
	if _ggfb := _afaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggfb != nil {
		return _ggfb
	}
	return nil
}
func (_gbgbb *CT_LineChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gbgbb.Grouping = NewCT_Grouping()
_bfbf:
	for {
		_gafadc, _ebdeb := d.Token()
		if _ebdeb != nil {
			return _ebdeb
		}
		switch _cbade := _gafadc.(type) {
		case _b.StartElement:
			switch _cbade.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _bcbc := d.DecodeElement(_gbgbb.Grouping, &_cbade); _bcbc != nil {
					return _bcbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gbgbb.VaryColors = NewCT_Boolean()
				if _dgfee := d.DecodeElement(_gbgbb.VaryColors, &_cbade); _dgfee != nil {
					return _dgfee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bebc := NewCT_LineSer()
				if _effec := d.DecodeElement(_bebc, &_cbade); _effec != nil {
					return _effec
				}
				_gbgbb.Ser = append(_gbgbb.Ser, _bebc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gbgbb.DLbls = NewCT_DLbls()
				if _ebab := d.DecodeElement(_gbgbb.DLbls, &_cbade); _ebab != nil {
					return _ebab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_gbgbb.DropLines = NewCT_ChartLines()
				if _fgbf := d.DecodeElement(_gbgbb.DropLines, &_cbade); _fgbf != nil {
					return _fgbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_gbgbb.HiLowLines = NewCT_ChartLines()
				if _fbfc := d.DecodeElement(_gbgbb.HiLowLines, &_cbade); _fbfc != nil {
					return _fbfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_gbgbb.UpDownBars = NewCT_UpDownBars()
				if _fbgcf := d.DecodeElement(_gbgbb.UpDownBars, &_cbade); _fbgcf != nil {
					return _fbgcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gbgbb.Marker = NewCT_Boolean()
				if _agfd := d.DecodeElement(_gbgbb.Marker, &_cbade); _agfd != nil {
					return _agfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_gbgbb.Smooth = NewCT_Boolean()
				if _gcabe := d.DecodeElement(_gbgbb.Smooth, &_cbade); _gcabe != nil {
					return _gcabe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fafa := NewCT_UnsignedInt()
				if _gcbe := d.DecodeElement(_fafa, &_cbade); _gcbe != nil {
					return _gcbe
				}
				_gbgbb.AxId = append(_gbgbb.AxId, _fafa)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbgbb.ExtLst = NewCT_ExtensionList()
				if _gagfb := d.DecodeElement(_gbgbb.ExtLst, &_cbade); _gagfb != nil {
					return _gagfb
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _cbade.Name)
				if _bbbc := d.Skip(); _bbbc != nil {
					return _bbbc
				}
			}
		case _b.EndElement:
			break _bfbf
		case _b.CharData:
		}
	}
	return nil
}
func (_feda *ST_LayoutMode) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_feda = 0
	case "\u0065\u0064\u0067\u0065":
		*_feda = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_feda = 2
	}
	return nil
}

type CT_LogBase struct{ ValAttr float64 }

func (_febc *CT_ErrBars) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _febc.ErrDir != nil {
		_acga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_febc.ErrDir, _acga)
	}
	_aebab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_febc.ErrBarType, _aebab)
	_fedd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_febc.ErrValType, _fedd)
	if _febc.NoEndCap != nil {
		_afee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_febc.NoEndCap, _afee)
	}
	if _febc.Plus != nil {
		_fbba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_febc.Plus, _fbba)
	}
	if _febc.Minus != nil {
		_edgbc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_febc.Minus, _edgbc)
	}
	if _febc.Val != nil {
		_gdgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_febc.Val, _gdgg)
	}
	if _febc.SpPr != nil {
		_eefaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_febc.SpPr, _eefaa)
	}
	if _febc.ExtLst != nil {
		_gbbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febc.ExtLst, _gbbg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_dbcefd *EG_LineChartShared) ValidateWithPath(path string) error {
	if _fefca := _dbcefd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _fefca != nil {
		return _fefca
	}
	if _dbcefd.VaryColors != nil {
		if _gaeb := _dbcefd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gaeb != nil {
			return _gaeb
		}
	}
	for _facd, _fcdf := range _dbcefd.Ser {
		if _ffaf := _fcdf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _facd)); _ffaf != nil {
			return _ffaf
		}
	}
	if _dbcefd.DLbls != nil {
		if _dgbcbf := _dbcefd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgbcbf != nil {
			return _dgbcbf
		}
	}
	if _dbcefd.DropLines != nil {
		if _bbgdd := _dbcefd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _bbgdd != nil {
			return _bbgdd
		}
	}
	return nil
}

type CT_SecondPieSize struct{ ValAttr *ST_SecondPieSize }

func (_bbbgb *ST_TickMark) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bbbgb = 0
	case "\u0063\u0072\u006fs\u0073":
		*_bbbgb = 1
	case "\u0069\u006e":
		*_bbbgb = 2
	case "\u006e\u006f\u006e\u0065":
		*_bbbgb = 3
	case "\u006f\u0075\u0074":
		*_bbbgb = 4
	}
	return nil
}
func NewCT_LineChart() *CT_LineChart {
	_cdfgc := &CT_LineChart{}
	_cdfgc.Grouping = NewCT_Grouping()
	return _cdfgc
}
func NewCT_BarDir() *CT_BarDir { _cfeg := &CT_BarDir{}; return _cfeg }
func (_ecd *CT_ChartLines) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ecd.SpPr != nil {
		_caca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ecd.SpPr, _caca)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dacb *ST_Thickness) Validate() error { return _dacb.ValidateWithPath("") }

// Validate validates the CT_BubbleChart and its children
func (_dedb *CT_BubbleChart) Validate() error {
	return _dedb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}
func (_ccfe *CT_Marker) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ccfe.Symbol != nil {
		_gcdea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_ccfe.Symbol, _gcdea)
	}
	if _ccfe.Size != nil {
		_cabf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_ccfe.Size, _cabf)
	}
	if _ccfe.SpPr != nil {
		_ffdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ccfe.SpPr, _ffdb)
	}
	if _ccfe.ExtLst != nil {
		_adaff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccfe.ExtLst, _adaff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ffcdg ST_SplitType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cecag := _b.Attr{}
	_cecag.Name = name
	switch _ffcdg {
	case ST_SplitTypeUnset:
		_cecag.Value = ""
	case ST_SplitTypeAuto:
		_cecag.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_cecag.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_cecag.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_cecag.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_cecag.Value = "\u0076\u0061\u006c"
	}
	return _cecag, nil
}
func (_facba *CT_SerTx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_facba.Choice = NewCT_SerTxChoice()
_bbeae:
	for {
		_faafd, _gafgg := d.Token()
		if _gafgg != nil {
			return _gafgg
		}
		switch _aegce := _faafd.(type) {
		case _b.StartElement:
			switch _aegce.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_facba.Choice = NewCT_SerTxChoice()
				if _bfeda := d.DecodeElement(&_facba.Choice.StrRef, &_aegce); _bfeda != nil {
					return _bfeda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_facba.Choice = NewCT_SerTxChoice()
				if _accg := d.DecodeElement(&_facba.Choice.V, &_aegce); _accg != nil {
					return _accg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _aegce.Name)
				if _cdece := d.Skip(); _cdece != nil {
					return _cdece
				}
			}
		case _b.EndElement:
			break _bbeae
		case _b.CharData:
		}
	}
	return nil
}
func (_gfbg *CT_DPt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gfbg.Idx = NewCT_UnsignedInt()
_bcdc:
	for {
		_eagc, _abfd := d.Token()
		if _abfd != nil {
			return _abfd
		}
		switch _ecgd := _eagc.(type) {
		case _b.StartElement:
			switch _ecgd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ebce := d.DecodeElement(_gfbg.Idx, &_ecgd); _ebce != nil {
					return _ebce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_gfbg.InvertIfNegative = NewCT_Boolean()
				if _bfda := d.DecodeElement(_gfbg.InvertIfNegative, &_ecgd); _bfda != nil {
					return _bfda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gfbg.Marker = NewCT_Marker()
				if _afde := d.DecodeElement(_gfbg.Marker, &_ecgd); _afde != nil {
					return _afde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_gfbg.Bubble3D = NewCT_Boolean()
				if _efega := d.DecodeElement(_gfbg.Bubble3D, &_ecgd); _efega != nil {
					return _efega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_gfbg.Explosion = NewCT_UnsignedInt()
				if _cbde := d.DecodeElement(_gfbg.Explosion, &_ecgd); _cbde != nil {
					return _cbde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gfbg.SpPr = _f.NewCT_ShapeProperties()
				if _befc := d.DecodeElement(_gfbg.SpPr, &_ecgd); _befc != nil {
					return _befc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_gfbg.PictureOptions = NewCT_PictureOptions()
				if _fcce := d.DecodeElement(_gfbg.PictureOptions, &_ecgd); _fcce != nil {
					return _fcce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfbg.ExtLst = NewCT_ExtensionList()
				if _egagc := d.DecodeElement(_gfbg.ExtLst, &_ecgd); _egagc != nil {
					return _egagc
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _ecgd.Name)
				if _feba := d.Skip(); _feba != nil {
					return _feba
				}
			}
		case _b.EndElement:
			break _bcdc
		case _b.CharData:
		}
	}
	return nil
}

type CT_ExternalData struct {
	IdAttr     string
	AutoUpdate *CT_Boolean
}

func NewCT_LineSer() *CT_LineSer {
	_fgbee := &CT_LineSer{}
	_fgbee.Idx = NewCT_UnsignedInt()
	_fgbee.Order = NewCT_UnsignedInt()
	return _fgbee
}
func NewCT_TxChoice() *CT_TxChoice { _beaa := &CT_TxChoice{}; return _beaa }
func (_fbd *CT_BarChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_fbd.BarDir, _gce)
	if _fbd.Grouping != nil {
		_feef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_fbd.Grouping, _feef)
	}
	if _fbd.VaryColors != nil {
		_cgcg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fbd.VaryColors, _cgcg)
	}
	if _fbd.Ser != nil {
		_adde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bfe := range _fbd.Ser {
			e.EncodeElement(_bfe, _adde)
		}
	}
	if _fbd.DLbls != nil {
		_abbc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fbd.DLbls, _abbc)
	}
	if _fbd.GapWidth != nil {
		_dfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_fbd.GapWidth, _dfg)
	}
	if _fbd.Overlap != nil {
		_beg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_fbd.Overlap, _beg)
	}
	if _fbd.SerLines != nil {
		_ceg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _gaef := range _fbd.SerLines {
			e.EncodeElement(_gaef, _ceg)
		}
	}
	_adda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _afe := range _fbd.AxId {
		e.EncodeElement(_afe, _adda)
	}
	if _fbd.ExtLst != nil {
		_edgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbd.ExtLst, _edgb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DateAx and its children
func (_babfg *CT_DateAx) Validate() error {
	return _babfg.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}

// Validate validates the CT_ValAx and its children
func (_babag *CT_ValAx) Validate() error {
	return _babag.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_ageff *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _ggddb := _ageff.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggddb != nil {
		return _ggddb
	}
	return nil
}

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_abfc *CT_LegendPos) ValidateWithPath(path string) error {
	if _ccaf := _abfc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ccaf != nil {
		return _ccaf
	}
	return nil
}

// Validate validates the CT_ChartSpace and its children
func (_fafef *CT_ChartSpace) Validate() error {
	return _fafef.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_dfba *Chart) ValidateWithPath(path string) error {
	if _eegb := _dfba.CT_RelId.ValidateWithPath(path); _eegb != nil {
		return _eegb
	}
	return nil
}

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_bbaa *CT_Double) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_AreaChart and its children
func (_afb *CT_AreaChart) Validate() error {
	return _afb.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}
func (_bfdc *CT_Boolean) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eeec := range start.Attr {
		if _eeec.Name.Local == "\u0076\u0061\u006c" {
			_dcb, _ffdg := _bd.ParseBool(_eeec.Value)
			if _ffdg != nil {
				return _ffdg
			}
			_bfdc.ValAttr = &_dcb
			continue
		}
	}
	for {
		_cdad, _gacd := d.Token()
		if _gacd != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _gacd)
		}
		if _fgf, _dcbb := _cdad.(_b.EndElement); _dcbb && _fgf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_SurfaceSer and its children
func (_cbge *CT_SurfaceSer) Validate() error {
	return _cbge.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_bfd *CT_BandFmts) ValidateWithPath(path string) error {
	for _cdb, _cbc := range _bfd.BandFmt {
		if _fdca := _cbc.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _cdb)); _fdca != nil {
			return _fdca
		}
	}
	return nil
}

type CT_ValAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	CrossBetween   *CT_CrossBetween
	MajorUnit      *CT_AxisUnit
	MinorUnit      *CT_AxisUnit
	DispUnits      *CT_DispUnits
	ExtLst         *CT_ExtensionList
}

func (_befcg *CT_ManualLayout) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _befcg.LayoutTarget != nil {
		_dbccd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_befcg.LayoutTarget, _dbccd)
	}
	if _befcg.XMode != nil {
		_fdcf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_befcg.XMode, _fdcf)
	}
	if _befcg.YMode != nil {
		_acbf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_befcg.YMode, _acbf)
	}
	if _befcg.WMode != nil {
		_gcdegf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_befcg.WMode, _gcdegf)
	}
	if _befcg.HMode != nil {
		_ffgbdg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_befcg.HMode, _ffgbdg)
	}
	if _befcg.X != nil {
		_egeda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_befcg.X, _egeda)
	}
	if _befcg.Y != nil {
		_aeedb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_befcg.Y, _aeedb)
	}
	if _befcg.W != nil {
		_ecdec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_befcg.W, _ecdec)
	}
	if _befcg.H != nil {
		_ebed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_befcg.H, _ebed)
	}
	if _befcg.ExtLst != nil {
		_gega := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_befcg.ExtLst, _gega)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RotX and its children
func (_dgga *CT_RotX) Validate() error {
	return _dgga.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}

type ST_MarkerStyle byte

func (_acdad ST_Orientation) ValidateWithPath(path string) error {
	switch _acdad {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acdad))
	}
	return nil
}
func NewCT_PrintSettings() *CT_PrintSettings { _cdbf := &CT_PrintSettings{}; return _cdbf }
func (_ebgb *CT_PictureStackUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _ebgb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type EG_AxShared struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
}

// Validate validates the CT_PieChart and its children
func (_gbbab *CT_PieChart) Validate() error {
	return _gbbab.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}
func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_cccd, _ecaef := _bd.ParseUint(s, 10, 8)
	if _ecaef != nil {
		return ST_HoleSize{}, _ecaef
	}
	_eggdg := uint8(_cccd)
	return ST_HoleSize{ST_HoleSizeUByte: &_eggdg}, nil
}

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_cdfba *EG_DLblShared) ValidateWithPath(path string) error {
	if _cdfba.NumFmt != nil {
		if _gbedf := _cdfba.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gbedf != nil {
			return _gbedf
		}
	}
	if _cdfba.SpPr != nil {
		if _cadff := _cdfba.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cadff != nil {
			return _cadff
		}
	}
	if _cdfba.TxPr != nil {
		if _bgddag := _cdfba.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bgddag != nil {
			return _bgddag
		}
	}
	if _cdfba.DLblPos != nil {
		if _fbce := _cdfba.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _fbce != nil {
			return _fbce
		}
	}
	if _cdfba.ShowLegendKey != nil {
		if _cccbc := _cdfba.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _cccbc != nil {
			return _cccbc
		}
	}
	if _cdfba.ShowVal != nil {
		if _aabdb := _cdfba.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _aabdb != nil {
			return _aabdb
		}
	}
	if _cdfba.ShowCatName != nil {
		if _bdgb := _cdfba.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _bdgb != nil {
			return _bdgb
		}
	}
	if _cdfba.ShowSerName != nil {
		if _beab := _cdfba.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _beab != nil {
			return _beab
		}
	}
	if _cdfba.ShowPercent != nil {
		if _gfafa := _cdfba.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _gfafa != nil {
			return _gfafa
		}
	}
	if _cdfba.ShowBubbleSize != nil {
		if _cegbd := _cdfba.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _cegbd != nil {
			return _cegbd
		}
	}
	return nil
}
func (_cbdg *CT_LblAlgn) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_bdaac, _dbdf := _cbdg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _dbdf != nil {
		return _dbdf
	}
	start.Attr = append(start.Attr, _bdaac)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_PictureFormat struct{ ValAttr ST_PictureFormat }

// Validate validates the CT_SecondPieSize and its children
func (_gaadb *CT_SecondPieSize) Validate() error {
	return _gaadb.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_agce *CT_PrintSettings) ValidateWithPath(path string) error {
	if _agce.HeaderFooter != nil {
		if _ecbg := _agce.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _ecbg != nil {
			return _ecbg
		}
	}
	if _agce.PageMargins != nil {
		if _gbecd := _agce.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _gbecd != nil {
			return _gbecd
		}
	}
	if _agce.PageSetup != nil {
		if _eecg := _agce.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _eecg != nil {
			return _eecg
		}
	}
	if _agce.LegacyDrawingHF != nil {
		if _bade := _agce.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _bade != nil {
			return _bade
		}
	}
	return nil
}

type CT_Surface struct {
	Thickness      *CT_Thickness
	SpPr           *_f.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	ExtLst         *CT_ExtensionList
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

// Validate validates the CT_Lvl and its children
func (_bgbfe *CT_Lvl) Validate() error {
	return _bgbfe.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}
func NewCT_BandFmts() *CT_BandFmts { _edd := &CT_BandFmts{}; return _edd }
func (_aafag *CT_HPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _aafag.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_aafag.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dggf *CT_MarkerSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dggf.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_dggf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_dgca, _gecdf := _bd.ParseUint(s, 10, 16)
	if _gecdf != nil {
		return ST_HPercent{}, _gecdf
	}
	_feabe := uint16(_dgca)
	return ST_HPercent{ST_HPercentUShort: &_feabe}, nil
}
func (_fgcca *ST_BarGrouping) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fgcca = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_fgcca = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_fgcca = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_fgcca = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_fgcca = 4
	}
	return nil
}
func (_fbda *CT_PieSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gacbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fbda.Idx, _gacbf)
	_bgced := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_fbda.Order, _bgced)
	if _fbda.Tx != nil {
		_gaeac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fbda.Tx, _gaeac)
	}
	if _fbda.SpPr != nil {
		_cdffa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbda.SpPr, _cdffa)
	}
	if _fbda.Explosion != nil {
		_bafad := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_fbda.Explosion, _bafad)
	}
	if _fbda.DPt != nil {
		_fdbfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _aabbg := range _fbda.DPt {
			e.EncodeElement(_aabbg, _fdbfd)
		}
	}
	if _fbda.DLbls != nil {
		_cbaba := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fbda.DLbls, _cbaba)
	}
	if _fbda.Cat != nil {
		_eaege := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_fbda.Cat, _eaege)
	}
	if _fbda.Val != nil {
		_dbead := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fbda.Val, _dbead)
	}
	if _fbda.ExtLst != nil {
		_cgadf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbda.ExtLst, _cgadf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_addgf *CT_Style) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_addgf.ValAttr = 1
	for _, _fcdde := range start.Attr {
		if _fcdde.Name.Local == "\u0076\u0061\u006c" {
			_gefce, _ggfd := _bd.ParseUint(_fcdde.Value, 10, 8)
			if _ggfd != nil {
				return _ggfd
			}
			_addgf.ValAttr = uint8(_gefce)
			continue
		}
	}
	for {
		_bcdfg, _ceaff := d.Token()
		if _ceaff != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _ceaff)
		}
		if _eegfd, _gbfc := _bcdfg.(_b.EndElement); _gbfc && _eegfd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ccce *CT_LayoutTarget) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ccce.ValAttr != ST_LayoutTargetUnset {
		_abdg, _agbfc := _ccce.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _agbfc != nil {
			return _agbfc
		}
		start.Attr = append(start.Attr, _abdg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cgfcc *CT_TrendlineLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gbffg:
	for {
		_agdb, _ecccd := d.Token()
		if _ecccd != nil {
			return _ecccd
		}
		switch _fbfdg := _agdb.(type) {
		case _b.StartElement:
			switch _fbfdg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cgfcc.Layout = NewCT_Layout()
				if _ffega := d.DecodeElement(_cgfcc.Layout, &_fbfdg); _ffega != nil {
					return _ffega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cgfcc.Tx = NewCT_Tx()
				if _agdeg := d.DecodeElement(_cgfcc.Tx, &_fbfdg); _agdeg != nil {
					return _agdeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cgfcc.NumFmt = NewCT_NumFmt()
				if _efdce := d.DecodeElement(_cgfcc.NumFmt, &_fbfdg); _efdce != nil {
					return _efdce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cgfcc.SpPr = _f.NewCT_ShapeProperties()
				if _gfdgd := d.DecodeElement(_cgfcc.SpPr, &_fbfdg); _gfdgd != nil {
					return _gfdgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cgfcc.TxPr = _f.NewCT_TextBody()
				if _aedac := d.DecodeElement(_cgfcc.TxPr, &_fbfdg); _aedac != nil {
					return _aedac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgfcc.ExtLst = NewCT_ExtensionList()
				if _gbabg := d.DecodeElement(_cgfcc.ExtLst, &_fbfdg); _gbabg != nil {
					return _gbabg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _fbfdg.Name)
				if _fada := d.Skip(); _fada != nil {
					return _fada
				}
			}
		case _b.EndElement:
			break _gbffg
		case _b.CharData:
		}
	}
	return nil
}

type ST_TickLblPos byte
type CT_BarChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	Overlap    *CT_Overlap
	SerLines   []*CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

var ST_SecondPieSizePercentPatternRe = _a.MustCompile(ST_SecondPieSizePercentPattern)

func (_dddab *CT_ScatterChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ffbgc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_dddab.ScatterStyle, _ffbgc)
	if _dddab.VaryColors != nil {
		_cggbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dddab.VaryColors, _cggbe)
	}
	if _dddab.Ser != nil {
		_fffac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eecga := range _dddab.Ser {
			e.EncodeElement(_eecga, _fffac)
		}
	}
	if _dddab.DLbls != nil {
		_eccdb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dddab.DLbls, _eccdb)
	}
	_aacbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bfef := range _dddab.AxId {
		e.EncodeElement(_bfef, _aacbb)
	}
	if _dddab.ExtLst != nil {
		_bbccg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dddab.ExtLst, _bbccg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_afgba *ST_ErrValType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_afgba = 0
	case "\u0063\u0075\u0073\u0074":
		*_afgba = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_afgba = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_afgba = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_afgba = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_afgba = 5
	}
	return nil
}

// Validate validates the CT_PageSetup and its children
func (_abce *CT_PageSetup) Validate() error {
	return _abce.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}

// Validate validates the CT_AxDataSource and its children
func (_gaf *CT_AxDataSource) Validate() error {
	return _gaf.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}
func NewCT_Scaling() *CT_Scaling { _gccf := &CT_Scaling{}; return _gccf }
func (_cddfb *CT_Surface) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cddfb.Thickness != nil {
		_cggff := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_cddfb.Thickness, _cggff)
	}
	if _cddfb.SpPr != nil {
		_eeaga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cddfb.SpPr, _eeaga)
	}
	if _cddfb.PictureOptions != nil {
		_adggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_cddfb.PictureOptions, _adggf)
	}
	if _cddfb.ExtLst != nil {
		_gbefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cddfb.ExtLst, _gbefd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gdbaed *Chart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _gdbaed.CT_RelId.MarshalXML(e, start)
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_bafe *CT_LineSer) ValidateWithPath(path string) error {
	if _cefe := _bafe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cefe != nil {
		return _cefe
	}
	if _ggacd := _bafe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ggacd != nil {
		return _ggacd
	}
	if _bafe.Tx != nil {
		if _dbggf := _bafe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dbggf != nil {
			return _dbggf
		}
	}
	if _bafe.SpPr != nil {
		if _ffbd := _bafe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffbd != nil {
			return _ffbd
		}
	}
	if _bafe.Marker != nil {
		if _bfcf := _bafe.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bfcf != nil {
			return _bfcf
		}
	}
	for _cfdgd, _ffade := range _bafe.DPt {
		if _eadb := _ffade.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cfdgd)); _eadb != nil {
			return _eadb
		}
	}
	if _bafe.DLbls != nil {
		if _ecgdg := _bafe.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ecgdg != nil {
			return _ecgdg
		}
	}
	for _geac, _dbagb := range _bafe.Trendline {
		if _bdcaf := _dbagb.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _geac)); _bdcaf != nil {
			return _bdcaf
		}
	}
	if _bafe.ErrBars != nil {
		if _gggb := _bafe.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _gggb != nil {
			return _gggb
		}
	}
	if _bafe.Cat != nil {
		if _ffddg := _bafe.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _ffddg != nil {
			return _ffddg
		}
	}
	if _bafe.Val != nil {
		if _egcc := _bafe.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _egcc != nil {
			return _egcc
		}
	}
	if _bafe.Smooth != nil {
		if _cdcb := _bafe.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _cdcb != nil {
			return _cdcb
		}
	}
	if _bafe.ExtLst != nil {
		if _efdde := _bafe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efdde != nil {
			return _efdde
		}
	}
	return nil
}

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

func (_aggag *CT_ExtensionList) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aggag.Ext != nil {
		_cfge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _gefg := range _aggag.Ext {
			e.EncodeElement(_gefg, _cfge)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_AxPos() *CT_AxPos { _afg := &CT_AxPos{}; _afg.ValAttr = ST_AxPos(1); return _afg }
func (_ffebe *CT_Trendline) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ffebe.Name != nil {
		_gaacg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_dc.AddPreserveSpaceAttr(&_gaacg, *_ffebe.Name)
		e.EncodeElement(_ffebe.Name, _gaacg)
	}
	if _ffebe.SpPr != nil {
		_dbgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ffebe.SpPr, _dbgf)
	}
	_fegbe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_ffebe.TrendlineType, _fegbe)
	if _ffebe.Order != nil {
		_dbebf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_ffebe.Order, _dbebf)
	}
	if _ffebe.Period != nil {
		_cddfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_ffebe.Period, _cddfd)
	}
	if _ffebe.Forward != nil {
		_deab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_ffebe.Forward, _deab)
	}
	if _ffebe.Backward != nil {
		_dcgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_ffebe.Backward, _dcgb)
	}
	if _ffebe.Intercept != nil {
		_fdbfde := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_ffebe.Intercept, _fdbfde)
	}
	if _ffebe.DispRSqr != nil {
		_ggcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_ffebe.DispRSqr, _ggcc)
	}
	if _ffebe.DispEq != nil {
		_ebeec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_ffebe.DispEq, _ebeec)
	}
	if _ffebe.TrendlineLbl != nil {
		_gabfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_ffebe.TrendlineLbl, _gabfb)
	}
	if _ffebe.ExtLst != nil {
		_ggdfff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffebe.ExtLst, _ggdfff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dbad *ST_Overlap) Validate() error  { return _dbad.ValidateWithPath("") }
func NewCT_HeaderFooter() *CT_HeaderFooter { _bbga := &CT_HeaderFooter{}; return _bbga }

// Validate validates the CT_Shape and its children
func (_fbgg *CT_Shape) Validate() error {
	return _fbgg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}
func (_facee *ST_LayoutTarget) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_facee = 0
	case "\u0069\u006e\u006ee\u0072":
		*_facee = 1
	case "\u006f\u0075\u0074e\u0072":
		*_facee = 2
	}
	return nil
}
func (_ecbff *CT_Protection) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_adefc:
	for {
		_egdee, _afca := d.Token()
		if _afca != nil {
			return _afca
		}
		switch _cecae := _egdee.(type) {
		case _b.StartElement:
			switch _cecae.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_ecbff.ChartObject = NewCT_Boolean()
				if _acgec := d.DecodeElement(_ecbff.ChartObject, &_cecae); _acgec != nil {
					return _acgec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_ecbff.Data = NewCT_Boolean()
				if _cageg := d.DecodeElement(_ecbff.Data, &_cecae); _cageg != nil {
					return _cageg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_ecbff.Formatting = NewCT_Boolean()
				if _cbba := d.DecodeElement(_ecbff.Formatting, &_cecae); _cbba != nil {
					return _cbba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_ecbff.Selection = NewCT_Boolean()
				if _gfdfc := d.DecodeElement(_ecbff.Selection, &_cecae); _gfdfc != nil {
					return _gfdfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_ecbff.UserInterface = NewCT_Boolean()
				if _dgba := d.DecodeElement(_ecbff.UserInterface, &_cecae); _dgba != nil {
					return _dgba
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _cecae.Name)
				if _gfbf := d.Skip(); _gfbf != nil {
					return _gfbf
				}
			}
		case _b.EndElement:
			break _adefc
		case _b.CharData:
		}
	}
	return nil
}
func (_fgec *CT_BandFmts) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fgec.BandFmt != nil {
		_gcdb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _eacg := range _fgec.BandFmt {
			e.EncodeElement(_eacg, _gcdb)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ddgd *CT_ErrValType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ddgd.ValAttr != ST_ErrValTypeUnset {
		_egde, _bcgg := _ddgd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bcgg != nil {
			return _bcgg
		}
		start.Attr = append(start.Attr, _egde)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_acaa *CT_DLbl) ValidateWithPath(path string) error {
	if _bdbed := _acaa.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bdbed != nil {
		return _bdbed
	}
	if _acaa.Choice != nil {
		if _gcbc := _acaa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gcbc != nil {
			return _gcbc
		}
	}
	if _acaa.ExtLst != nil {
		if _fggcd := _acaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fggcd != nil {
			return _fggcd
		}
	}
	return nil
}

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_cgafd *EG_BarChartShared) ValidateWithPath(path string) error {
	if _bfagb := _cgafd.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _bfagb != nil {
		return _bfagb
	}
	if _cgafd.Grouping != nil {
		if _dggfca := _cgafd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dggfca != nil {
			return _dggfca
		}
	}
	if _cgafd.VaryColors != nil {
		if _gecda := _cgafd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gecda != nil {
			return _gecda
		}
	}
	for _agffd, _cggbg := range _cgafd.Ser {
		if _baad := _cggbg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _agffd)); _baad != nil {
			return _baad
		}
	}
	if _cgafd.DLbls != nil {
		if _afga := _cgafd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _afga != nil {
			return _afga
		}
	}
	return nil
}
func (_fabe *ST_HPercent) ValidateWithPath(path string) error {
	_fbacg := []string{}
	if _fabe.ST_HPercentWithSymbol != nil {
		_fbacg = append(_fbacg, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _fabe.ST_HPercentUShort != nil {
		_fbacg = append(_fbacg, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_fbacg) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fbacg)
	}
	return nil
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_gbbdd *CT_StockChart) ValidateWithPath(path string) error {
	for _dcaa, _bafac := range _gbbdd.Ser {
		if _bcfgc := _bafac.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dcaa)); _bcfgc != nil {
			return _bcfgc
		}
	}
	if _gbbdd.DLbls != nil {
		if _fcgfe := _gbbdd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fcgfe != nil {
			return _fcgfe
		}
	}
	if _gbbdd.DropLines != nil {
		if _ebgeg := _gbbdd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ebgeg != nil {
			return _ebgeg
		}
	}
	if _gbbdd.HiLowLines != nil {
		if _bccbb := _gbbdd.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _bccbb != nil {
			return _bccbb
		}
	}
	if _gbbdd.UpDownBars != nil {
		if _cbdfa := _gbbdd.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _cbdfa != nil {
			return _cbdfa
		}
	}
	for _aagf, _bedfb := range _gbbdd.AxId {
		if _bcaba := _bedfb.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _aagf)); _bcaba != nil {
			return _bcaba
		}
	}
	if _gbbdd.ExtLst != nil {
		if _ecbd := _gbbdd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecbd != nil {
			return _ecbd
		}
	}
	return nil
}
func (_fbad *CT_Tx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fbad.Choice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_DispBlanksAs() *CT_DispBlanksAs { _bccf := &CT_DispBlanksAs{}; return _bccf }

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_gccc *CT_ErrBars) ValidateWithPath(path string) error {
	if _gccc.ErrDir != nil {
		if _gbbc := _gccc.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _gbbc != nil {
			return _gbbc
		}
	}
	if _eeegf := _gccc.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _eeegf != nil {
		return _eeegf
	}
	if _cabe := _gccc.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _cabe != nil {
		return _cabe
	}
	if _gccc.NoEndCap != nil {
		if _bada := _gccc.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _bada != nil {
			return _bada
		}
	}
	if _gccc.Plus != nil {
		if _dda := _gccc.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _dda != nil {
			return _dda
		}
	}
	if _gccc.Minus != nil {
		if _feeb := _gccc.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _feeb != nil {
			return _feeb
		}
	}
	if _gccc.Val != nil {
		if _eabf := _gccc.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _eabf != nil {
			return _eabf
		}
	}
	if _gccc.SpPr != nil {
		if _acgc := _gccc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acgc != nil {
			return _acgc
		}
	}
	if _gccc.ExtLst != nil {
		if _fbgb := _gccc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbgb != nil {
			return _fbgb
		}
	}
	return nil
}

type CT_TextLanguageID struct{ ValAttr string }

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_cddc *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _cabgf := _cddc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cabgf != nil {
		return _cabgf
	}
	if _ggfe := _cddc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ggfe != nil {
		return _ggfe
	}
	if _cddc.Tx != nil {
		if _ddff := _cddc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ddff != nil {
			return _ddff
		}
	}
	if _cddc.SpPr != nil {
		if _cbdag := _cddc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cbdag != nil {
			return _cbdag
		}
	}
	if _cddc.Cat != nil {
		if _dfddgd := _cddc.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _dfddgd != nil {
			return _dfddgd
		}
	}
	if _cddc.Val != nil {
		if _aacd := _cddc.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _aacd != nil {
			return _aacd
		}
	}
	if _cddc.ExtLst != nil {
		if _gcfe := _cddc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcfe != nil {
			return _gcfe
		}
	}
	return nil
}

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

func NewCT_StrVal() *CT_StrVal { _gffg := &CT_StrVal{}; return _gffg }

// Validate validates the CT_PlotAreaChoice and its children
func (_fgda *CT_PlotAreaChoice) Validate() error {
	return _fgda.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}
func (_eaga *CT_BubbleSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_eaga.Idx = NewCT_UnsignedInt()
	_eaga.Order = NewCT_UnsignedInt()
_fdfc:
	for {
		_gbfe, _cab := d.Token()
		if _cab != nil {
			return _cab
		}
		switch _gbd := _gbfe.(type) {
		case _b.StartElement:
			switch _gbd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _afc := d.DecodeElement(_eaga.Idx, &_gbd); _afc != nil {
					return _afc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _aac := d.DecodeElement(_eaga.Order, &_gbd); _aac != nil {
					return _aac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_eaga.Tx = NewCT_SerTx()
				if _gcba := d.DecodeElement(_eaga.Tx, &_gbd); _gcba != nil {
					return _gcba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eaga.SpPr = _f.NewCT_ShapeProperties()
				if _bbb := d.DecodeElement(_eaga.SpPr, &_gbd); _bbb != nil {
					return _bbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_eaga.InvertIfNegative = NewCT_Boolean()
				if _bcc := d.DecodeElement(_eaga.InvertIfNegative, &_gbd); _bcc != nil {
					return _bcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_acgf := NewCT_DPt()
				if _egba := d.DecodeElement(_acgf, &_gbd); _egba != nil {
					return _egba
				}
				_eaga.DPt = append(_eaga.DPt, _acgf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eaga.DLbls = NewCT_DLbls()
				if _baec := d.DecodeElement(_eaga.DLbls, &_gbd); _baec != nil {
					return _baec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cgf := NewCT_Trendline()
				if _gdda := d.DecodeElement(_cgf, &_gbd); _gdda != nil {
					return _gdda
				}
				_eaga.Trendline = append(_eaga.Trendline, _cgf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gecd := NewCT_ErrBars()
				if _edgg := d.DecodeElement(_gecd, &_gbd); _edgg != nil {
					return _edgg
				}
				_eaga.ErrBars = append(_eaga.ErrBars, _gecd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_eaga.XVal = NewCT_AxDataSource()
				if _gdaf := d.DecodeElement(_eaga.XVal, &_gbd); _gdaf != nil {
					return _gdaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_eaga.YVal = NewCT_NumDataSource()
				if _fgb := d.DecodeElement(_eaga.YVal, &_gbd); _fgb != nil {
					return _fgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_eaga.BubbleSize = NewCT_NumDataSource()
				if _abgg := d.DecodeElement(_eaga.BubbleSize, &_gbd); _abgg != nil {
					return _abgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_eaga.Bubble3D = NewCT_Boolean()
				if _bbdg := d.DecodeElement(_eaga.Bubble3D, &_gbd); _bbdg != nil {
					return _bbdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eaga.ExtLst = NewCT_ExtensionList()
				if _aaab := d.DecodeElement(_eaga.ExtLst, &_gbd); _aaab != nil {
					return _aaab
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _gbd.Name)
				if _dagd := d.Skip(); _dagd != nil {
					return _dagd
				}
			}
		case _b.EndElement:
			break _fdfc
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

// Validate validates the CT_UpDownBars and its children
func (_cfcef *CT_UpDownBars) Validate() error {
	return _cfcef.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}
func (_gcced *CT_TickLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gcced.ValAttr != ST_TickLblPosUnset {
		_aaedbg, _ggacc := _gcced.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _ggacc != nil {
			return _ggacc
		}
		start.Attr = append(start.Attr, _aaedbg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewEG_BarChartShared() *EG_BarChartShared {
	_bbbafe := &EG_BarChartShared{}
	_bbbafe.BarDir = NewCT_BarDir()
	return _bbbafe
}
func (_bbdaa ST_ScatterStyle) String() string {
	switch _bbdaa {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}
func (_becd *ST_ErrBarType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_becd = 0
	case "\u0062\u006f\u0074\u0068":
		*_becd = 1
	case "\u006d\u0069\u006eu\u0073":
		*_becd = 2
	case "\u0070\u006c\u0075\u0073":
		*_becd = 3
	}
	return nil
}

// Validate validates the CT_RotY and its children
func (_bafg *CT_RotY) Validate() error {
	return _bafg.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}

type CT_Skip struct{ ValAttr uint32 }

func (_ffeag *CT_ScatterStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gcbf := range start.Attr {
		if _gcbf.Name.Local == "\u0076\u0061\u006c" {
			_ffeag.ValAttr.UnmarshalXMLAttr(_gcbf)
			continue
		}
	}
	for {
		_dgdcg, _egbag := d.Token()
		if _egbag != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _egbag)
		}
		if _adea, _bece := _dgdcg.(_b.EndElement); _bece && _adea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cfcdd *CT_SurfaceChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfcdd.Wireframe != nil {
		_gbbfc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_cfcdd.Wireframe, _gbbfc)
	}
	if _cfcdd.Ser != nil {
		_afedc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcgaf := range _cfcdd.Ser {
			e.EncodeElement(_gcgaf, _afedc)
		}
	}
	if _cfcdd.BandFmts != nil {
		_fecaeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_cfcdd.BandFmts, _fecaeb)
	}
	_abfaed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dgcd := range _cfcdd.AxId {
		e.EncodeElement(_dgcd, _abfaed)
	}
	if _cfcdd.ExtLst != nil {
		_dcca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfcdd.ExtLst, _dcca)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_aed *CT_CatAx) ValidateWithPath(path string) error {
	if _cbccg := _aed.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _cbccg != nil {
		return _cbccg
	}
	if _aegb := _aed.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _aegb != nil {
		return _aegb
	}
	if _aed.Delete != nil {
		if _efcb := _aed.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _efcb != nil {
			return _efcb
		}
	}
	if _dcde := _aed.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _dcde != nil {
		return _dcde
	}
	if _aed.MajorGridlines != nil {
		if _effg := _aed.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _effg != nil {
			return _effg
		}
	}
	if _aed.MinorGridlines != nil {
		if _fbc := _aed.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fbc != nil {
			return _fbc
		}
	}
	if _aed.Title != nil {
		if _bdd := _aed.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _bdd != nil {
			return _bdd
		}
	}
	if _aed.NumFmt != nil {
		if _fcbda := _aed.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _fcbda != nil {
			return _fcbda
		}
	}
	if _aed.MajorTickMark != nil {
		if _aafa := _aed.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _aafa != nil {
			return _aafa
		}
	}
	if _aed.MinorTickMark != nil {
		if _fdcb := _aed.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fdcb != nil {
			return _fdcb
		}
	}
	if _aed.TickLblPos != nil {
		if _ebdc := _aed.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _ebdc != nil {
			return _ebdc
		}
	}
	if _aed.SpPr != nil {
		if _ceeg := _aed.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ceeg != nil {
			return _ceeg
		}
	}
	if _aed.TxPr != nil {
		if _eege := _aed.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eege != nil {
			return _eege
		}
	}
	if _bfae := _aed.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _bfae != nil {
		return _bfae
	}
	if _aed.Choice != nil {
		if _ecac := _aed.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ecac != nil {
			return _ecac
		}
	}
	if _aed.Auto != nil {
		if _fafe := _aed.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _fafe != nil {
			return _fafe
		}
	}
	if _aed.LblAlgn != nil {
		if _badc := _aed.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _badc != nil {
			return _badc
		}
	}
	if _aed.LblOffset != nil {
		if _edca := _aed.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _edca != nil {
			return _edca
		}
	}
	if _aed.TickLblSkip != nil {
		if _cgfb := _aed.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _cgfb != nil {
			return _cgfb
		}
	}
	if _aed.TickMarkSkip != nil {
		if _fbdd := _aed.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _fbdd != nil {
			return _fbdd
		}
	}
	if _aed.NoMultiLvlLbl != nil {
		if _bfgb := _aed.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _bfgb != nil {
			return _bfgb
		}
	}
	if _aed.ExtLst != nil {
		if _gadc := _aed.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gadc != nil {
			return _gadc
		}
	}
	return nil
}
func NewCT_RotX() *CT_RotX { _bagad := &CT_RotX{}; return _bagad }

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_geccg *CT_OfPieChart) ValidateWithPath(path string) error {
	if _afece := _geccg.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _afece != nil {
		return _afece
	}
	if _geccg.VaryColors != nil {
		if _bbebg := _geccg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bbebg != nil {
			return _bbebg
		}
	}
	for _dedef, _baeb := range _geccg.Ser {
		if _fcdb := _baeb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dedef)); _fcdb != nil {
			return _fcdb
		}
	}
	if _geccg.DLbls != nil {
		if _ggda := _geccg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ggda != nil {
			return _ggda
		}
	}
	if _geccg.GapWidth != nil {
		if _cgdd := _geccg.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _cgdd != nil {
			return _cgdd
		}
	}
	if _geccg.SplitType != nil {
		if _ggaec := _geccg.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _ggaec != nil {
			return _ggaec
		}
	}
	if _geccg.SplitPos != nil {
		if _dcage := _geccg.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _dcage != nil {
			return _dcage
		}
	}
	if _geccg.CustSplit != nil {
		if _cdgdc := _geccg.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _cdgdc != nil {
			return _cdgdc
		}
	}
	if _geccg.SecondPieSize != nil {
		if _faeda := _geccg.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _faeda != nil {
			return _faeda
		}
	}
	for _gfba, _bfcdcb := range _geccg.SerLines {
		if _cggg := _bfcdcb.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _gfba)); _cggg != nil {
			return _cggg
		}
	}
	if _geccg.ExtLst != nil {
		if _ccga := _geccg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccga != nil {
			return _ccga
		}
	}
	return nil
}

// Validate validates the CT_TimeUnit and its children
func (_egefe *CT_TimeUnit) Validate() error {
	return _egefe.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}

// Validate validates the EG_SerShared and its children
func (_edfga *EG_SerShared) Validate() error {
	return _edfga.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_LblAlgn struct{ ValAttr ST_LblAlgn }

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_ggabd *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_gaee *Group_DLbls) ValidateWithPath(path string) error {
	if _gaee.NumFmt != nil {
		if _aadae := _gaee.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aadae != nil {
			return _aadae
		}
	}
	if _gaee.SpPr != nil {
		if _aacaa := _gaee.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aacaa != nil {
			return _aacaa
		}
	}
	if _gaee.TxPr != nil {
		if _gedgc := _gaee.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gedgc != nil {
			return _gedgc
		}
	}
	if _gaee.DLblPos != nil {
		if _acdea := _gaee.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _acdea != nil {
			return _acdea
		}
	}
	if _gaee.ShowLegendKey != nil {
		if _ebdec := _gaee.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _ebdec != nil {
			return _ebdec
		}
	}
	if _gaee.ShowVal != nil {
		if _affeg := _gaee.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _affeg != nil {
			return _affeg
		}
	}
	if _gaee.ShowCatName != nil {
		if _cfcf := _gaee.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _cfcf != nil {
			return _cfcf
		}
	}
	if _gaee.ShowSerName != nil {
		if _fdfbbb := _gaee.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _fdfbbb != nil {
			return _fdfbbb
		}
	}
	if _gaee.ShowPercent != nil {
		if _fagf := _gaee.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fagf != nil {
			return _fagf
		}
	}
	if _gaee.ShowBubbleSize != nil {
		if _agedd := _gaee.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _agedd != nil {
			return _agedd
		}
	}
	if _gaee.ShowLeaderLines != nil {
		if _ddae := _gaee.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _ddae != nil {
			return _ddae
		}
	}
	if _gaee.LeaderLines != nil {
		if _cfbgd := _gaee.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _cfbgd != nil {
			return _cfbgd
		}
	}
	return nil
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_egae *CT_AxDataSourceChoice) Validate() error {
	return _egae.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}
func (_aaff *CT_PictureFormat) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cafca, _bdbcd := _aaff.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _bdbcd != nil {
		return _bdbcd
	}
	start.Attr = append(start.Attr, _cafca)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_f.CT_TextBody
}

func NewCT_TickMark() *CT_TickMark { _eecda := &CT_TickMark{}; return _eecda }

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_cbcbc *CT_Perspective) ValidateWithPath(path string) error {
	if _cbcbc.ValAttr != nil {
		if *_cbcbc.ValAttr < 0 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_cbcbc.ValAttr)
		}
		if *_cbcbc.ValAttr > 240 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_cbcbc.ValAttr)
		}
	}
	return nil
}
func (_egf *CT_Boolean) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _egf.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_egf.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebfdb *ST_TrendlineType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ebfdb = 0
	case "\u0065\u0078\u0070":
		*_ebfdb = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_ebfdb = 2
	case "\u006c\u006f\u0067":
		*_ebfdb = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_ebfdb = 4
	case "\u0070\u006f\u006c\u0079":
		*_ebfdb = 5
	case "\u0070\u006f\u0077e\u0072":
		*_ebfdb = 6
	}
	return nil
}

// Validate validates the CT_ErrBars and its children
func (_fgbe *CT_ErrBars) Validate() error {
	return _fgbe.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}
func (_gdade *ST_Crosses) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gdade = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_gdade = 1
	case "\u006d\u0061\u0078":
		*_gdade = 2
	case "\u006d\u0069\u006e":
		*_gdade = 3
	}
	return nil
}

type CT_Overlap struct{ ValAttr *ST_Overlap }

func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_fcagb, _acgae := _bd.ParseUint(s, 10, 16)
	if _acgae != nil {
		return ST_GapAmount{}, _acgae
	}
	_gfbfg := uint16(_fcagb)
	return ST_GapAmount{ST_GapAmountUShort: &_gfbfg}, nil
}
func NewCT_ErrBarType() *CT_ErrBarType { _fccc := &CT_ErrBarType{}; return _fccc }
func (_edcea *CT_SizeRepresents) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _edcea.ValAttr != ST_SizeRepresentsUnset {
		_dccdg, _gcacd := _edcea.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gcacd != nil {
			return _gcacd
		}
		start.Attr = append(start.Attr, _dccdg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bebgg *ST_RadarStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bebgg = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_bebgg = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_bebgg = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_bebgg = 3
	}
	return nil
}

// Validate validates the CT_Layout and its children
func (_fdbb *CT_Layout) Validate() error {
	return _fdbb.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}
func NewCT_PictureFormat() *CT_PictureFormat {
	_afdgc := &CT_PictureFormat{}
	_afdgc.ValAttr = ST_PictureFormat(1)
	return _afdgc
}

// Validate validates the CT_LegendPos and its children
func (_gedc *CT_LegendPos) Validate() error {
	return _gedc.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}

type CT_Tx struct{ Choice *CT_TxChoice }

func (_fdbee *CT_OfPieType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ggbaf := range start.Attr {
		if _ggbaf.Name.Local == "\u0076\u0061\u006c" {
			_fdbee.ValAttr.UnmarshalXMLAttr(_ggbaf)
			continue
		}
	}
	for {
		_fcde, _aafbe := d.Token()
		if _aafbe != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _aafbe)
		}
		if _bcef, _ebedg := _fcde.(_b.EndElement); _ebedg && _bcef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_efecca ST_BarDir) ValidateWithPath(path string) error {
	switch _efecca {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efecca))
	}
	return nil
}

// Validate validates the EG_AxSharedChoice and its children
func (_gcefg *EG_AxSharedChoice) Validate() error {
	return _gcefg.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_Trendline and its children
func (_degdc *CT_Trendline) Validate() error {
	return _degdc.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}

type CT_SplitType struct{ ValAttr ST_SplitType }

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

type CT_SurfaceChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

// Validate validates the CT_Period and its children
func (_aegdc *CT_Period) Validate() error {
	return _aegdc.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}
func NewCT_Surface() *CT_Surface { _fgdbg := &CT_Surface{}; return _fgdbg }
func (_fbcgg ST_BarDir) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dbafa := _b.Attr{}
	_dbafa.Name = name
	switch _fbcgg {
	case ST_BarDirUnset:
		_dbafa.Value = ""
	case ST_BarDirBar:
		_dbafa.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_dbafa.Value = "\u0063\u006f\u006c"
	}
	return _dbafa, nil
}

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_bcdg *CT_Overlap) ValidateWithPath(path string) error {
	if _bcdg.ValAttr != nil {
		if _aeef := _bcdg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aeef != nil {
			return _aeef
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_cbeb *CT_LineChart) ValidateWithPath(path string) error {
	if _acccg := _cbeb.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _acccg != nil {
		return _acccg
	}
	if _cbeb.VaryColors != nil {
		if _gdfe := _cbeb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gdfe != nil {
			return _gdfe
		}
	}
	for _abddd, _bfgdb := range _cbeb.Ser {
		if _cecg := _bfgdb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _abddd)); _cecg != nil {
			return _cecg
		}
	}
	if _cbeb.DLbls != nil {
		if _dcdae := _cbeb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dcdae != nil {
			return _dcdae
		}
	}
	if _cbeb.DropLines != nil {
		if _geca := _cbeb.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _geca != nil {
			return _geca
		}
	}
	if _cbeb.HiLowLines != nil {
		if _cffb := _cbeb.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _cffb != nil {
			return _cffb
		}
	}
	if _cbeb.UpDownBars != nil {
		if _faabf := _cbeb.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _faabf != nil {
			return _faabf
		}
	}
	if _cbeb.Marker != nil {
		if _ggbf := _cbeb.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _ggbf != nil {
			return _ggbf
		}
	}
	if _cbeb.Smooth != nil {
		if _bdefd := _cbeb.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _bdefd != nil {
			return _bdefd
		}
	}
	for _bacfa, _cafc := range _cbeb.AxId {
		if _fecc := _cafc.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bacfa)); _fecc != nil {
			return _fecc
		}
	}
	if _cbeb.ExtLst != nil {
		if _cgade := _cbeb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgade != nil {
			return _cgade
		}
	}
	return nil
}
func (_cddcf ST_DispBlanksAs) String() string {
	switch _cddcf {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}
func (_adbgf ST_Orientation) String() string {
	switch _adbgf {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}

// Validate validates the CT_DLblPos and its children
func (_fggg *CT_DLblPos) Validate() error {
	return _fggg.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}
func (_ddffd ST_SecondPieSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ddffd.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_b.CharData(*_ddffd.ST_SecondPieSizePercent))
	}
	if _ddffd.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_ddffd.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func NewCT_Protection() *CT_Protection { _degfff := &CT_Protection{}; return _degfff }

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_gegcg *CT_NumDataSource) ValidateWithPath(path string) error {
	if _acdd := _gegcg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _acdd != nil {
		return _acdd
	}
	return nil
}
func (_aeeff *ST_CrossBetween) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gfbeg, _effaa := d.Token()
	if _effaa != nil {
		return _effaa
	}
	if _acbdb, _ecbdd := _gfbeg.(_b.EndElement); _ecbdd && _acbdb.Name == start.Name {
		*_aeeff = 1
		return nil
	}
	if _baggb, _dfade := _gfbeg.(_b.CharData); !_dfade {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfbeg)
	} else {
		switch string(_baggb) {
		case "":
			*_aeeff = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_aeeff = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_aeeff = 2
		}
	}
	_gfbeg, _effaa = d.Token()
	if _effaa != nil {
		return _effaa
	}
	if _cgadb, _afcdf := _gfbeg.(_b.EndElement); _afcdf && _cgadb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfbeg)
}

var ST_HPercentWithSymbolPatternRe = _a.MustCompile(ST_HPercentWithSymbolPattern)

type CT_DTable struct {
	ShowHorzBorder *CT_Boolean
	ShowVertBorder *CT_Boolean
	ShowOutline    *CT_Boolean
	ShowKeys       *CT_Boolean
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	ExtLst         *CT_ExtensionList
}

// Validate validates the CT_ManualLayout and its children
func (_abdae *CT_ManualLayout) Validate() error {
	return _abdae.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}
func (_dcabd *ChartSpace) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcabd.CT_ChartSpace = *NewCT_ChartSpace()
_bbec:
	for {
		_bgbee, _dfbe := d.Token()
		if _dfbe != nil {
			return _dfbe
		}
		switch _cbfcg := _bgbee.(type) {
		case _b.StartElement:
			switch _cbfcg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_dcabd.Date1904 = NewCT_Boolean()
				if _eccdf := d.DecodeElement(_dcabd.Date1904, &_cbfcg); _eccdf != nil {
					return _eccdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_dcabd.Lang = NewCT_TextLanguageID()
				if _cdccd := d.DecodeElement(_dcabd.Lang, &_cbfcg); _cdccd != nil {
					return _cdccd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_dcabd.RoundedCorners = NewCT_Boolean()
				if _cdcde := d.DecodeElement(_dcabd.RoundedCorners, &_cbfcg); _cdcde != nil {
					return _cdcde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_dcabd.Style = NewCT_Style()
				if _egbgf := d.DecodeElement(_dcabd.Style, &_cbfcg); _egbgf != nil {
					return _egbgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_dcabd.ClrMapOvr = _f.NewCT_ColorMapping()
				if _eccaa := d.DecodeElement(_dcabd.ClrMapOvr, &_cbfcg); _eccaa != nil {
					return _eccaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_dcabd.PivotSource = NewCT_PivotSource()
				if _agda := d.DecodeElement(_dcabd.PivotSource, &_cbfcg); _agda != nil {
					return _agda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_dcabd.Protection = NewCT_Protection()
				if _baac := d.DecodeElement(_dcabd.Protection, &_cbfcg); _baac != nil {
					return _baac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _agecd := d.DecodeElement(_dcabd.Chart, &_cbfcg); _agecd != nil {
					return _agecd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dcabd.SpPr = _f.NewCT_ShapeProperties()
				if _fefad := d.DecodeElement(_dcabd.SpPr, &_cbfcg); _fefad != nil {
					return _fefad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dcabd.TxPr = _f.NewCT_TextBody()
				if _bcagb := d.DecodeElement(_dcabd.TxPr, &_cbfcg); _bcagb != nil {
					return _bcagb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_dcabd.ExternalData = NewCT_ExternalData()
				if _gfde := d.DecodeElement(_dcabd.ExternalData, &_cbfcg); _gfde != nil {
					return _gfde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_dcabd.PrintSettings = NewCT_PrintSettings()
				if _cfbdd := d.DecodeElement(_dcabd.PrintSettings, &_cbfcg); _cfbdd != nil {
					return _cfbdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_dcabd.UserShapes = NewCT_RelId()
				if _aafbf := d.DecodeElement(_dcabd.UserShapes, &_cbfcg); _aafbf != nil {
					return _aafbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcabd.ExtLst = NewCT_ExtensionList()
				if _aefa := d.DecodeElement(_dcabd.ExtLst, &_cbfcg); _aefa != nil {
					return _aefa
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _cbfcg.Name)
				if _eebacg := d.Skip(); _eebacg != nil {
					return _eebacg
				}
			}
		case _b.EndElement:
			break _bbec
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_HoleSize() *CT_HoleSize { _ggec := &CT_HoleSize{}; return _ggec }
func (_dadbd *ST_HoleSize) ValidateWithPath(path string) error {
	_cdebg := []string{}
	if _dadbd.ST_HoleSizePercent != nil {
		_cdebg = append(_cdebg, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _dadbd.ST_HoleSizeUByte != nil {
		_cdebg = append(_cdebg, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_cdebg) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cdebg)
	}
	return nil
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_dfeg *CT_TxChoice) ValidateWithPath(path string) error {
	if _dfeg.StrRef != nil {
		if _bggg := _dfeg.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _bggg != nil {
			return _bggg
		}
	}
	if _dfeg.Rich != nil {
		if _efdfb := _dfeg.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _efdfb != nil {
			return _efdfb
		}
	}
	return nil
}
func (_fbedg *EG_AxShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fbedg.AxId = NewCT_UnsignedInt()
	_fbedg.Scaling = NewCT_Scaling()
	_fbedg.AxPos = NewCT_AxPos()
	_fbedg.CrossAx = NewCT_UnsignedInt()
_fadef:
	for {
		_eefec, _bbbg := d.Token()
		if _bbbg != nil {
			return _bbbg
		}
		switch _ddfdac := _eefec.(type) {
		case _b.StartElement:
			switch _ddfdac.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _cbcd := d.DecodeElement(_fbedg.AxId, &_ddfdac); _cbcd != nil {
					return _cbcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _fggeb := d.DecodeElement(_fbedg.Scaling, &_ddfdac); _fggeb != nil {
					return _fggeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fbedg.Delete = NewCT_Boolean()
				if _gdefec := d.DecodeElement(_fbedg.Delete, &_ddfdac); _gdefec != nil {
					return _gdefec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ggff := d.DecodeElement(_fbedg.AxPos, &_ddfdac); _ggff != nil {
					return _ggff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fbedg.MajorGridlines = NewCT_ChartLines()
				if _bggcfd := d.DecodeElement(_fbedg.MajorGridlines, &_ddfdac); _bggcfd != nil {
					return _bggcfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fbedg.MinorGridlines = NewCT_ChartLines()
				if _egfab := d.DecodeElement(_fbedg.MinorGridlines, &_ddfdac); _egfab != nil {
					return _egfab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_fbedg.Title = NewCT_Title()
				if _gbeeb := d.DecodeElement(_fbedg.Title, &_ddfdac); _gbeeb != nil {
					return _gbeeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fbedg.NumFmt = NewCT_NumFmt()
				if _cfega := d.DecodeElement(_fbedg.NumFmt, &_ddfdac); _cfega != nil {
					return _cfega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fbedg.MajorTickMark = NewCT_TickMark()
				if _gddga := d.DecodeElement(_fbedg.MajorTickMark, &_ddfdac); _gddga != nil {
					return _gddga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fbedg.MinorTickMark = NewCT_TickMark()
				if _beef := d.DecodeElement(_fbedg.MinorTickMark, &_ddfdac); _beef != nil {
					return _beef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_fbedg.TickLblPos = NewCT_TickLblPos()
				if _agfca := d.DecodeElement(_fbedg.TickLblPos, &_ddfdac); _agfca != nil {
					return _agfca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbedg.SpPr = _f.NewCT_ShapeProperties()
				if _baged := d.DecodeElement(_fbedg.SpPr, &_ddfdac); _baged != nil {
					return _baged
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbedg.TxPr = _f.NewCT_TextBody()
				if _bdefg := d.DecodeElement(_fbedg.TxPr, &_ddfdac); _bdefg != nil {
					return _bdefg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _gbbabc := d.DecodeElement(_fbedg.CrossAx, &_ddfdac); _gbbabc != nil {
					return _gbbabc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_fbedg.Choice = NewEG_AxSharedChoice()
				if _dcdg := d.DecodeElement(&_fbedg.Choice.Crosses, &_ddfdac); _dcdg != nil {
					return _dcdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_fbedg.Choice = NewEG_AxSharedChoice()
				if _bbdgea := d.DecodeElement(&_fbedg.Choice.CrossesAt, &_ddfdac); _bbdgea != nil {
					return _bbdgea
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _ddfdac.Name)
				if _cgdf := d.Skip(); _cgdf != nil {
					return _cgdf
				}
			}
		case _b.EndElement:
			break _fadef
		case _b.CharData:
		}
	}
	return nil
}
func (_gded *CT_MarkerStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_agddb, _eebf := _gded.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _eebf != nil {
		return _eebf
	}
	start.Attr = append(start.Attr, _agddb)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_ExtensionList() *CT_ExtensionList { _gbbcb := &CT_ExtensionList{}; return _gbbcb }

type CT_PieSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Explosion *CT_UnsignedInt
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	ExtLst    *CT_ExtensionList
}

func (_edeec *EG_DLblShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_baegd:
	for {
		_gabeg, _fadfgd := d.Token()
		if _fadfgd != nil {
			return _fadfgd
		}
		switch _ddfec := _gabeg.(type) {
		case _b.StartElement:
			switch _ddfec.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_edeec.NumFmt = NewCT_NumFmt()
				if _aaddf := d.DecodeElement(_edeec.NumFmt, &_ddfec); _aaddf != nil {
					return _aaddf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edeec.SpPr = _f.NewCT_ShapeProperties()
				if _gcbb := d.DecodeElement(_edeec.SpPr, &_ddfec); _gcbb != nil {
					return _gcbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_edeec.TxPr = _f.NewCT_TextBody()
				if _ffeagd := d.DecodeElement(_edeec.TxPr, &_ddfec); _ffeagd != nil {
					return _ffeagd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_edeec.DLblPos = NewCT_DLblPos()
				if _gebg := d.DecodeElement(_edeec.DLblPos, &_ddfec); _gebg != nil {
					return _gebg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_edeec.ShowLegendKey = NewCT_Boolean()
				if _dbefc := d.DecodeElement(_edeec.ShowLegendKey, &_ddfec); _dbefc != nil {
					return _dbefc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_edeec.ShowVal = NewCT_Boolean()
				if _bdbdc := d.DecodeElement(_edeec.ShowVal, &_ddfec); _bdbdc != nil {
					return _bdbdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_edeec.ShowCatName = NewCT_Boolean()
				if _gccca := d.DecodeElement(_edeec.ShowCatName, &_ddfec); _gccca != nil {
					return _gccca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_edeec.ShowSerName = NewCT_Boolean()
				if _cfccf := d.DecodeElement(_edeec.ShowSerName, &_ddfec); _cfccf != nil {
					return _cfccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_edeec.ShowPercent = NewCT_Boolean()
				if _cbega := d.DecodeElement(_edeec.ShowPercent, &_ddfec); _cbega != nil {
					return _cbega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_edeec.ShowBubbleSize = NewCT_Boolean()
				if _afcaba := d.DecodeElement(_edeec.ShowBubbleSize, &_ddfec); _afcaba != nil {
					return _afcaba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_edeec.Separator = new(string)
				if _degagd := d.DecodeElement(_edeec.Separator, &_ddfec); _degagd != nil {
					return _degagd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _ddfec.Name)
				if _dcdc := d.Skip(); _dcdc != nil {
					return _dcdc
				}
			}
		case _b.EndElement:
			break _baegd
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_UpDownBar() *CT_UpDownBar { _bbggf := &CT_UpDownBar{}; return _bbggf }
func (_fceee *EG_AxSharedChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fceee.Crosses != nil {
		_dabec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_fceee.Crosses, _dabec)
	}
	if _fceee.CrossesAt != nil {
		_gcdgf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_fceee.CrossesAt, _gcdgf)
	}
	return nil
}

// Validate validates the CT_RelId and its children
func (_ggeb *CT_RelId) Validate() error {
	return _ggeb.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}

func (_egfbb ST_AxPos) Validate() error { return _egfbb.ValidateWithPath("") }

const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

func (_dacfc *ST_ScatterStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dacfc = 0
	case "\u006e\u006f\u006e\u0065":
		*_dacfc = 1
	case "\u006c\u0069\u006e\u0065":
		*_dacfc = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_dacfc = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_dacfc = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_dacfc = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_dacfc = 6
	}
	return nil
}

type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt
	Lvl     []*CT_Lvl
	ExtLst  *CT_ExtensionList
}
type ST_TickMark byte

func (_fcdgf *CT_NumDataSourceChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_accbd:
	for {
		_dddbd, _cecga := d.Token()
		if _cecga != nil {
			return _cecga
		}
		switch _adee := _dddbd.(type) {
		case _b.StartElement:
			switch _adee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_fcdgf.NumRef = NewCT_NumRef()
				if _bedfa := d.DecodeElement(_fcdgf.NumRef, &_adee); _bedfa != nil {
					return _bedfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_fcdgf.NumLit = NewCT_NumData()
				if _cddbfd := d.DecodeElement(_fcdgf.NumLit, &_adee); _cddbfd != nil {
					return _cddbfd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _adee.Name)
				if _bbced := d.Skip(); _bbced != nil {
					return _bbced
				}
			}
		case _b.EndElement:
			break _accbd
		case _b.CharData:
		}
	}
	return nil
}

type ST_SizeRepresents byte

// Validate validates the CT_StockChart and its children
func (_gged *CT_StockChart) Validate() error {
	return _gged.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}
func (_bfge *CT_DispUnitsLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcda:
	for {
		_cacd, _ebcec := d.Token()
		if _ebcec != nil {
			return _ebcec
		}
		switch _caaa := _cacd.(type) {
		case _b.StartElement:
			switch _caaa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_bfge.Layout = NewCT_Layout()
				if _bfdf := d.DecodeElement(_bfge.Layout, &_caaa); _bfdf != nil {
					return _bfdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bfge.Tx = NewCT_Tx()
				if _ddcb := d.DecodeElement(_bfge.Tx, &_caaa); _ddcb != nil {
					return _ddcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bfge.SpPr = _f.NewCT_ShapeProperties()
				if _ggdb := d.DecodeElement(_bfge.SpPr, &_caaa); _ggdb != nil {
					return _ggdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bfge.TxPr = _f.NewCT_TextBody()
				if _faeg := d.DecodeElement(_bfge.TxPr, &_caaa); _faeg != nil {
					return _faeg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _caaa.Name)
				if _cbgf := d.Skip(); _cbgf != nil {
					return _cbgf
				}
			}
		case _b.EndElement:
			break _bcda
		case _b.CharData:
		}
	}
	return nil
}
func (_fbged *CT_ValAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fbged.AxId = NewCT_UnsignedInt()
	_fbged.Scaling = NewCT_Scaling()
	_fbged.AxPos = NewCT_AxPos()
	_fbged.CrossAx = NewCT_UnsignedInt()
_accdd:
	for {
		_dbeda, _baddg := d.Token()
		if _baddg != nil {
			return _baddg
		}
		switch _bffee := _dbeda.(type) {
		case _b.StartElement:
			switch _bffee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _bbgeae := d.DecodeElement(_fbged.AxId, &_bffee); _bbgeae != nil {
					return _bbgeae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _dgfg := d.DecodeElement(_fbged.Scaling, &_bffee); _dgfg != nil {
					return _dgfg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_fbged.Delete = NewCT_Boolean()
				if _efae := d.DecodeElement(_fbged.Delete, &_bffee); _efae != nil {
					return _efae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _gabgf := d.DecodeElement(_fbged.AxPos, &_bffee); _gabgf != nil {
					return _gabgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fbged.MajorGridlines = NewCT_ChartLines()
				if _bcdeg := d.DecodeElement(_fbged.MajorGridlines, &_bffee); _bcdeg != nil {
					return _bcdeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_fbged.MinorGridlines = NewCT_ChartLines()
				if _bcdaa := d.DecodeElement(_fbged.MinorGridlines, &_bffee); _bcdaa != nil {
					return _bcdaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_fbged.Title = NewCT_Title()
				if _egfdb := d.DecodeElement(_fbged.Title, &_bffee); _egfdb != nil {
					return _egfdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fbged.NumFmt = NewCT_NumFmt()
				if _cdeea := d.DecodeElement(_fbged.NumFmt, &_bffee); _cdeea != nil {
					return _cdeea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fbged.MajorTickMark = NewCT_TickMark()
				if _gdcf := d.DecodeElement(_fbged.MajorTickMark, &_bffee); _gdcf != nil {
					return _gdcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_fbged.MinorTickMark = NewCT_TickMark()
				if _aefcg := d.DecodeElement(_fbged.MinorTickMark, &_bffee); _aefcg != nil {
					return _aefcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_fbged.TickLblPos = NewCT_TickLblPos()
				if _eecddf := d.DecodeElement(_fbged.TickLblPos, &_bffee); _eecddf != nil {
					return _eecddf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbged.SpPr = _f.NewCT_ShapeProperties()
				if _egfdaa := d.DecodeElement(_fbged.SpPr, &_bffee); _egfdaa != nil {
					return _egfdaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbged.TxPr = _f.NewCT_TextBody()
				if _abedf := d.DecodeElement(_fbged.TxPr, &_bffee); _abedf != nil {
					return _abedf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _caeca := d.DecodeElement(_fbged.CrossAx, &_bffee); _caeca != nil {
					return _caeca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_fbged.Choice = NewEG_AxSharedChoice()
				if _fggge := d.DecodeElement(&_fbged.Choice.Crosses, &_bffee); _fggge != nil {
					return _fggge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_fbged.Choice = NewEG_AxSharedChoice()
				if _dbdgc := d.DecodeElement(&_fbged.Choice.CrossesAt, &_bffee); _dbdgc != nil {
					return _dbdgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_fbged.CrossBetween = NewCT_CrossBetween()
				if _fgcdg := d.DecodeElement(_fbged.CrossBetween, &_bffee); _fgcdg != nil {
					return _fgcdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_fbged.MajorUnit = NewCT_AxisUnit()
				if _egace := d.DecodeElement(_fbged.MajorUnit, &_bffee); _egace != nil {
					return _egace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_fbged.MinorUnit = NewCT_AxisUnit()
				if _fbbeg := d.DecodeElement(_fbged.MinorUnit, &_bffee); _fbbeg != nil {
					return _fbbeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_fbged.DispUnits = NewCT_DispUnits()
				if _fgffg := d.DecodeElement(_fbged.DispUnits, &_bffee); _fgffg != nil {
					return _fgffg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbged.ExtLst = NewCT_ExtensionList()
				if _cdddf := d.DecodeElement(_fbged.ExtLst, &_bffee); _cdddf != nil {
					return _cdddf
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _bffee.Name)
				if _ffgea := d.Skip(); _ffgea != nil {
					return _ffgea
				}
			}
		case _b.EndElement:
			break _accdd
		case _b.CharData:
		}
	}
	return nil
}
func (_aegdef *CT_UpDownBars) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dddca:
	for {
		_eaffg, _beegd := d.Token()
		if _beegd != nil {
			return _beegd
		}
		switch _dbfc := _eaffg.(type) {
		case _b.StartElement:
			switch _dbfc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_aegdef.GapWidth = NewCT_GapAmount()
				if _ceaad := d.DecodeElement(_aegdef.GapWidth, &_dbfc); _ceaad != nil {
					return _ceaad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_aegdef.UpBars = NewCT_UpDownBar()
				if _adbbd := d.DecodeElement(_aegdef.UpBars, &_dbfc); _adbbd != nil {
					return _adbbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_aegdef.DownBars = NewCT_UpDownBar()
				if _cdefe := d.DecodeElement(_aegdef.DownBars, &_dbfc); _cdefe != nil {
					return _cdefe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aegdef.ExtLst = NewCT_ExtensionList()
				if _ggbaef := d.DecodeElement(_aegdef.ExtLst, &_dbfc); _ggbaef != nil {
					return _ggbaef
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _dbfc.Name)
				if _gecae := d.Skip(); _gecae != nil {
					return _gecae
				}
			}
		case _b.EndElement:
			break _dddca
		case _b.CharData:
		}
	}
	return nil
}

type CT_UnsignedInt struct{ ValAttr uint32 }
type CT_MarkerSize struct{ ValAttr *uint8 }
type CT_TickLblPos struct{ ValAttr ST_TickLblPos }

// Validate validates the CT_Order and its children
func (_cefg *CT_Order) Validate() error {
	return _cefg.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}
func (_afcc *CT_NumRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_efgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_dc.AddPreserveSpaceAttr(&_efgf, _afcc.F)
	e.EncodeElement(_afcc.F, _efgf)
	if _afcc.NumCache != nil {
		_defeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_afcc.NumCache, _defeg)
	}
	if _afcc.ExtLst != nil {
		_gfdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afcc.ExtLst, _gfdf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_AxShared and its children
func (_ggdfg *EG_AxShared) Validate() error {
	return _ggdfg.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_faacbb ST_Grouping) String() string {
	switch _faacbb {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_efba *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _efba.Crosses != nil {
		if _ggged := _efba.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _ggged != nil {
			return _ggged
		}
	}
	if _efba.CrossesAt != nil {
		if _gbcc := _efba.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _gbcc != nil {
			return _gbcc
		}
	}
	return nil
}

// Validate validates the CT_DTable and its children
func (_bdeb *CT_DTable) Validate() error {
	return _bdeb.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}
func (_cfbbe *CT_View3D) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfbbe.RotX != nil {
		_affb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_cfbbe.RotX, _affb)
	}
	if _cfbbe.HPercent != nil {
		_ecbga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cfbbe.HPercent, _ecbga)
	}
	if _cfbbe.RotY != nil {
		_eabad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_cfbbe.RotY, _eabad)
	}
	if _cfbbe.DepthPercent != nil {
		_gdgab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cfbbe.DepthPercent, _gdgab)
	}
	if _cfbbe.RAngAx != nil {
		_faaed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_cfbbe.RAngAx, _faaed)
	}
	if _cfbbe.Perspective != nil {
		_cfgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_cfbbe.Perspective, _cfgd)
	}
	if _cfbbe.ExtLst != nil {
		_bfadbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfbbe.ExtLst, _bfadbd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fbec *CT_ManualLayout) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cbfeb:
	for {
		_cagda, _aegde := d.Token()
		if _aegde != nil {
			return _aegde
		}
		switch _bdee := _cagda.(type) {
		case _b.StartElement:
			switch _bdee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_fbec.LayoutTarget = NewCT_LayoutTarget()
				if _dcdbe := d.DecodeElement(_fbec.LayoutTarget, &_bdee); _dcdbe != nil {
					return _dcdbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_fbec.XMode = NewCT_LayoutMode()
				if _dfgbg := d.DecodeElement(_fbec.XMode, &_bdee); _dfgbg != nil {
					return _dfgbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_fbec.YMode = NewCT_LayoutMode()
				if _cgcce := d.DecodeElement(_fbec.YMode, &_bdee); _cgcce != nil {
					return _cgcce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_fbec.WMode = NewCT_LayoutMode()
				if _fffca := d.DecodeElement(_fbec.WMode, &_bdee); _fffca != nil {
					return _fffca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_fbec.HMode = NewCT_LayoutMode()
				if _dfgbgd := d.DecodeElement(_fbec.HMode, &_bdee); _dfgbgd != nil {
					return _dfgbgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_fbec.X = NewCT_Double()
				if _egbg := d.DecodeElement(_fbec.X, &_bdee); _egbg != nil {
					return _egbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_fbec.Y = NewCT_Double()
				if _dfac := d.DecodeElement(_fbec.Y, &_bdee); _dfac != nil {
					return _dfac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_fbec.W = NewCT_Double()
				if _gefcc := d.DecodeElement(_fbec.W, &_bdee); _gefcc != nil {
					return _gefcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_fbec.H = NewCT_Double()
				if _bbdb := d.DecodeElement(_fbec.H, &_bdee); _bbdb != nil {
					return _bbdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbec.ExtLst = NewCT_ExtensionList()
				if _afdg := d.DecodeElement(_fbec.ExtLst, &_bdee); _afdg != nil {
					return _afdg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _bdee.Name)
				if _gfgee := d.Skip(); _gfgee != nil {
					return _gfgee
				}
			}
		case _b.EndElement:
			break _cbfeb
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_MultiLvlStrData and its children
func (_fbbe *CT_MultiLvlStrData) Validate() error {
	return _fbbe.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}
func (_ccaa ST_TrendlineType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_ccaa.String(), start)
}

// Validate validates the CT_RadarChart and its children
func (_cbfgc *CT_RadarChart) Validate() error {
	return _cbfgc.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_cdabd *EG_PieChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cdabd.VaryColors != nil {
		_ebfef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cdabd.VaryColors, _ebfef)
	}
	if _cdabd.Ser != nil {
		_gffdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eaafe := range _cdabd.Ser {
			e.EncodeElement(_eaafe, _gffdf)
		}
	}
	if _cdabd.DLbls != nil {
		_ggaca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cdabd.DLbls, _ggaca)
	}
	return nil
}
func (_feedg ST_ErrBarType) Validate() error { return _feedg.ValidateWithPath("") }
func NewCT_UnsignedInt() *CT_UnsignedInt     { _acbbg := &CT_UnsignedInt{}; return _acbbg }
func (_ddaa *CT_SecondPieSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ddaa.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_ddaa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aad *CT_BubbleChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aad.VaryColors != nil {
		_cdff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_aad.VaryColors, _cdff)
	}
	if _aad.Ser != nil {
		_gfdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcdd := range _aad.Ser {
			e.EncodeElement(_gcdd, _gfdb)
		}
	}
	if _aad.DLbls != nil {
		_gdbc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aad.DLbls, _gdbc)
	}
	if _aad.Bubble3D != nil {
		_egce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_aad.Bubble3D, _egce)
	}
	if _aad.BubbleScale != nil {
		_adab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_aad.BubbleScale, _adab)
	}
	if _aad.ShowNegBubbles != nil {
		_dad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_aad.ShowNegBubbles, _dad)
	}
	if _aad.SizeRepresents != nil {
		_fbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_aad.SizeRepresents, _fbg)
	}
	_gdac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bdgc := range _aad.AxId {
		e.EncodeElement(_bdgc, _gdac)
	}
	if _aad.ExtLst != nil {
		_gaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aad.ExtLst, _gaa)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bgafb *ST_LayoutTarget) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcea, _ecfcd := d.Token()
	if _ecfcd != nil {
		return _ecfcd
	}
	if _fbga, _dadbc := _dcea.(_b.EndElement); _dadbc && _fbga.Name == start.Name {
		*_bgafb = 1
		return nil
	}
	if _gbfga, _ggabf := _dcea.(_b.CharData); !_ggabf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcea)
	} else {
		switch string(_gbfga) {
		case "":
			*_bgafb = 0
		case "\u0069\u006e\u006ee\u0072":
			*_bgafb = 1
		case "\u006f\u0075\u0074e\u0072":
			*_bgafb = 2
		}
	}
	_dcea, _ecfcd = d.Token()
	if _ecfcd != nil {
		return _ecfcd
	}
	if _gfbge, _facf := _dcea.(_b.EndElement); _facf && _gfbge.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcea)
}

// Validate validates the CT_StrData and its children
func (_eacdeb *CT_StrData) Validate() error {
	return _eacdeb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}
func (_bafea *ST_Orientation) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bafea = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_bafea = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_bafea = 2
	}
	return nil
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_fbaed *ChartSpace) ValidateWithPath(path string) error {
	if _cdege := _fbaed.CT_ChartSpace.ValidateWithPath(path); _cdege != nil {
		return _cdege
	}
	return nil
}
func NewGroup_DLbl() *Group_DLbl { _gfgbag := &Group_DLbl{}; return _gfgbag }
func (_ab *CT_Area3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_aaba:
	for {
		_ceb, _ef := d.Token()
		if _ef != nil {
			return _ef
		}
		switch _de := _ceb.(type) {
		case _b.StartElement:
			switch _de.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ab.Grouping = NewCT_Grouping()
				if _dce := d.DecodeElement(_ab.Grouping, &_de); _dce != nil {
					return _dce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ab.VaryColors = NewCT_Boolean()
				if _fde := d.DecodeElement(_ab.VaryColors, &_de); _fde != nil {
					return _fde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ga := NewCT_AreaSer()
				if _cc := d.DecodeElement(_ga, &_de); _cc != nil {
					return _cc
				}
				_ab.Ser = append(_ab.Ser, _ga)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ab.DLbls = NewCT_DLbls()
				if _bgf := d.DecodeElement(_ab.DLbls, &_de); _bgf != nil {
					return _bgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ab.DropLines = NewCT_ChartLines()
				if _cg := d.DecodeElement(_ab.DropLines, &_de); _cg != nil {
					return _cg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_ab.GapDepth = NewCT_GapAmount()
				if _bdb := d.DecodeElement(_ab.GapDepth, &_de); _bdb != nil {
					return _bdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fc := NewCT_UnsignedInt()
				if _ge := d.DecodeElement(_fc, &_de); _ge != nil {
					return _ge
				}
				_ab.AxId = append(_ab.AxId, _fc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ab.ExtLst = NewCT_ExtensionList()
				if _ccd := d.DecodeElement(_ab.ExtLst, &_de); _ccd != nil {
					return _ccd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _de.Name)
				if _fdc := d.Skip(); _fdc != nil {
					return _fdc
				}
			}
		case _b.EndElement:
			break _aaba
		case _b.CharData:
		}
	}
	return nil
}

var ST_OverlapPercentPatternRe = _a.MustCompile(ST_OverlapPercentPattern)

func NewCT_Overlap() *CT_Overlap { _eaba := &CT_Overlap{}; return _eaba }
func NewCT_BandFmt() *CT_BandFmt {
	_cfgc := &CT_BandFmt{}
	_cfgc.Idx = NewCT_UnsignedInt()
	return _cfgc
}
func NewCT_PivotFmts() *CT_PivotFmts { _eddab := &CT_PivotFmts{}; return _eddab }

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_abfa *CT_CustSplit) ValidateWithPath(path string) error {
	for _cdac, _fcebb := range _abfa.SecondPiePt {
		if _ecg := _fcebb.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _cdac)); _ecg != nil {
			return _ecg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_eccce *CT_View3D) ValidateWithPath(path string) error {
	if _eccce.RotX != nil {
		if _eaded := _eccce.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _eaded != nil {
			return _eaded
		}
	}
	if _eccce.HPercent != nil {
		if _abadbb := _eccce.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _abadbb != nil {
			return _abadbb
		}
	}
	if _eccce.RotY != nil {
		if _fgcbe := _eccce.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _fgcbe != nil {
			return _fgcbe
		}
	}
	if _eccce.DepthPercent != nil {
		if _abgbf := _eccce.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _abgbf != nil {
			return _abgbf
		}
	}
	if _eccce.RAngAx != nil {
		if _bcbb := _eccce.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _bcbb != nil {
			return _bcbb
		}
	}
	if _eccce.Perspective != nil {
		if _geegf := _eccce.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _geegf != nil {
			return _geegf
		}
	}
	if _eccce.ExtLst != nil {
		if _ddcac := _eccce.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddcac != nil {
			return _ddcac
		}
	}
	return nil
}
func (_ecad *CT_SizeRepresents) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _abadb := range start.Attr {
		if _abadb.Name.Local == "\u0076\u0061\u006c" {
			_ecad.ValAttr.UnmarshalXMLAttr(_abadb)
			continue
		}
	}
	for {
		_daded, _cfff := d.Token()
		if _cfff != nil {
			return _aa.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _cfff)
		}
		if _ddeed, _abgfa := _daded.(_b.EndElement); _abgfa && _ddeed.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggaaf *CT_Pie3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ggaaf.VaryColors != nil {
		_aebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ggaaf.VaryColors, _aebg)
	}
	if _ggaaf.Ser != nil {
		_cbdbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eeged := range _ggaaf.Ser {
			e.EncodeElement(_eeged, _cbdbf)
		}
	}
	if _ggaaf.DLbls != nil {
		_gbeg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ggaaf.DLbls, _gbeg)
	}
	if _ggaaf.ExtLst != nil {
		_ddcge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ggaaf.ExtLst, _ddcge)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fbfcg ST_DepthPercent) String() string {
	if _fbfcg.ST_DepthPercentWithSymbol != nil {
		return _aa.Sprintf("\u0025\u0076", *_fbfcg.ST_DepthPercentWithSymbol)
	}
	if _fbfcg.ST_DepthPercentUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_fbfcg.ST_DepthPercentUShort)
	}
	return ""
}
func _fedee(_bbdc bool) uint8 {
	if _bbdc {
		return 1
	}
	return 0
}

var ST_LblOffsetPercentPatternRe = _a.MustCompile(ST_LblOffsetPercentPattern)

func (_abccg *CT_MultiLvlStrData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _abccg.PtCount != nil {
		_babfc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_abccg.PtCount, _babfc)
	}
	if _abccg.Lvl != nil {
		_eded := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _begc := range _abccg.Lvl {
			e.EncodeElement(_begc, _eded)
		}
	}
	if _abccg.ExtLst != nil {
		_abgcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abccg.ExtLst, _abgcf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_daeda *ST_OfPieType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_daeda = 0
	case "\u0070\u0069\u0065":
		*_daeda = 1
	case "\u0062\u0061\u0072":
		*_daeda = 2
	}
	return nil
}
func (_bffgg *CT_PlotAreaChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bffgg.AreaChart != nil {
		_gcded := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.AreaChart, _gcded)
	}
	if _bffgg.Area3DChart != nil {
		_aada := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.Area3DChart, _aada)
	}
	if _bffgg.LineChart != nil {
		_dccd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.LineChart, _dccd)
	}
	if _bffgg.Line3DChart != nil {
		_agef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.Line3DChart, _agef)
	}
	if _bffgg.StockChart != nil {
		_dcee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.StockChart, _dcee)
	}
	if _bffgg.RadarChart != nil {
		_gccad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.RadarChart, _gccad)
	}
	if _bffgg.ScatterChart != nil {
		_abfgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.ScatterChart, _abfgd)
	}
	if _bffgg.PieChart != nil {
		_agcbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.PieChart, _agcbg)
	}
	if _bffgg.Pie3DChart != nil {
		_eeae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.Pie3DChart, _eeae)
	}
	if _bffgg.DoughnutChart != nil {
		_fgefa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.DoughnutChart, _fgefa)
	}
	if _bffgg.BarChart != nil {
		_bdga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.BarChart, _bdga)
	}
	if _bffgg.Bar3DChart != nil {
		_edcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.Bar3DChart, _edcb)
	}
	if _bffgg.OfPieChart != nil {
		_deaed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.OfPieChart, _deaed)
	}
	if _bffgg.SurfaceChart != nil {
		_bdbdeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.SurfaceChart, _bdbdeg)
	}
	if _bffgg.Surface3DChart != nil {
		_ccfcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.Surface3DChart, _ccfcc)
	}
	if _bffgg.BubbleChart != nil {
		_fgdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_bffgg.BubbleChart, _fgdg)
	}
	return nil
}
func (_cafe *CT_UnsignedInt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _cafe.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebcca *ST_BarDir) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ebcca = 0
	case "\u0062\u0061\u0072":
		*_ebcca = 1
	case "\u0063\u006f\u006c":
		*_ebcca = 2
	}
	return nil
}
func (_dgafg ST_MarkerStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dgafg.String(), start)
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_ffdcf *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _ffdcf.Grouping != nil {
		if _cfddd := _ffdcf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _cfddd != nil {
			return _cfddd
		}
	}
	if _ffdcf.VaryColors != nil {
		if _cdfbc := _ffdcf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cdfbc != nil {
			return _cdfbc
		}
	}
	for _bgedf, _dbgca := range _ffdcf.Ser {
		if _feffb := _dbgca.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bgedf)); _feffb != nil {
			return _feffb
		}
	}
	if _ffdcf.DLbls != nil {
		if _adgbb := _ffdcf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _adgbb != nil {
			return _adgbb
		}
	}
	if _ffdcf.DropLines != nil {
		if _fdfcce := _ffdcf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _fdfcce != nil {
			return _fdfcce
		}
	}
	return nil
}

// Validate validates the CT_Area3DChart and its children
func (_ff *CT_Area3DChart) Validate() error {
	return _ff.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_gfbc *CT_RadarSer) ValidateWithPath(path string) error {
	if _cgfe := _gfbc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cgfe != nil {
		return _cgfe
	}
	if _ceaa := _gfbc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ceaa != nil {
		return _ceaa
	}
	if _gfbc.Tx != nil {
		if _edee := _gfbc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _edee != nil {
			return _edee
		}
	}
	if _gfbc.SpPr != nil {
		if _cdabe := _gfbc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cdabe != nil {
			return _cdabe
		}
	}
	if _gfbc.Marker != nil {
		if _agffa := _gfbc.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _agffa != nil {
			return _agffa
		}
	}
	for _bccgb, _cceae := range _gfbc.DPt {
		if _cfce := _cceae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _bccgb)); _cfce != nil {
			return _cfce
		}
	}
	if _gfbc.DLbls != nil {
		if _faag := _gfbc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _faag != nil {
			return _faag
		}
	}
	if _gfbc.Cat != nil {
		if _afbe := _gfbc.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _afbe != nil {
			return _afbe
		}
	}
	if _gfbc.Val != nil {
		if _fdgce := _gfbc.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fdgce != nil {
			return _fdgce
		}
	}
	if _gfbc.ExtLst != nil {
		if _adgdf := _gfbc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adgdf != nil {
			return _adgdf
		}
	}
	return nil
}
func NewCT_PivotSource() *CT_PivotSource {
	_gfffg := &CT_PivotSource{}
	_gfffg.FmtId = NewCT_UnsignedInt()
	return _gfffg
}
func (_cbbb *CT_TickMark) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _daae := range start.Attr {
		if _daae.Name.Local == "\u0076\u0061\u006c" {
			_cbbb.ValAttr.UnmarshalXMLAttr(_daae)
			continue
		}
	}
	for {
		_cbfbe, _bbdge := d.Token()
		if _bbdge != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _bbdge)
		}
		if _gcffd, _bdbfb := _cbfbe.(_b.EndElement); _bdbfb && _gcffd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_bddc *CT_Lvl) ValidateWithPath(path string) error {
	for _aaef, _eagg := range _bddc.Pt {
		if _fadga := _eagg.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _aaef)); _fadga != nil {
			return _fadga
		}
	}
	return nil
}
func (_cbf *CT_AxDataSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cbf.Choice = NewCT_AxDataSourceChoice()
_aeba:
	for {
		_dac, _cbb := d.Token()
		if _cbb != nil {
			return _cbb
		}
		switch _cee := _dac.(type) {
		case _b.StartElement:
			switch _cee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_cbf.Choice = NewCT_AxDataSourceChoice()
				if _cag := d.DecodeElement(&_cbf.Choice.MultiLvlStrRef, &_cee); _cag != nil {
					return _cag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_cbf.Choice = NewCT_AxDataSourceChoice()
				if _adag := d.DecodeElement(&_cbf.Choice.NumRef, &_cee); _adag != nil {
					return _adag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_cbf.Choice = NewCT_AxDataSourceChoice()
				if _dgf := d.DecodeElement(&_cbf.Choice.NumLit, &_cee); _dgf != nil {
					return _dgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cbf.Choice = NewCT_AxDataSourceChoice()
				if _dfde := d.DecodeElement(&_cbf.Choice.StrRef, &_cee); _dfde != nil {
					return _dfde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_cbf.Choice = NewCT_AxDataSourceChoice()
				if _daa := d.DecodeElement(&_cbf.Choice.StrLit, &_cee); _daa != nil {
					return _daa
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _cee.Name)
				if _bdc := d.Skip(); _bdc != nil {
					return _bdc
				}
			}
		case _b.EndElement:
			break _aeba
		case _b.CharData:
		}
	}
	return nil
}

type CT_PlotAreaChoice1 struct {
	ValAx  []*CT_ValAx
	CatAx  []*CT_CatAx
	DateAx []*CT_DateAx
	SerAx  []*CT_SerAx
}

func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_fcfef, _ffbf := _bd.ParseUint(s, 10, 32)
	if _ffbf != nil {
		return ST_BubbleScale{}, _ffbf
	}
	_debgc := uint32(_fcfef)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_debgc}, nil
}

// Validate validates the CT_LegendEntry and its children
func (_deeb *CT_LegendEntry) Validate() error {
	return _deeb.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_eaeb *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _cdd := _eaeb.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _cdd != nil {
		return _cdd
	}
	if _eaeb.Grouping != nil {
		if _fbfe := _eaeb.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _fbfe != nil {
			return _fbfe
		}
	}
	if _eaeb.VaryColors != nil {
		if _ggf := _eaeb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ggf != nil {
			return _ggf
		}
	}
	for _bea, _eeag := range _eaeb.Ser {
		if _gec := _eeag.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bea)); _gec != nil {
			return _gec
		}
	}
	if _eaeb.DLbls != nil {
		if _beb := _eaeb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _beb != nil {
			return _beb
		}
	}
	if _eaeb.GapWidth != nil {
		if _dgc := _eaeb.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _dgc != nil {
			return _dgc
		}
	}
	if _eaeb.GapDepth != nil {
		if _abbd := _eaeb.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _abbd != nil {
			return _abbd
		}
	}
	if _eaeb.Shape != nil {
		if _cfdg := _eaeb.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _cfdg != nil {
			return _cfdg
		}
	}
	for _addf, _febf := range _eaeb.AxId {
		if _fffa := _febf.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _addf)); _fffa != nil {
			return _fffa
		}
	}
	if _eaeb.ExtLst != nil {
		if _dafd := _eaeb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dafd != nil {
			return _dafd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_gccd *CT_PivotSource) ValidateWithPath(path string) error {
	if _dadd := _gccd.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _dadd != nil {
		return _dadd
	}
	for _cefec, _adgb := range _gccd.ExtLst {
		if _dddbg := _adgb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cefec)); _dddbg != nil {
			return _dddbg
		}
	}
	return nil
}

// Validate validates the CT_Style and its children
func (_ggagb *CT_Style) Validate() error {
	return _ggagb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}

type Group_DLbls struct {
	NumFmt          *CT_NumFmt
	SpPr            *_f.CT_ShapeProperties
	TxPr            *_f.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}
type CT_View3D struct {
	RotX         *CT_RotX
	HPercent     *CT_HPercent
	RotY         *CT_RotY
	DepthPercent *CT_DepthPercent
	RAngAx       *CT_Boolean
	Perspective  *CT_Perspective
	ExtLst       *CT_ExtensionList
}

// Validate validates the CT_Orientation and its children
func (_eccd *CT_Orientation) Validate() error {
	return _eccd.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}
func (_eaefe *EG_AxSharedChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_acaga:
	for {
		_beec, _accf := d.Token()
		if _accf != nil {
			return _accf
		}
		switch _ebcda := _beec.(type) {
		case _b.StartElement:
			switch _ebcda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_eaefe.Crosses = NewCT_Crosses()
				if _bbee := d.DecodeElement(_eaefe.Crosses, &_ebcda); _bbee != nil {
					return _bbee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_eaefe.CrossesAt = NewCT_Double()
				if _egecb := d.DecodeElement(_eaefe.CrossesAt, &_ebcda); _egecb != nil {
					return _egecb
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ebcda.Name)
				if _acfgb := d.Skip(); _acfgb != nil {
					return _acfgb
				}
			}
		case _b.EndElement:
			break _acaga
		case _b.CharData:
		}
	}
	return nil
}

type CT_LayoutMode struct{ ValAttr ST_LayoutMode }

func (_gcdbfa *CT_Thickness) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _abcef := range start.Attr {
		if _abcef.Name.Local == "\u0076\u0061\u006c" {
			_fffe, _eefag := ParseUnionST_Thickness(_abcef.Value)
			if _eefag != nil {
				return _eefag
			}
			_gcdbfa.ValAttr = _fffe
			continue
		}
	}
	for {
		_dafe, _gedaf := d.Token()
		if _gedaf != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _gedaf)
		}
		if _edgdc, _ddgfa := _dafe.(_b.EndElement); _ddgfa && _edgdc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_effae *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _effae.MultiLvlStrCache != nil {
		if _fcdgg := _effae.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _fcdgg != nil {
			return _fcdgg
		}
	}
	if _effae.ExtLst != nil {
		if _gbee := _effae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbee != nil {
			return _gbee
		}
	}
	return nil
}

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_efddab *EG_SerShared) ValidateWithPath(path string) error {
	if _faaeb := _efddab.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _faaeb != nil {
		return _faaeb
	}
	if _ecdcc := _efddab.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ecdcc != nil {
		return _ecdcc
	}
	if _efddab.Tx != nil {
		if _egbb := _efddab.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _egbb != nil {
			return _egbb
		}
	}
	if _efddab.SpPr != nil {
		if _fgga := _efddab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fgga != nil {
			return _fgga
		}
	}
	return nil
}

// Validate validates the CT_TxChoice and its children
func (_cgbegb *CT_TxChoice) Validate() error {
	return _cgbegb.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_ExtensionList and its children
func (_dddb *CT_ExtensionList) Validate() error {
	return _dddb.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}
func NewCT_BubbleScale() *CT_BubbleScale { _bcd := &CT_BubbleScale{}; return _bcd }
func (_eaaeb ST_TimeUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_eaaeb.String(), start)
}
func (_dfbag ST_Shape) ValidateWithPath(path string) error {
	switch _dfbag {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfbag))
	}
	return nil
}
func (_cgbeg *CT_StrRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ecaa:
	for {
		_ddeb, _dbeg := d.Token()
		if _dbeg != nil {
			return _dbeg
		}
		switch _befd := _ddeb.(type) {
		case _b.StartElement:
			switch _befd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _dddcf := d.DecodeElement(&_cgbeg.F, &_befd); _dddcf != nil {
					return _dddcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_cgbeg.StrCache = NewCT_StrData()
				if _eebed := d.DecodeElement(_cgbeg.StrCache, &_befd); _eebed != nil {
					return _eebed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgbeg.ExtLst = NewCT_ExtensionList()
				if _cfee := d.DecodeElement(_cgbeg.ExtLst, &_befd); _cfee != nil {
					return _cfee
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _befd.Name)
				if _agaa := d.Skip(); _agaa != nil {
					return _agaa
				}
			}
		case _b.EndElement:
			break _ecaa
		case _b.CharData:
		}
	}
	return nil
}
func (_cbbdd *CT_StockChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_abfbd:
	for {
		_ecea, _egaac := d.Token()
		if _egaac != nil {
			return _egaac
		}
		switch _ebdedc := _ecea.(type) {
		case _b.StartElement:
			switch _ebdedc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ebggdb := NewCT_LineSer()
				if _fagba := d.DecodeElement(_ebggdb, &_ebdedc); _fagba != nil {
					return _fagba
				}
				_cbbdd.Ser = append(_cbbdd.Ser, _ebggdb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbbdd.DLbls = NewCT_DLbls()
				if _deff := d.DecodeElement(_cbbdd.DLbls, &_ebdedc); _deff != nil {
					return _deff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cbbdd.DropLines = NewCT_ChartLines()
				if _gfgdea := d.DecodeElement(_cbbdd.DropLines, &_ebdedc); _gfgdea != nil {
					return _gfgdea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_cbbdd.HiLowLines = NewCT_ChartLines()
				if _gedb := d.DecodeElement(_cbbdd.HiLowLines, &_ebdedc); _gedb != nil {
					return _gedb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_cbbdd.UpDownBars = NewCT_UpDownBars()
				if _defaa := d.DecodeElement(_cbbdd.UpDownBars, &_ebdedc); _defaa != nil {
					return _defaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_acgef := NewCT_UnsignedInt()
				if _ggad := d.DecodeElement(_acgef, &_ebdedc); _ggad != nil {
					return _ggad
				}
				_cbbdd.AxId = append(_cbbdd.AxId, _acgef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbbdd.ExtLst = NewCT_ExtensionList()
				if _afdeb := d.DecodeElement(_cbbdd.ExtLst, &_ebdedc); _afdeb != nil {
					return _afdeb
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _ebdedc.Name)
				if _fbbg := d.Skip(); _fbbg != nil {
					return _fbbg
				}
			}
		case _b.EndElement:
			break _abfbd
		case _b.CharData:
		}
	}
	return nil
}

type CT_ScatterChart struct {
	ScatterStyle *CT_ScatterStyle
	VaryColors   *CT_Boolean
	Ser          []*CT_ScatterSer
	DLbls        *CT_DLbls
	AxId         []*CT_UnsignedInt
	ExtLst       *CT_ExtensionList
}

func NewCT_SerTxChoice() *CT_SerTxChoice { _efbcc := &CT_SerTxChoice{}; return _efbcc }

// Validate validates the EG_BarChartShared and its children
func (_ddcde *EG_BarChartShared) Validate() error {
	return _ddcde.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}
func NewCT_PieSer() *CT_PieSer {
	_ceccc := &CT_PieSer{}
	_ceccc.Idx = NewCT_UnsignedInt()
	_ceccc.Order = NewCT_UnsignedInt()
	return _ceccc
}
func (_ffgbb ST_ErrValType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bfagfd := _b.Attr{}
	_bfagfd.Name = name
	switch _ffgbb {
	case ST_ErrValTypeUnset:
		_bfagfd.Value = ""
	case ST_ErrValTypeCust:
		_bfagfd.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_bfagfd.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_bfagfd.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_bfagfd.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_bfagfd.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _bfagfd, nil
}

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_efebf *CT_RadarStyle) ValidateWithPath(path string) error {
	if _debgd := _efebf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _debgd != nil {
		return _debgd
	}
	return nil
}

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_bgfcg *CT_BarGrouping) ValidateWithPath(path string) error {
	if _bgdg := _bgfcg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bgdg != nil {
		return _bgdg
	}
	return nil
}
func (_bgcf *CT_BarSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ffb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bgcf.Idx, _ffb)
	_fadb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bgcf.Order, _fadb)
	if _bgcf.Tx != nil {
		_gdcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bgcf.Tx, _gdcc)
	}
	if _bgcf.SpPr != nil {
		_bab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bgcf.SpPr, _bab)
	}
	if _bgcf.InvertIfNegative != nil {
		_gcef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_bgcf.InvertIfNegative, _gcef)
	}
	if _bgcf.PictureOptions != nil {
		_fdgc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_bgcf.PictureOptions, _fdgc)
	}
	if _bgcf.DPt != nil {
		_cacc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _aec := range _bgcf.DPt {
			e.EncodeElement(_aec, _cacc)
		}
	}
	if _bgcf.DLbls != nil {
		_bdef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bgcf.DLbls, _bdef)
	}
	if _bgcf.Trendline != nil {
		_fbff := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _gdfa := range _bgcf.Trendline {
			e.EncodeElement(_gdfa, _fbff)
		}
	}
	if _bgcf.ErrBars != nil {
		_adef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_bgcf.ErrBars, _adef)
	}
	if _bgcf.Cat != nil {
		_cbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bgcf.Cat, _cbad)
	}
	if _bgcf.Val != nil {
		_aebb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bgcf.Val, _aebb)
	}
	if _bgcf.Shape != nil {
		_cbbd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_bgcf.Shape, _cbbd)
	}
	if _bgcf.ExtLst != nil {
		_efb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bgcf.ExtLst, _efb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gcgdc *UserShapes) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gcgdc.CT_Drawing = *_c.NewCT_Drawing()
	for {
		_ffbb, _daefd := d.Token()
		if _daefd != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _daefd)
		}
		if _badad, _aafbdg := _ffbb.(_b.EndElement); _aafbdg && _badad.Name == start.Name {
			break
		}
	}
	return nil
}
func (_becad ST_HoleSize) String() string {
	if _becad.ST_HoleSizePercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_becad.ST_HoleSizePercent)
	}
	if _becad.ST_HoleSizeUByte != nil {
		return _aa.Sprintf("\u0025\u0076", *_becad.ST_HoleSizeUByte)
	}
	return ""
}
func (_bcbae ST_PictureFormat) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fgbbb := _b.Attr{}
	_fgbbb.Name = name
	switch _bcbae {
	case ST_PictureFormatUnset:
		_fgbbb.Value = ""
	case ST_PictureFormatStretch:
		_fgbbb.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_fgbbb.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_fgbbb.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _fgbbb, nil
}

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_efgaa *CT_RadarChart) ValidateWithPath(path string) error {
	if _adaffb := _efgaa.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _adaffb != nil {
		return _adaffb
	}
	if _efgaa.VaryColors != nil {
		if _gadf := _efgaa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gadf != nil {
			return _gadf
		}
	}
	for _aceeb, _ccae := range _efgaa.Ser {
		if _gfdc := _ccae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aceeb)); _gfdc != nil {
			return _gfdc
		}
	}
	if _efgaa.DLbls != nil {
		if _feebc := _efgaa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _feebc != nil {
			return _feebc
		}
	}
	for _fbge, _ecdbg := range _efgaa.AxId {
		if _ecage := _ecdbg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fbge)); _ecage != nil {
			return _ecage
		}
	}
	if _efgaa.ExtLst != nil {
		if _ffgfb := _efgaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffgfb != nil {
			return _ffgfb
		}
	}
	return nil
}

// Validate validates the CT_PrintSettings and its children
func (_adgbe *CT_PrintSettings) Validate() error {
	return _adgbe.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

// Validate validates the CT_StrVal and its children
func (_affcf *CT_StrVal) Validate() error {
	return _affcf.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}
func (_deeg *CT_ScatterChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_deeg.ScatterStyle = NewCT_ScatterStyle()
_gdbge:
	for {
		_ddfe, _deaf := d.Token()
		if _deaf != nil {
			return _deaf
		}
		switch _defda := _ddfe.(type) {
		case _b.StartElement:
			switch _defda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _ggge := d.DecodeElement(_deeg.ScatterStyle, &_defda); _ggge != nil {
					return _ggge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_deeg.VaryColors = NewCT_Boolean()
				if _bcdga := d.DecodeElement(_deeg.VaryColors, &_defda); _bcdga != nil {
					return _bcdga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfbe := NewCT_ScatterSer()
				if _geage := d.DecodeElement(_bfbe, &_defda); _geage != nil {
					return _geage
				}
				_deeg.Ser = append(_deeg.Ser, _bfbe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_deeg.DLbls = NewCT_DLbls()
				if _accae := d.DecodeElement(_deeg.DLbls, &_defda); _accae != nil {
					return _accae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ffcef := NewCT_UnsignedInt()
				if _adbg := d.DecodeElement(_ffcef, &_defda); _adbg != nil {
					return _adbg
				}
				_deeg.AxId = append(_deeg.AxId, _ffcef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deeg.ExtLst = NewCT_ExtensionList()
				if _eebfgd := d.DecodeElement(_deeg.ExtLst, &_defda); _eebfgd != nil {
					return _eebfgd
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _defda.Name)
				if _eaab := d.Skip(); _eaab != nil {
					return _eaab
				}
			}
		case _b.EndElement:
			break _gdbge
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DispBlanksAs and its children
func (_abfgb *CT_DispBlanksAs) Validate() error {
	return _abfgb.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}

type CT_ManualLayout struct {
	LayoutTarget *CT_LayoutTarget
	XMode        *CT_LayoutMode
	YMode        *CT_LayoutMode
	WMode        *CT_LayoutMode
	HMode        *CT_LayoutMode
	X            *CT_Double
	Y            *CT_Double
	W            *CT_Double
	H            *CT_Double
	ExtLst       *CT_ExtensionList
}

func (_deaga *CT_ScatterSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_dbeff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_deaga.Idx, _dbeff)
	_fdacc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_deaga.Order, _fdacc)
	if _deaga.Tx != nil {
		_fcafae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_deaga.Tx, _fcafae)
	}
	if _deaga.SpPr != nil {
		_eaff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_deaga.SpPr, _eaff)
	}
	if _deaga.Marker != nil {
		_fdcbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_deaga.Marker, _fdcbb)
	}
	if _deaga.DPt != nil {
		_acfaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fcffc := range _deaga.DPt {
			e.EncodeElement(_fcffc, _acfaa)
		}
	}
	if _deaga.DLbls != nil {
		_afcab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_deaga.DLbls, _afcab)
	}
	if _deaga.Trendline != nil {
		_dcbcb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _gbea := range _deaga.Trendline {
			e.EncodeElement(_gbea, _dcbcb)
		}
	}
	if _deaga.ErrBars != nil {
		_abbfd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _dgge := range _deaga.ErrBars {
			e.EncodeElement(_dgge, _abbfd)
		}
	}
	if _deaga.XVal != nil {
		_gdggde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_deaga.XVal, _gdggde)
	}
	if _deaga.YVal != nil {
		_acad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_deaga.YVal, _acad)
	}
	if _deaga.Smooth != nil {
		_abfde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_deaga.Smooth, _abfde)
	}
	if _deaga.ExtLst != nil {
		_aaaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_deaga.ExtLst, _aaaf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_cde *CT_AreaSer) ValidateWithPath(path string) error {
	if _bef := _cde.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bef != nil {
		return _bef
	}
	if _ebb := _cde.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ebb != nil {
		return _ebb
	}
	if _cde.Tx != nil {
		if _aff := _cde.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _aff != nil {
			return _aff
		}
	}
	if _cde.SpPr != nil {
		if _fge := _cde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fge != nil {
			return _fge
		}
	}
	if _cde.PictureOptions != nil {
		if _ffdc := _cde.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _ffdc != nil {
			return _ffdc
		}
	}
	for _eac, _dfd := range _cde.DPt {
		if _aeee := _dfd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _eac)); _aeee != nil {
			return _aeee
		}
	}
	if _cde.DLbls != nil {
		if _gdg := _cde.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gdg != nil {
			return _gdg
		}
	}
	for _gdgb, _abc := range _cde.Trendline {
		if _geec := _abc.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _gdgb)); _geec != nil {
			return _geec
		}
	}
	for _geg, _eeb := range _cde.ErrBars {
		if _aca := _eeb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _geg)); _aca != nil {
			return _aca
		}
	}
	if _cde.Cat != nil {
		if _cce := _cde.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _cce != nil {
			return _cce
		}
	}
	if _cde.Val != nil {
		if _dd := _cde.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _dd != nil {
			return _dd
		}
	}
	if _cde.ExtLst != nil {
		if _gag := _cde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gag != nil {
			return _gag
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsChoice and its children
func (_dcbaf *CT_DispUnitsChoice) Validate() error {
	return _dcbaf.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}
func (_bfeaa *CT_Surface) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cceb:
	for {
		_gbfgc, _gfae := d.Token()
		if _gfae != nil {
			return _gfae
		}
		switch _gdaed := _gbfgc.(type) {
		case _b.StartElement:
			switch _gdaed.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_bfeaa.Thickness = NewCT_Thickness()
				if _ebag := d.DecodeElement(_bfeaa.Thickness, &_gdaed); _ebag != nil {
					return _ebag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bfeaa.SpPr = _f.NewCT_ShapeProperties()
				if _cbgg := d.DecodeElement(_bfeaa.SpPr, &_gdaed); _cbgg != nil {
					return _cbgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_bfeaa.PictureOptions = NewCT_PictureOptions()
				if _edfeg := d.DecodeElement(_bfeaa.PictureOptions, &_gdaed); _edfeg != nil {
					return _edfeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfeaa.ExtLst = NewCT_ExtensionList()
				if _eaee := d.DecodeElement(_bfeaa.ExtLst, &_gdaed); _eaee != nil {
					return _eaee
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _gdaed.Name)
				if _bagga := d.Skip(); _bagga != nil {
					return _bagga
				}
			}
		case _b.EndElement:
			break _cceb
		case _b.CharData:
		}
	}
	return nil
}

type CT_ScatterSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_f.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   []*CT_ErrBars
	XVal      *CT_AxDataSource
	YVal      *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}
type EG_BarChartShared struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
}

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_afade *CT_Skip) ValidateWithPath(path string) error {
	if _afade.ValAttr < 1 {
		return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _afade.ValAttr)
	}
	return nil
}

type CT_Layout struct {
	ManualLayout *CT_ManualLayout
	ExtLst       *CT_ExtensionList
}

func (_fabfc *CT_PlotAreaChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gdggd:
	for {
		_gbbgg, _afba := d.Token()
		if _afba != nil {
			return _afba
		}
		switch _ebded := _gbbgg.(type) {
		case _b.StartElement:
			switch _ebded.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_fabfc.AreaChart = NewCT_AreaChart()
				if _dgeg := d.DecodeElement(_fabfc.AreaChart, &_ebded); _dgeg != nil {
					return _dgeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.Area3DChart = NewCT_Area3DChart()
				if _aaea := d.DecodeElement(_fabfc.Area3DChart, &_ebded); _aaea != nil {
					return _aaea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_fabfc.LineChart = NewCT_LineChart()
				if _dada := d.DecodeElement(_fabfc.LineChart, &_ebded); _dada != nil {
					return _dada
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.Line3DChart = NewCT_Line3DChart()
				if _fabcg := d.DecodeElement(_fabfc.Line3DChart, &_ebded); _fabcg != nil {
					return _fabcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.StockChart = NewCT_StockChart()
				if _gegcge := d.DecodeElement(_fabfc.StockChart, &_ebded); _gegcge != nil {
					return _gegcge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.RadarChart = NewCT_RadarChart()
				if _fgab := d.DecodeElement(_fabfc.RadarChart, &_ebded); _fgab != nil {
					return _fgab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.ScatterChart = NewCT_ScatterChart()
				if _dgdc := d.DecodeElement(_fabfc.ScatterChart, &_ebded); _dgdc != nil {
					return _dgdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.PieChart = NewCT_PieChart()
				if _eaaad := d.DecodeElement(_fabfc.PieChart, &_ebded); _eaaad != nil {
					return _eaaad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.Pie3DChart = NewCT_Pie3DChart()
				if _fdedb := d.DecodeElement(_fabfc.Pie3DChart, &_ebded); _fdedb != nil {
					return _fdedb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.DoughnutChart = NewCT_DoughnutChart()
				if _fgbb := d.DecodeElement(_fabfc.DoughnutChart, &_ebded); _fgbb != nil {
					return _fgbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.BarChart = NewCT_BarChart()
				if _gcfb := d.DecodeElement(_fabfc.BarChart, &_ebded); _gcfb != nil {
					return _gcfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.Bar3DChart = NewCT_Bar3DChart()
				if _dggb := d.DecodeElement(_fabfc.Bar3DChart, &_ebded); _dggb != nil {
					return _dggb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.OfPieChart = NewCT_OfPieChart()
				if _feee := d.DecodeElement(_fabfc.OfPieChart, &_ebded); _feee != nil {
					return _feee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.SurfaceChart = NewCT_SurfaceChart()
				if _agbae := d.DecodeElement(_fabfc.SurfaceChart, &_ebded); _agbae != nil {
					return _agbae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_fabfc.Surface3DChart = NewCT_Surface3DChart()
				if _afbbf := d.DecodeElement(_fabfc.Surface3DChart, &_ebded); _afbbf != nil {
					return _afbbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_fabfc.BubbleChart = NewCT_BubbleChart()
				if _faeb := d.DecodeElement(_fabfc.BubbleChart, &_ebded); _faeb != nil {
					return _faeb
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ebded.Name)
				if _aedc := d.Skip(); _aedc != nil {
					return _aedc
				}
			}
		case _b.EndElement:
			break _gdggd
		case _b.CharData:
		}
	}
	return nil
}
func (_ccgd ST_DLblPos) Validate() error { return _ccgd.ValidateWithPath("") }
func NewCT_RelId() *CT_RelId             { _bggcf := &CT_RelId{}; return _bggcf }

// Validate validates the CT_TrendlineType and its children
func (_cfgae *CT_TrendlineType) Validate() error {
	return _cfgae.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}
func NewUserShapes() *UserShapes {
	_efbfc := &UserShapes{}
	_efbfc.CT_Drawing = *_c.NewCT_Drawing()
	return _efbfc
}

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_eabg *CT_HPercent) ValidateWithPath(path string) error {
	if _eabg.ValAttr != nil {
		if _gbdf := _eabg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbdf != nil {
			return _gbdf
		}
	}
	return nil
}

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_fdabd *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _fdabd.TxPr != nil {
		if _bdeefe := _fdabd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bdeefe != nil {
			return _bdeefe
		}
	}
	return nil
}
func (_fcd *CT_DTable) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fcd.ShowHorzBorder != nil {
		_cagf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_fcd.ShowHorzBorder, _cagf)
	}
	if _fcd.ShowVertBorder != nil {
		_adac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_fcd.ShowVertBorder, _adac)
	}
	if _fcd.ShowOutline != nil {
		_edbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_fcd.ShowOutline, _edbf)
	}
	if _fcd.ShowKeys != nil {
		_edgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_fcd.ShowKeys, _edgd)
	}
	if _fcd.SpPr != nil {
		_bdca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcd.SpPr, _bdca)
	}
	if _fcd.TxPr != nil {
		_bfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fcd.TxPr, _bfb)
	}
	if _fcd.ExtLst != nil {
		_ebgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcd.ExtLst, _ebgg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gbded *CT_NumDataSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gbded.Choice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_Grouping byte

func (_bfadbb ST_BarGrouping) String() string {
	switch _bfadbb {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

type ST_BarGrouping byte
type CT_NumVal struct {
	IdxAttr        uint32
	FormatCodeAttr *string
	V              string
}

func (_bcdca ST_Grouping) ValidateWithPath(path string) error {
	switch _bcdca {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcdca))
	}
	return nil
}
func NewCT_PlotArea() *CT_PlotArea { _cbff := &CT_PlotArea{}; return _cbff }
func (_agfb *CT_Surface3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gbcaa:
	for {
		_fgac, _bcde := d.Token()
		if _bcde != nil {
			return _bcde
		}
		switch _agfe := _fgac.(type) {
		case _b.StartElement:
			switch _agfe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_agfb.Wireframe = NewCT_Boolean()
				if _baaf := d.DecodeElement(_agfb.Wireframe, &_agfe); _baaf != nil {
					return _baaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fdaeg := NewCT_SurfaceSer()
				if _eabaa := d.DecodeElement(_fdaeg, &_agfe); _eabaa != nil {
					return _eabaa
				}
				_agfb.Ser = append(_agfb.Ser, _fdaeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_agfb.BandFmts = NewCT_BandFmts()
				if _gaafef := d.DecodeElement(_agfb.BandFmts, &_agfe); _gaafef != nil {
					return _gaafef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cgdca := NewCT_UnsignedInt()
				if _fageg := d.DecodeElement(_cgdca, &_agfe); _fageg != nil {
					return _fageg
				}
				_agfb.AxId = append(_agfb.AxId, _cgdca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agfb.ExtLst = NewCT_ExtensionList()
				if _gfgdeb := d.DecodeElement(_agfb.ExtLst, &_agfe); _gfgdeb != nil {
					return _gfgdeb
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _agfe.Name)
				if _cfgfe := d.Skip(); _cfgfe != nil {
					return _cfgfe
				}
			}
		case _b.EndElement:
			break _gbcaa
		case _b.CharData:
		}
	}
	return nil
}
func NewEG_AxSharedChoice() *EG_AxSharedChoice { _gbdd := &EG_AxSharedChoice{}; return _gbdd }
func (_eedde ST_ErrValType) String() string {
	switch _eedde {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}
func (_fcaa *CT_TickLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _daedb := range start.Attr {
		if _daedb.Name.Local == "\u0076\u0061\u006c" {
			_fcaa.ValAttr.UnmarshalXMLAttr(_daedb)
			continue
		}
	}
	for {
		_ebbfg, _bbaeef := d.Token()
		if _bbaeef != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _bbaeef)
		}
		if _ggdff, _gggaf := _ebbfg.(_b.EndElement); _gggaf && _ggdff.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dbec ST_BarGrouping) ValidateWithPath(path string) error {
	switch _dbec {
	case 0, 1, 2, 3, 4:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbec))
	}
	return nil
}
func NewCT_SurfaceSer() *CT_SurfaceSer {
	_eafd := &CT_SurfaceSer{}
	_eafd.Idx = NewCT_UnsignedInt()
	_eafd.Order = NewCT_UnsignedInt()
	return _eafd
}

// Validate validates the CT_OfPieChart and its children
func (_begcg *CT_OfPieChart) Validate() error {
	return _begcg.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_deba *CT_DispBlanksAs) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _deba.ValAttr != ST_DispBlanksAsUnset {
		_bdbaf, _bbeg := _deba.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bbeg != nil {
			return _bbeg
		}
		start.Attr = append(start.Attr, _bdbaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_beae *CT_PlotArea) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _beae.Layout != nil {
		_gbaad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_beae.Layout, _gbaad)
	}
	for _, _fcefb := range _beae.Choice {
		_fcefb.MarshalXML(e, _b.StartElement{})
	}
	if _beae.CChoice != nil {
		_beae.CChoice.MarshalXML(e, _b.StartElement{})
	}
	if _beae.DTable != nil {
		_gebd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_beae.DTable, _gebd)
	}
	if _beae.SpPr != nil {
		_aaeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_beae.SpPr, _aaeb)
	}
	if _beae.ExtLst != nil {
		_bffab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beae.ExtLst, _bffab)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aeb *CT_AreaChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gd:
	for {
		_bc, _cgb := d.Token()
		if _cgb != nil {
			return _cgb
		}
		switch _efe := _bc.(type) {
		case _b.StartElement:
			switch _efe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_aeb.Grouping = NewCT_Grouping()
				if _bgb := d.DecodeElement(_aeb.Grouping, &_efe); _bgb != nil {
					return _bgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_aeb.VaryColors = NewCT_Boolean()
				if _fb := d.DecodeElement(_aeb.VaryColors, &_efe); _fb != nil {
					return _fb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bca := NewCT_AreaSer()
				if _aefe := d.DecodeElement(_bca, &_efe); _aefe != nil {
					return _aefe
				}
				_aeb.Ser = append(_aeb.Ser, _bca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aeb.DLbls = NewCT_DLbls()
				if _gb := d.DecodeElement(_aeb.DLbls, &_efe); _gb != nil {
					return _gb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_aeb.DropLines = NewCT_ChartLines()
				if _gdb := d.DecodeElement(_aeb.DropLines, &_efe); _gdb != nil {
					return _gdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_eae := NewCT_UnsignedInt()
				if _fe := d.DecodeElement(_eae, &_efe); _fe != nil {
					return _fe
				}
				_aeb.AxId = append(_aeb.AxId, _eae)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeb.ExtLst = NewCT_ExtensionList()
				if _bbfb := d.DecodeElement(_aeb.ExtLst, &_efe); _bbfb != nil {
					return _bbfb
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _efe.Name)
				if _bgc := d.Skip(); _bgc != nil {
					return _bgc
				}
			}
		case _b.EndElement:
			break _gd
		case _b.CharData:
		}
	}
	return nil
}
func (_feedb ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _feedb {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feedb))
	}
	return nil
}
func NewCT_Pie3DChart() *CT_Pie3DChart { _gegab := &CT_Pie3DChart{}; return _gegab }
func NewCT_UpDownBars() *CT_UpDownBars { _dcbf := &CT_UpDownBars{}; return _dcbf }

// Validate validates the CT_Boolean and its children
func (_ccg *CT_Boolean) Validate() error {
	return _ccg.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}
func NewCT_ExternalData() *CT_ExternalData { _bgfd := &CT_ExternalData{}; return _bgfd }
func (_bgfage *EG_SerShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_deecga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bgfage.Idx, _deecga)
	_gdcfg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bgfage.Order, _gdcfg)
	if _bgfage.Tx != nil {
		_bcdac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bgfage.Tx, _bcdac)
	}
	if _bgfage.SpPr != nil {
		_dabb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bgfage.SpPr, _dabb)
	}
	return nil
}

// Validate validates the CT_AxisUnit and its children
func (_bff *CT_AxisUnit) Validate() error {
	return _bff.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}

// Validate validates the CT_ScatterChart and its children
func (_fbcfb *CT_ScatterChart) Validate() error {
	return _fbcfb.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_gbcfg *CT_StrRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gaacc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_dc.AddPreserveSpaceAttr(&_gaacc, _gbcfg.F)
	e.EncodeElement(_gbcfg.F, _gaacc)
	if _gbcfg.StrCache != nil {
		_egcea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_gbcfg.StrCache, _egcea)
	}
	if _gbcfg.ExtLst != nil {
		_feeed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbcfg.ExtLst, _feeed)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_MarkerStyle and its children
func (_cecgd *CT_MarkerStyle) Validate() error {
	return _cecgd.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}
func (_bebgf *CT_TxChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_acdda:
	for {
		_dggfb, _cceca := d.Token()
		if _cceca != nil {
			return _cceca
		}
		switch _afdba := _dggfb.(type) {
		case _b.StartElement:
			switch _afdba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_bebgf.StrRef = NewCT_StrRef()
				if _baee := d.DecodeElement(_bebgf.StrRef, &_afdba); _baee != nil {
					return _baee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_bebgf.Rich = _f.NewCT_TextBody()
				if _ebaab := d.DecodeElement(_bebgf.Rich, &_afdba); _ebaab != nil {
					return _ebaab
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _afdba.Name)
				if _gdcag := d.Skip(); _gdcag != nil {
					return _gdcag
				}
			}
		case _b.EndElement:
			break _acdda
		case _b.CharData:
		}
	}
	return nil
}
func (_deeeb *ST_SizeRepresents) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_deeeb = 0
	case "\u0061\u0072\u0065\u0061":
		*_deeeb = 1
	case "\u0077":
		*_deeeb = 2
	}
	return nil
}

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

// Validate validates the CT_ScatterStyle and its children
func (_cacgf *CT_ScatterStyle) Validate() error {
	return _cacgf.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}
func (_gddad *CT_NumVal) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dagcg := range start.Attr {
		if _dagcg.Name.Local == "\u0069\u0064\u0078" {
			_ddcec, _gbbd := _bd.ParseUint(_dagcg.Value, 10, 32)
			if _gbbd != nil {
				return _gbbd
			}
			_gddad.IdxAttr = uint32(_ddcec)
			continue
		}
		if _dagcg.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_gefae, _bffa := _dagcg.Value, error(nil)
			if _bffa != nil {
				return _bffa
			}
			_gddad.FormatCodeAttr = &_gefae
			continue
		}
	}
_gdfab:
	for {
		_gcgfe, _cfbd := d.Token()
		if _cfbd != nil {
			return _cfbd
		}
		switch _gcdcb := _gcgfe.(type) {
		case _b.StartElement:
			switch _gcdcb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _gadbg := d.DecodeElement(&_gddad.V, &_gcdcb); _gadbg != nil {
					return _gadbg
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _gcdcb.Name)
				if _bbde := d.Skip(); _bbde != nil {
					return _bbde
				}
			}
		case _b.EndElement:
			break _gdfab
		case _b.CharData:
		}
	}
	return nil
}
func (_dccc *CT_FirstSliceAng) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dccc.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_dccc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bfcc ST_SplitType) ValidateWithPath(path string) error {
	switch _bfcc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfcc))
	}
	return nil
}

// Validate validates the CT_UnsignedInt and its children
func (_dbfbb *CT_UnsignedInt) Validate() error {
	return _dbfbb.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}

// Validate validates the CT_BarSer and its children
func (_egge *CT_BarSer) Validate() error {
	return _egge.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}
func (_febae ST_OfPieType) ValidateWithPath(path string) error {
	switch _febae {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_febae))
	}
	return nil
}

type CT_StrVal struct {
	IdxAttr uint32
	V       string
}

func (_edbfd ST_Orientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_edbfd.String(), start)
}

type CT_PictureOptions struct {
	ApplyToFront     *CT_Boolean
	ApplyToSides     *CT_Boolean
	ApplyToEnd       *CT_Boolean
	PictureFormat    *CT_PictureFormat
	PictureStackUnit *CT_PictureStackUnit
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

func (_gecca *ST_HPercent) Validate() error { return _gecca.ValidateWithPath("") }

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

func (_cabbe *ST_Shape) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cabbe = 0
	case "\u0063\u006f\u006e\u0065":
		*_cabbe = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_cabbe = 2
	case "\u0062\u006f\u0078":
		*_cabbe = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_cabbe = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_cabbe = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_cabbe = 6
	}
	return nil
}
func (_cdca *CT_Pie3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fefg:
	for {
		_bafab, _cdeb := d.Token()
		if _cdeb != nil {
			return _cdeb
		}
		switch _fffde := _bafab.(type) {
		case _b.StartElement:
			switch _fffde.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cdca.VaryColors = NewCT_Boolean()
				if _cgfa := d.DecodeElement(_cdca.VaryColors, &_fffde); _cgfa != nil {
					return _cgfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cagce := NewCT_PieSer()
				if _fcbdcd := d.DecodeElement(_cagce, &_fffde); _fcbdcd != nil {
					return _fcbdcd
				}
				_cdca.Ser = append(_cdca.Ser, _cagce)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cdca.DLbls = NewCT_DLbls()
				if _gcdbg := d.DecodeElement(_cdca.DLbls, &_fffde); _gcdbg != nil {
					return _gcdbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdca.ExtLst = NewCT_ExtensionList()
				if _cbcaa := d.DecodeElement(_cdca.ExtLst, &_fffde); _cbcaa != nil {
					return _cbcaa
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fffde.Name)
				if _gcad := d.Skip(); _gcad != nil {
					return _gcad
				}
			}
		case _b.EndElement:
			break _fefg
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_ebf *CT_BarSer) ValidateWithPath(path string) error {
	if _affd := _ebf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _affd != nil {
		return _affd
	}
	if _cdae := _ebf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _cdae != nil {
		return _cdae
	}
	if _ebf.Tx != nil {
		if _acc := _ebf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _acc != nil {
			return _acc
		}
	}
	if _ebf.SpPr != nil {
		if _bbg := _ebf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bbg != nil {
			return _bbg
		}
	}
	if _ebf.InvertIfNegative != nil {
		if _dgcf := _ebf.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _dgcf != nil {
			return _dgcf
		}
	}
	if _ebf.PictureOptions != nil {
		if _eced := _ebf.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _eced != nil {
			return _eced
		}
	}
	for _ddb, _dcg := range _ebf.DPt {
		if _gaga := _dcg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ddb)); _gaga != nil {
			return _gaga
		}
	}
	if _ebf.DLbls != nil {
		if _cbda := _ebf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cbda != nil {
			return _cbda
		}
	}
	for _cea, _agc := range _ebf.Trendline {
		if _adbb := _agc.ValidateWithPath(_aa.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _cea)); _adbb != nil {
			return _adbb
		}
	}
	if _ebf.ErrBars != nil {
		if _fceb := _ebf.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _fceb != nil {
			return _fceb
		}
	}
	if _ebf.Cat != nil {
		if _eebg := _ebf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _eebg != nil {
			return _eebg
		}
	}
	if _ebf.Val != nil {
		if _fggc := _ebf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fggc != nil {
			return _fggc
		}
	}
	if _ebf.Shape != nil {
		if _efgb := _ebf.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _efgb != nil {
			return _efgb
		}
	}
	if _ebf.ExtLst != nil {
		if _eaa := _ebf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eaa != nil {
			return _eaa
		}
	}
	return nil
}
func (_fdega *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fdega = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_fdega = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_fdega = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_fdega = 3
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_cceed *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	for _dcedc, _afeff := range _cceed.ValAx {
		if _ddfcbe := _afeff.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0078\u005b\u0025\u0064\u005d", path, _dcedc)); _ddfcbe != nil {
			return _ddfcbe
		}
	}
	for _bgde, _bbfba := range _cceed.CatAx {
		if _bcdag := _bbfba.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fC\u0061\u0074\u0041\u0078\u005b\u0025\u0064\u005d", path, _bgde)); _bcdag != nil {
			return _bcdag
		}
	}
	for _gefcd, _degbdd := range _cceed.DateAx {
		if _agdec := _degbdd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0061\u0074\u0065\u0041\u0078\u005b\u0025\u0064\u005d", path, _gefcd)); _agdec != nil {
			return _agdec
		}
	}
	for _fgfe, _egfaf := range _cceed.SerAx {
		if _fddef := _egfaf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002fS\u0065\u0072\u0041\u0078\u005b\u0025\u0064\u005d", path, _fgfe)); _fddef != nil {
			return _fddef
		}
	}
	return nil
}
func (_afcfc *CT_StrData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _afcfc.PtCount != nil {
		_abcgg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_afcfc.PtCount, _abcgg)
	}
	if _afcfc.Pt != nil {
		_aecgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _dgdb := range _afcfc.Pt {
			e.EncodeElement(_dgdb, _aecgb)
		}
	}
	if _afcfc.ExtLst != nil {
		_cdaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afcfc.ExtLst, _cdaa)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LineSer and its children
func (_bbba *CT_LineSer) Validate() error {
	return _bbba.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}
func (_dcgee ST_TickMark) String() string {
	switch _dcgee {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}
func (_ggfbab ST_ErrBarType) ValidateWithPath(path string) error {
	switch _ggfbab {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggfbab))
	}
	return nil
}

type CT_Marker struct {
	Symbol *CT_MarkerStyle
	Size   *CT_MarkerSize
	SpPr   *_f.CT_ShapeProperties
	ExtLst *CT_ExtensionList
}

func (_fccdf *ST_DLblPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fccdf = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_fccdf = 1
	case "\u0062":
		*_fccdf = 2
	case "\u0063\u0074\u0072":
		*_fccdf = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_fccdf = 4
	case "\u0069\u006e\u0045n\u0064":
		*_fccdf = 5
	case "\u006c":
		*_fccdf = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_fccdf = 7
	case "\u0072":
		*_fccdf = 8
	case "\u0074":
		*_fccdf = 9
	}
	return nil
}

type CT_DLblChoice struct {
	Delete         *CT_Boolean
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_bdec *ST_DLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gccae, _cegga := d.Token()
	if _cegga != nil {
		return _cegga
	}
	if _fbbbd, _gfdea := _gccae.(_b.EndElement); _gfdea && _fbbbd.Name == start.Name {
		*_bdec = 1
		return nil
	}
	if _aaeda, _ffeeg := _gccae.(_b.CharData); !_ffeeg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gccae)
	} else {
		switch string(_aaeda) {
		case "":
			*_bdec = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_bdec = 1
		case "\u0062":
			*_bdec = 2
		case "\u0063\u0074\u0072":
			*_bdec = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_bdec = 4
		case "\u0069\u006e\u0045n\u0064":
			*_bdec = 5
		case "\u006c":
			*_bdec = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_bdec = 7
		case "\u0072":
			*_bdec = 8
		case "\u0074":
			*_bdec = 9
		}
	}
	_gccae, _cegga = d.Token()
	if _cegga != nil {
		return _cegga
	}
	if _gaabd, _deegf := _gccae.(_b.EndElement); _deegf && _gaabd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gccae)
}
func (_caffb *CT_Title) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bbbfa:
	for {
		_bccd, _ccec := d.Token()
		if _ccec != nil {
			return _ccec
		}
		switch _fdedc := _bccd.(type) {
		case _b.StartElement:
			switch _fdedc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_caffb.Tx = NewCT_Tx()
				if _eaae := d.DecodeElement(_caffb.Tx, &_fdedc); _eaae != nil {
					return _eaae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_caffb.Layout = NewCT_Layout()
				if _gdafg := d.DecodeElement(_caffb.Layout, &_fdedc); _gdafg != nil {
					return _gdafg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_caffb.Overlay = NewCT_Boolean()
				if _aede := d.DecodeElement(_caffb.Overlay, &_fdedc); _aede != nil {
					return _aede
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_caffb.SpPr = _f.NewCT_ShapeProperties()
				if _fcabb := d.DecodeElement(_caffb.SpPr, &_fdedc); _fcabb != nil {
					return _fcabb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_caffb.TxPr = _f.NewCT_TextBody()
				if _fabg := d.DecodeElement(_caffb.TxPr, &_fdedc); _fabg != nil {
					return _fabg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_caffb.ExtLst = NewCT_ExtensionList()
				if _dcac := d.DecodeElement(_caffb.ExtLst, &_fdedc); _dcac != nil {
					return _dcac
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _fdedc.Name)
				if _cecd := d.Skip(); _cecd != nil {
					return _cecd
				}
			}
		case _b.EndElement:
			break _bbbfa
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

func (_cfcecd *ST_BuiltInUnit) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cfcecd = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_cfcecd = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_cfcecd = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_cfcecd = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_cfcecd = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_cfcecd = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_cfcecd = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_cfcecd = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_cfcecd = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_cfcecd = 9
	}
	return nil
}
func (_fgceg ST_TimeUnit) Validate() error { return _fgceg.ValidateWithPath("") }
func (_aggba *EG_PieChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcecg:
	for {
		_acfde, _bgdff := d.Token()
		if _bgdff != nil {
			return _bgdff
		}
		switch _begfe := _acfde.(type) {
		case _b.StartElement:
			switch _begfe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_aggba.VaryColors = NewCT_Boolean()
				if _fgeaa := d.DecodeElement(_aggba.VaryColors, &_begfe); _fgeaa != nil {
					return _fgeaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffagb := NewCT_PieSer()
				if _fagea := d.DecodeElement(_ffagb, &_begfe); _fagea != nil {
					return _fagea
				}
				_aggba.Ser = append(_aggba.Ser, _ffagb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aggba.DLbls = NewCT_DLbls()
				if _bdggee := d.DecodeElement(_aggba.DLbls, &_begfe); _bdggee != nil {
					return _bdggee
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _begfe.Name)
				if _accee := d.Skip(); _accee != nil {
					return _accee
				}
			}
		case _b.EndElement:
			break _bcecg
		case _b.CharData:
		}
	}
	return nil
}
func (_adce ST_LblAlgn) Validate() error { return _adce.ValidateWithPath("") }
func (_gebe *CT_BuiltInUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffbgd := range start.Attr {
		if _ffbgd.Name.Local == "\u0076\u0061\u006c" {
			_gebe.ValAttr.UnmarshalXMLAttr(_ffbgd)
			continue
		}
	}
	for {
		_dbab, _cfb := d.Token()
		if _cfb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _cfb)
		}
		if _ede, _cacg := _dbab.(_b.EndElement); _cacg && _ede.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebaae ST_ErrBarType) String() string {
	switch _ebaae {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}
func (_bbadc *CT_View3D) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fbea:
	for {
		_ccage, _ecege := d.Token()
		if _ecege != nil {
			return _ecege
		}
		switch _abba := _ccage.(type) {
		case _b.StartElement:
			switch _abba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_bbadc.RotX = NewCT_RotX()
				if _bdfbc := d.DecodeElement(_bbadc.RotX, &_abba); _bdfbc != nil {
					return _bdfbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bbadc.HPercent = NewCT_HPercent()
				if _cdfb := d.DecodeElement(_bbadc.HPercent, &_abba); _cdfb != nil {
					return _cdfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_bbadc.RotY = NewCT_RotY()
				if _bcfae := d.DecodeElement(_bbadc.RotY, &_abba); _bcfae != nil {
					return _bcfae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bbadc.DepthPercent = NewCT_DepthPercent()
				if _fcgfc := d.DecodeElement(_bbadc.DepthPercent, &_abba); _fcgfc != nil {
					return _fcgfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_bbadc.RAngAx = NewCT_Boolean()
				if _efbfb := d.DecodeElement(_bbadc.RAngAx, &_abba); _efbfb != nil {
					return _efbfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_bbadc.Perspective = NewCT_Perspective()
				if _aeec := d.DecodeElement(_bbadc.Perspective, &_abba); _aeec != nil {
					return _aeec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbadc.ExtLst = NewCT_ExtensionList()
				if _cefga := d.DecodeElement(_bbadc.ExtLst, &_abba); _cefga != nil {
					return _cefga
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _abba.Name)
				if _cdbb := d.Skip(); _cdbb != nil {
					return _cdbb
				}
			}
		case _b.EndElement:
			break _fbea
		case _b.CharData:
		}
	}
	return nil
}

type CT_ExtensionList struct{ Ext []*CT_Extension }

// Validate validates the CT_NumDataSourceChoice and its children
func (_caga *CT_NumDataSourceChoice) Validate() error {
	return _caga.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}
func (_agcdc *CT_SurfaceSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_agcdc.Idx = NewCT_UnsignedInt()
	_agcdc.Order = NewCT_UnsignedInt()
_fbecc:
	for {
		_ffba, _dged := d.Token()
		if _dged != nil {
			return _dged
		}
		switch _ffcgf := _ffba.(type) {
		case _b.StartElement:
			switch _ffcgf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _efecc := d.DecodeElement(_agcdc.Idx, &_ffcgf); _efecc != nil {
					return _efecc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bcdd := d.DecodeElement(_agcdc.Order, &_ffcgf); _bcdd != nil {
					return _bcdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_agcdc.Tx = NewCT_SerTx()
				if _cccf := d.DecodeElement(_agcdc.Tx, &_ffcgf); _cccf != nil {
					return _cccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_agcdc.SpPr = _f.NewCT_ShapeProperties()
				if _fbfa := d.DecodeElement(_agcdc.SpPr, &_ffcgf); _fbfa != nil {
					return _fbfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_agcdc.Cat = NewCT_AxDataSource()
				if _daefa := d.DecodeElement(_agcdc.Cat, &_ffcgf); _daefa != nil {
					return _daefa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_agcdc.Val = NewCT_NumDataSource()
				if _eccda := d.DecodeElement(_agcdc.Val, &_ffcgf); _eccda != nil {
					return _eccda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agcdc.ExtLst = NewCT_ExtensionList()
				if _cdgeg := d.DecodeElement(_agcdc.ExtLst, &_ffcgf); _cdgeg != nil {
					return _cdgeg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _ffcgf.Name)
				if _efgfg := d.Skip(); _efgfg != nil {
					return _efgfg
				}
			}
		case _b.EndElement:
			break _fbecc
		case _b.CharData:
		}
	}
	return nil
}
func (_acbad *ST_Overlap) ValidateWithPath(path string) error {
	_abef := []string{}
	if _acbad.ST_OverlapPercent != nil {
		_abef = append(_abef, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _acbad.ST_OverlapByte != nil {
		_abef = append(_abef, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_abef) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _abef)
	}
	return nil
}

type ST_ScatterStyle byte

// Validate validates the EG_PieChartShared and its children
func (_bgbaa *EG_PieChartShared) Validate() error {
	return _bgbaa.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_fdag *CT_DispUnits) ValidateWithPath(path string) error {
	if _fdag.Choice != nil {
		if _dea := _fdag.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dea != nil {
			return _dea
		}
	}
	if _fdag.DispUnitsLbl != nil {
		if _fcdd := _fdag.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _fcdd != nil {
			return _fcdd
		}
	}
	if _fdag.ExtLst != nil {
		if _eagab := _fdag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eagab != nil {
			return _eagab
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_bbcce *CT_StrRef) ValidateWithPath(path string) error {
	if _bbcce.StrCache != nil {
		if _fdgf := _bbcce.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _fdgf != nil {
			return _fdgf
		}
	}
	if _bbcce.ExtLst != nil {
		if _eeabe := _bbcce.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eeabe != nil {
			return _eeabe
		}
	}
	return nil
}
func NewChartSpace() *ChartSpace {
	_faefb := &ChartSpace{}
	_faefb.CT_ChartSpace = *NewCT_ChartSpace()
	return _faefb
}
func (_efdfce ST_ErrDir) String() string {
	switch _efdfce {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}
func (_afabd *Group_DLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_eaead:
	for {
		_gafcb, _gccg := d.Token()
		if _gccg != nil {
			return _gccg
		}
		switch _cceba := _gafcb.(type) {
		case _b.StartElement:
			switch _cceba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_afabd.Layout = NewCT_Layout()
				if _dbfcc := d.DecodeElement(_afabd.Layout, &_cceba); _dbfcc != nil {
					return _dbfcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_afabd.Tx = NewCT_Tx()
				if _ecdbd := d.DecodeElement(_afabd.Tx, &_cceba); _ecdbd != nil {
					return _ecdbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_afabd.NumFmt = NewCT_NumFmt()
				if _adfae := d.DecodeElement(_afabd.NumFmt, &_cceba); _adfae != nil {
					return _adfae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_afabd.SpPr = _f.NewCT_ShapeProperties()
				if _adggfc := d.DecodeElement(_afabd.SpPr, &_cceba); _adggfc != nil {
					return _adggfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_afabd.TxPr = _f.NewCT_TextBody()
				if _ecdca := d.DecodeElement(_afabd.TxPr, &_cceba); _ecdca != nil {
					return _ecdca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_afabd.DLblPos = NewCT_DLblPos()
				if _ccefb := d.DecodeElement(_afabd.DLblPos, &_cceba); _ccefb != nil {
					return _ccefb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_afabd.ShowLegendKey = NewCT_Boolean()
				if _eebcf := d.DecodeElement(_afabd.ShowLegendKey, &_cceba); _eebcf != nil {
					return _eebcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_afabd.ShowVal = NewCT_Boolean()
				if _fggba := d.DecodeElement(_afabd.ShowVal, &_cceba); _fggba != nil {
					return _fggba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_afabd.ShowCatName = NewCT_Boolean()
				if _dgaae := d.DecodeElement(_afabd.ShowCatName, &_cceba); _dgaae != nil {
					return _dgaae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_afabd.ShowSerName = NewCT_Boolean()
				if _fegg := d.DecodeElement(_afabd.ShowSerName, &_cceba); _fegg != nil {
					return _fegg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_afabd.ShowPercent = NewCT_Boolean()
				if _eefg := d.DecodeElement(_afabd.ShowPercent, &_cceba); _eefg != nil {
					return _eefg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_afabd.ShowBubbleSize = NewCT_Boolean()
				if _gddcb := d.DecodeElement(_afabd.ShowBubbleSize, &_cceba); _gddcb != nil {
					return _gddcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_afabd.Separator = new(string)
				if _ddcbgf := d.DecodeElement(_afabd.Separator, &_cceba); _ddcbgf != nil {
					return _ddcbgf
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _cceba.Name)
				if _geagfb := d.Skip(); _geagfb != nil {
					return _geagfb
				}
			}
		case _b.EndElement:
			break _eaead
		case _b.CharData:
		}
	}
	return nil
}
func (_gcfga *CT_MarkerSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dffg := range start.Attr {
		if _dffg.Name.Local == "\u0076\u0061\u006c" {
			_fede, _dgcfca := _bd.ParseUint(_dffg.Value, 10, 8)
			if _dgcfca != nil {
				return _dgcfca
			}
			_dfgdc := uint8(_fede)
			_gcfga.ValAttr = &_dfgdc
			continue
		}
	}
	for {
		_bdebd, _bdeef := d.Token()
		if _bdeef != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _bdeef)
		}
		if _ebdef, _fadcaf := _bdebd.(_b.EndElement); _fadcaf && _ebdef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eegfdc ST_LblOffset) String() string {
	if _eegfdc.ST_LblOffsetPercent != nil {
		return _aa.Sprintf("\u0025\u0076", *_eegfdc.ST_LblOffsetPercent)
	}
	if _eegfdc.ST_LblOffsetUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_eegfdc.ST_LblOffsetUShort)
	}
	return ""
}
func (_efegac ST_Grouping) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_acgabf := _b.Attr{}
	_acgabf.Name = name
	switch _efegac {
	case ST_GroupingUnset:
		_acgabf.Value = ""
	case ST_GroupingPercentStacked:
		_acgabf.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_acgabf.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_acgabf.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _acgabf, nil
}
func (_efcfc ST_ScatterStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cbgga := _b.Attr{}
	_cbgga.Name = name
	switch _efcfc {
	case ST_ScatterStyleUnset:
		_cbgga.Value = ""
	case ST_ScatterStyleNone:
		_cbgga.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_cbgga.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_cbgga.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_cbgga.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_cbgga.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_cbgga.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _cbgga, nil
}

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

type CT_MarkerStyle struct{ ValAttr ST_MarkerStyle }

func NewCT_MarkerStyle() *CT_MarkerStyle {
	_cdgc := &CT_MarkerStyle{}
	_cdgc.ValAttr = ST_MarkerStyle(1)
	return _cdgc
}
func (_adcb *CT_BubbleSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gbba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_adcb.Idx, _gbba)
	_feca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_adcb.Order, _feca)
	if _adcb.Tx != nil {
		_bbda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_adcb.Tx, _bbda)
	}
	if _adcb.SpPr != nil {
		_bffbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_adcb.SpPr, _bffbd)
	}
	if _adcb.InvertIfNegative != nil {
		_afge := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_adcb.InvertIfNegative, _afge)
	}
	if _adcb.DPt != nil {
		_cfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cegf := range _adcb.DPt {
			e.EncodeElement(_cegf, _cfa)
		}
	}
	if _adcb.DLbls != nil {
		_cded := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_adcb.DLbls, _cded)
	}
	if _adcb.Trendline != nil {
		_bgfg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bffg := range _adcb.Trendline {
			e.EncodeElement(_bffg, _bgfg)
		}
	}
	if _adcb.ErrBars != nil {
		_gcdbf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _cgeg := range _adcb.ErrBars {
			e.EncodeElement(_cgeg, _gcdbf)
		}
	}
	if _adcb.XVal != nil {
		_aaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_adcb.XVal, _aaf)
	}
	if _adcb.YVal != nil {
		_fef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_adcb.YVal, _fef)
	}
	if _adcb.BubbleSize != nil {
		_fgeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_adcb.BubbleSize, _fgeb)
	}
	if _adcb.Bubble3D != nil {
		_egeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_adcb.Bubble3D, _egeb)
	}
	if _adcb.ExtLst != nil {
		_ggae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adcb.ExtLst, _ggae)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_fgfd *CT_DPt) ValidateWithPath(path string) error {
	if _adaf := _fgfd.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _adaf != nil {
		return _adaf
	}
	if _fgfd.InvertIfNegative != nil {
		if _bbeb := _fgfd.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _bbeb != nil {
			return _bbeb
		}
	}
	if _fgfd.Marker != nil {
		if _fbb := _fgfd.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _fbb != nil {
			return _fbb
		}
	}
	if _fgfd.Bubble3D != nil {
		if _egfef := _fgfd.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _egfef != nil {
			return _egfef
		}
	}
	if _fgfd.Explosion != nil {
		if _dede := _fgfd.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _dede != nil {
			return _dede
		}
	}
	if _fgfd.SpPr != nil {
		if _eeac := _fgfd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eeac != nil {
			return _eeac
		}
	}
	if _fgfd.PictureOptions != nil {
		if _eagad := _fgfd.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _eagad != nil {
			return _eagad
		}
	}
	if _fgfd.ExtLst != nil {
		if _gdce := _fgfd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gdce != nil {
			return _gdce
		}
	}
	return nil
}
func (_cafab ST_Overlap) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cafab.ST_OverlapPercent != nil {
		e.EncodeToken(_b.CharData(*_cafab.ST_OverlapPercent))
	}
	if _cafab.ST_OverlapByte != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_cafab.ST_OverlapByte)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_egd *CT_AxisUnit) ValidateWithPath(path string) error {
	if _egd.ValAttr <= 0 {
		return _aa.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _egd.ValAttr)
	}
	return nil
}
func (_ffcf *CT_PageMargins) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.LAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.RAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0074"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.TAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0062"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.BAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.HeaderAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _aa.Sprintf("\u0025\u0076", _ffcf.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_fbaac *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _fbaac.Delete != nil {
		if _ecfa := _fbaac.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _ecfa != nil {
			return _ecfa
		}
	}
	if _fbaac.TxPr != nil {
		if _cdcd := _fbaac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cdcd != nil {
			return _cdcd
		}
	}
	return nil
}
func (_fcfc *CT_Orientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fcfc.ValAttr != ST_OrientationUnset {
		_deaa, _ceccf := _fcfc.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _ceccf != nil {
			return _ceccf
		}
		start.Attr = append(start.Attr, _deaa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gcbcf *CT_HoleSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gcbcf.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_gcbcf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Line3DChart and its children
func (_fecg *CT_Line3DChart) Validate() error {
	return _fecg.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

type ST_PageSetupOrientation byte

func NewCT_LogBase() *CT_LogBase { _gfee := &CT_LogBase{}; _gfee.ValAttr = 2; return _gfee }
func (_fdaf *CT_PrintSettings) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bgda:
	for {
		_cbdd, _effgg := d.Token()
		if _effgg != nil {
			return _effgg
		}
		switch _dffa := _cbdd.(type) {
		case _b.StartElement:
			switch _dffa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_fdaf.HeaderFooter = NewCT_HeaderFooter()
				if _ebbc := d.DecodeElement(_fdaf.HeaderFooter, &_dffa); _ebbc != nil {
					return _ebbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_fdaf.PageMargins = NewCT_PageMargins()
				if _gdgbag := d.DecodeElement(_fdaf.PageMargins, &_dffa); _gdgbag != nil {
					return _gdgbag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_fdaf.PageSetup = NewCT_PageSetup()
				if _fefd := d.DecodeElement(_fdaf.PageSetup, &_dffa); _fefd != nil {
					return _fefd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_fdaf.LegacyDrawingHF = NewCT_RelId()
				if _geaff := d.DecodeElement(_fdaf.LegacyDrawingHF, &_dffa); _geaff != nil {
					return _geaff
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _dffa.Name)
				if _gcbeae := d.Skip(); _gcbeae != nil {
					return _gcbeae
				}
			}
		case _b.EndElement:
			break _bgda
		case _b.CharData:
		}
	}
	return nil
}
func (_efge *CT_Chart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_efge.PlotArea = NewCT_PlotArea()
_gfb:
	for {
		_effe, _cecea := d.Token()
		if _cecea != nil {
			return _cecea
		}
		switch _gfgb := _effe.(type) {
		case _b.StartElement:
			switch _gfgb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_efge.Title = NewCT_Title()
				if _egebe := d.DecodeElement(_efge.Title, &_gfgb); _egebe != nil {
					return _egebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_efge.AutoTitleDeleted = NewCT_Boolean()
				if _adge := d.DecodeElement(_efge.AutoTitleDeleted, &_gfgb); _adge != nil {
					return _adge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_efge.PivotFmts = NewCT_PivotFmts()
				if _gfgd := d.DecodeElement(_efge.PivotFmts, &_gfgb); _gfgd != nil {
					return _gfgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_efge.View3D = NewCT_View3D()
				if _efdd := d.DecodeElement(_efge.View3D, &_gfgb); _efdd != nil {
					return _efdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_efge.Floor = NewCT_Surface()
				if _acfd := d.DecodeElement(_efge.Floor, &_gfgb); _acfd != nil {
					return _acfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_efge.SideWall = NewCT_Surface()
				if _edgf := d.DecodeElement(_efge.SideWall, &_gfgb); _edgf != nil {
					return _edgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_efge.BackWall = NewCT_Surface()
				if _ffa := d.DecodeElement(_efge.BackWall, &_gfgb); _ffa != nil {
					return _ffa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _bbca := d.DecodeElement(_efge.PlotArea, &_gfgb); _bbca != nil {
					return _bbca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_efge.Legend = NewCT_Legend()
				if _aadd := d.DecodeElement(_efge.Legend, &_gfgb); _aadd != nil {
					return _aadd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_efge.PlotVisOnly = NewCT_Boolean()
				if _aebba := d.DecodeElement(_efge.PlotVisOnly, &_gfgb); _aebba != nil {
					return _aebba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_efge.DispBlanksAs = NewCT_DispBlanksAs()
				if _ccbf := d.DecodeElement(_efge.DispBlanksAs, &_gfgb); _ccbf != nil {
					return _ccbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_efge.ShowDLblsOverMax = NewCT_Boolean()
				if _gggc := d.DecodeElement(_efge.ShowDLblsOverMax, &_gfgb); _gggc != nil {
					return _gggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efge.ExtLst = NewCT_ExtensionList()
				if _ffea := d.DecodeElement(_efge.ExtLst, &_gfgb); _ffea != nil {
					return _ffea
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _gfgb.Name)
				if _egfe := d.Skip(); _egfe != nil {
					return _egfe
				}
			}
		case _b.EndElement:
			break _gfb
		case _b.CharData:
		}
	}
	return nil
}

type CT_TrendlineType struct{ ValAttr ST_TrendlineType }

func (_dedbdf *ST_HoleSize) Validate() error { return _dedbdf.ValidateWithPath("") }

// Validate validates the CT_RadarStyle and its children
func (_dfeda *CT_RadarStyle) Validate() error {
	return _dfeda.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}
func (_bcggc *CT_MarkerStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bcggc.ValAttr = ST_MarkerStyle(1)
	for _, _ggce := range start.Attr {
		if _ggce.Name.Local == "\u0076\u0061\u006c" {
			_bcggc.ValAttr.UnmarshalXMLAttr(_ggce)
			continue
		}
	}
	for {
		_gdcec, _adga := d.Token()
		if _adga != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _adga)
		}
		if _bced, _aecf := _gdcec.(_b.EndElement); _aecf && _bced.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_gdbae *CT_RotX) ValidateWithPath(path string) error {
	if _gdbae.ValAttr != nil {
		if *_gdbae.ValAttr < -90 {
			return _aa.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_gdbae.ValAttr)
		}
		if *_gdbae.ValAttr > 90 {
			return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_gdbae.ValAttr)
		}
	}
	return nil
}
func NewCT_NumRef() *CT_NumRef { _accd := &CT_NumRef{}; return _accd }
func (_abdee *CT_DTable) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_adbfa:
	for {
		_abeg, _gdec := d.Token()
		if _gdec != nil {
			return _gdec
		}
		switch _fbffge := _abeg.(type) {
		case _b.StartElement:
			switch _fbffge.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_abdee.ShowHorzBorder = NewCT_Boolean()
				if _ddce := d.DecodeElement(_abdee.ShowHorzBorder, &_fbffge); _ddce != nil {
					return _ddce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_abdee.ShowVertBorder = NewCT_Boolean()
				if _geaac := d.DecodeElement(_abdee.ShowVertBorder, &_fbffge); _geaac != nil {
					return _geaac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_abdee.ShowOutline = NewCT_Boolean()
				if _gdfde := d.DecodeElement(_abdee.ShowOutline, &_fbffge); _gdfde != nil {
					return _gdfde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_abdee.ShowKeys = NewCT_Boolean()
				if _dafc := d.DecodeElement(_abdee.ShowKeys, &_fbffge); _dafc != nil {
					return _dafc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abdee.SpPr = _f.NewCT_ShapeProperties()
				if _ggcb := d.DecodeElement(_abdee.SpPr, &_fbffge); _ggcb != nil {
					return _ggcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_abdee.TxPr = _f.NewCT_TextBody()
				if _fgcff := d.DecodeElement(_abdee.TxPr, &_fbffge); _fgcff != nil {
					return _fgcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abdee.ExtLst = NewCT_ExtensionList()
				if _ggee := d.DecodeElement(_abdee.ExtLst, &_fbffge); _ggee != nil {
					return _ggee
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _fbffge.Name)
				if _egfg := d.Skip(); _egfg != nil {
					return _egfg
				}
			}
		case _b.EndElement:
			break _adbfa
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Double and its children
func (_ecca *CT_Double) Validate() error {
	return _ecca.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}
func (_bafc *ST_SecondPieSize) ValidateWithPath(path string) error {
	_aaae := []string{}
	if _bafc.ST_SecondPieSizePercent != nil {
		_aaae = append(_aaae, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _bafc.ST_SecondPieSizeUShort != nil {
		_aaae = append(_aaae, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_aaae) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _aaae)
	}
	return nil
}

type CT_AreaChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_ChartLines() *CT_ChartLines { _cfbc := &CT_ChartLines{}; return _cfbc }

type ST_TimeUnit byte

func (_abca *CT_DPt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_eddae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_abca.Idx, _eddae)
	if _abca.InvertIfNegative != nil {
		_effb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_abca.InvertIfNegative, _effb)
	}
	if _abca.Marker != nil {
		_dcga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_abca.Marker, _dcga)
	}
	if _abca.Bubble3D != nil {
		_cfec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_abca.Bubble3D, _cfec)
	}
	if _abca.Explosion != nil {
		_gbgb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_abca.Explosion, _gbgb)
	}
	if _abca.SpPr != nil {
		_badg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_abca.SpPr, _badg)
	}
	if _abca.PictureOptions != nil {
		_dbea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_abca.PictureOptions, _dbea)
	}
	if _abca.ExtLst != nil {
		_eegc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abca.ExtLst, _eegc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_dfe *CT_BarChart) ValidateWithPath(path string) error {
	if _ccef := _dfe.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _ccef != nil {
		return _ccef
	}
	if _dfe.Grouping != nil {
		if _eag := _dfe.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _eag != nil {
			return _eag
		}
	}
	if _dfe.VaryColors != nil {
		if _dafa := _dfe.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dafa != nil {
			return _dafa
		}
	}
	for _bgfc, _cbe := range _dfe.Ser {
		if _bbd := _cbe.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bgfc)); _bbd != nil {
			return _bbd
		}
	}
	if _dfe.DLbls != nil {
		if _ggc := _dfe.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ggc != nil {
			return _ggc
		}
	}
	if _dfe.GapWidth != nil {
		if _fbag := _dfe.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _fbag != nil {
			return _fbag
		}
	}
	if _dfe.Overlap != nil {
		if _cdg := _dfe.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _cdg != nil {
			return _cdg
		}
	}
	for _bdbc, _bac := range _dfe.SerLines {
		if _bgae := _bac.ValidateWithPath(_aa.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _bdbc)); _bgae != nil {
			return _bgae
		}
	}
	for _fdg, _fceg := range _dfe.AxId {
		if _ddg := _fceg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fdg)); _ddg != nil {
			return _ddg
		}
	}
	if _dfe.ExtLst != nil {
		if _gafd := _dfe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gafd != nil {
			return _gafd
		}
	}
	return nil
}
func NewCT_Title() *CT_Title                   { _fcbcdf := &CT_Title{}; return _fcbcdf }
func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _gbae := &CT_MultiLvlStrRef{}; return _gbae }

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_fffc *CT_Extension) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_BuiltInUnit and its children
func (_dgdd *CT_BuiltInUnit) Validate() error {
	return _dgdd.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}
func (_gdefef *ST_ScatterStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afcda, _eegbg := d.Token()
	if _eegbg != nil {
		return _eegbg
	}
	if _bcge, _abdaee := _afcda.(_b.EndElement); _abdaee && _bcge.Name == start.Name {
		*_gdefef = 1
		return nil
	}
	if _cccdf, _fddfd := _afcda.(_b.CharData); !_fddfd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afcda)
	} else {
		switch string(_cccdf) {
		case "":
			*_gdefef = 0
		case "\u006e\u006f\u006e\u0065":
			*_gdefef = 1
		case "\u006c\u0069\u006e\u0065":
			*_gdefef = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_gdefef = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_gdefef = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_gdefef = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_gdefef = 6
		}
	}
	_afcda, _eegbg = d.Token()
	if _eegbg != nil {
		return _eegbg
	}
	if _fdbgb, _dbgfa := _afcda.(_b.EndElement); _dbgfa && _fdbgb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afcda)
}

type ST_TrendlineType byte

func (_dfga *CT_LblOffset) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fdagg := range start.Attr {
		if _fdagg.Name.Local == "\u0076\u0061\u006c" {
			_efagg, _debab := ParseUnionST_LblOffset(_fdagg.Value)
			if _debab != nil {
				return _debab
			}
			_dfga.ValAttr = &_efagg
			continue
		}
	}
	for {
		_aegg, _fcgb := d.Token()
		if _fcgb != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _fcgb)
		}
		if _ccgb, _aaee := _aegg.(_b.EndElement); _aaee && _ccgb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ddgf *CT_CrossBetween) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ddgf.ValAttr = ST_CrossBetween(1)
	for _, _dgcg := range start.Attr {
		if _dgcg.Name.Local == "\u0076\u0061\u006c" {
			_ddgf.ValAttr.UnmarshalXMLAttr(_dgcg)
			continue
		}
	}
	for {
		_gfe, _eaef := d.Token()
		if _eaef != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _eaef)
		}
		if _cdga, _afgge := _gfe.(_b.EndElement); _afgge && _cdga.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_LineChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	Marker     *CT_Boolean
	Smooth     *CT_Boolean
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_geef := &CT_NumDataSourceChoice{}
	return _geef
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_bgfae *EG_PieChartShared) ValidateWithPath(path string) error {
	if _bgfae.VaryColors != nil {
		if _fgfgg := _bgfae.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fgfgg != nil {
			return _fgfgg
		}
	}
	for _egegee, _ggdcae := range _bgfae.Ser {
		if _fafd := _ggdcae.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _egegee)); _fafd != nil {
			return _fafd
		}
	}
	if _bgfae.DLbls != nil {
		if _baag := _bgfae.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _baag != nil {
			return _baag
		}
	}
	return nil
}
func (_dccab ST_BarDir) Validate() error        { return _dccab.ValidateWithPath("") }
func (_ccfca *ST_DepthPercent) Validate() error { return _ccfca.ValidateWithPath("") }

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

func (_cbaeb *EG_AreaChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcad:
	for {
		_becfg, _faca := d.Token()
		if _faca != nil {
			return _faca
		}
		switch _cfag := _becfg.(type) {
		case _b.StartElement:
			switch _cfag.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cbaeb.Grouping = NewCT_Grouping()
				if _edgea := d.DecodeElement(_cbaeb.Grouping, &_cfag); _edgea != nil {
					return _edgea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbaeb.VaryColors = NewCT_Boolean()
				if _dfbbe := d.DecodeElement(_cbaeb.VaryColors, &_cfag); _dfbbe != nil {
					return _dfbbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ecfcb := NewCT_AreaSer()
				if _degag := d.DecodeElement(_ecfcb, &_cfag); _degag != nil {
					return _degag
				}
				_cbaeb.Ser = append(_cbaeb.Ser, _ecfcb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbaeb.DLbls = NewCT_DLbls()
				if _edbag := d.DecodeElement(_cbaeb.DLbls, &_cfag); _edbag != nil {
					return _edbag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cbaeb.DropLines = NewCT_ChartLines()
				if _cefeg := d.DecodeElement(_cbaeb.DropLines, &_cfag); _cefeg != nil {
					return _cefeg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cfag.Name)
				if _aadbd := d.Skip(); _aadbd != nil {
					return _aadbd
				}
			}
		case _b.EndElement:
			break _bcad
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_DLblsChoice() *CT_DLblsChoice { _agga := &CT_DLblsChoice{}; return _agga }

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_gdfd *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _gdfd.Delete != nil {
		if _degg := _gdfd.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _degg != nil {
			return _degg
		}
	}
	if _gdfd.NumFmt != nil {
		if _dbef := _gdfd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dbef != nil {
			return _dbef
		}
	}
	if _gdfd.SpPr != nil {
		if _bedf := _gdfd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bedf != nil {
			return _bedf
		}
	}
	if _gdfd.TxPr != nil {
		if _gcgf := _gdfd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gcgf != nil {
			return _gcgf
		}
	}
	if _gdfd.DLblPos != nil {
		if _face := _gdfd.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _face != nil {
			return _face
		}
	}
	if _gdfd.ShowLegendKey != nil {
		if _egfcd := _gdfd.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _egfcd != nil {
			return _egfcd
		}
	}
	if _gdfd.ShowVal != nil {
		if _afdb := _gdfd.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _afdb != nil {
			return _afdb
		}
	}
	if _gdfd.ShowCatName != nil {
		if _eeeb := _gdfd.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _eeeb != nil {
			return _eeeb
		}
	}
	if _gdfd.ShowSerName != nil {
		if _bgfa := _gdfd.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _bgfa != nil {
			return _bgfa
		}
	}
	if _gdfd.ShowPercent != nil {
		if _facec := _gdfd.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _facec != nil {
			return _facec
		}
	}
	if _gdfd.ShowBubbleSize != nil {
		if _cefc := _gdfd.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _cefc != nil {
			return _cefc
		}
	}
	if _gdfd.ShowLeaderLines != nil {
		if _gbgf := _gdfd.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _gbgf != nil {
			return _gbgf
		}
	}
	if _gdfd.LeaderLines != nil {
		if _afddc := _gdfd.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _afddc != nil {
			return _afddc
		}
	}
	return nil
}

// Validate validates the CT_Thickness and its children
func (_gaeaf *CT_Thickness) Validate() error {
	return _gaeaf.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}

type CT_LegendPos struct{ ValAttr ST_LegendPos }

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

func (_aadgb *CT_SerTxChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_acdc:
	for {
		_aafbd, _ffgd := d.Token()
		if _ffgd != nil {
			return _ffgd
		}
		switch _cddeb := _aafbd.(type) {
		case _b.StartElement:
			switch _cddeb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_aadgb.StrRef = NewCT_StrRef()
				if _aegga := d.DecodeElement(_aadgb.StrRef, &_cddeb); _aegga != nil {
					return _aegga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_aadgb.V = new(string)
				if _daaga := d.DecodeElement(_aadgb.V, &_cddeb); _daaga != nil {
					return _daaga
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _cddeb.Name)
				if _cdcdg := d.Skip(); _cdcdg != nil {
					return _cdcdg
				}
			}
		case _b.EndElement:
			break _acdc
		case _b.CharData:
		}
	}
	return nil
}
func (_cbgab *ST_ErrValType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_geedbc, _acceef := d.Token()
	if _acceef != nil {
		return _acceef
	}
	if _cddbb, _dbagbdg := _geedbc.(_b.EndElement); _dbagbdg && _cddbb.Name == start.Name {
		*_cbgab = 1
		return nil
	}
	if _dadaf, _fgffcg := _geedbc.(_b.CharData); !_fgffcg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _geedbc)
	} else {
		switch string(_dadaf) {
		case "":
			*_cbgab = 0
		case "\u0063\u0075\u0073\u0074":
			*_cbgab = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_cbgab = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_cbgab = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_cbgab = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_cbgab = 5
		}
	}
	_geedbc, _acceef = d.Token()
	if _acceef != nil {
		return _acceef
	}
	if _abbb, _degfg := _geedbc.(_b.EndElement); _degfg && _abbb.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _geedbc)
}
func (_dgeb *ST_SizeRepresents) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fbeea, _fafbcf := d.Token()
	if _fafbcf != nil {
		return _fafbcf
	}
	if _aaefa, _aebfd := _fbeea.(_b.EndElement); _aebfd && _aaefa.Name == start.Name {
		*_dgeb = 1
		return nil
	}
	if _bfbgf, _edfde := _fbeea.(_b.CharData); !_edfde {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbeea)
	} else {
		switch string(_bfbgf) {
		case "":
			*_dgeb = 0
		case "\u0061\u0072\u0065\u0061":
			*_dgeb = 1
		case "\u0077":
			*_dgeb = 2
		}
	}
	_fbeea, _fafbcf = d.Token()
	if _fafbcf != nil {
		return _fafbcf
	}
	if _dgebg, _bdbdcf := _fbeea.(_b.EndElement); _bdbdcf && _dgebg.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbeea)
}

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_faccb *CT_StrData) ValidateWithPath(path string) error {
	if _faccb.PtCount != nil {
		if _fffce := _faccb.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _fffce != nil {
			return _fffce
		}
	}
	for _edeg, _ddbce := range _faccb.Pt {
		if _adgf := _ddbce.ValidateWithPath(_aa.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _edeg)); _adgf != nil {
			return _adgf
		}
	}
	if _faccb.ExtLst != nil {
		if _cgadec := _faccb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgadec != nil {
			return _cgadec
		}
	}
	return nil
}
func (_edbff *CT_Order) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _edbff.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_edbff.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dbbeb *CT_LogBase) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _dbbeb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type Any interface {
	MarshalXML(_gbbaa *_b.Encoder, _deafb _b.StartElement) error
	UnmarshalXML(_fggbb *_b.Decoder, _bcagbf _b.StartElement) error
}

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_ggcbc *Group_DLbl) ValidateWithPath(path string) error {
	if _ggcbc.Layout != nil {
		if _fged := _ggcbc.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _fged != nil {
			return _fged
		}
	}
	if _ggcbc.Tx != nil {
		if _gcae := _ggcbc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gcae != nil {
			return _gcae
		}
	}
	if _ggcbc.NumFmt != nil {
		if _aace := _ggcbc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aace != nil {
			return _aace
		}
	}
	if _ggcbc.SpPr != nil {
		if _ddgbb := _ggcbc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ddgbb != nil {
			return _ddgbb
		}
	}
	if _ggcbc.TxPr != nil {
		if _aebed := _ggcbc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aebed != nil {
			return _aebed
		}
	}
	if _ggcbc.DLblPos != nil {
		if _daebe := _ggcbc.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _daebe != nil {
			return _daebe
		}
	}
	if _ggcbc.ShowLegendKey != nil {
		if _dfbc := _ggcbc.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _dfbc != nil {
			return _dfbc
		}
	}
	if _ggcbc.ShowVal != nil {
		if _fggdc := _ggcbc.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _fggdc != nil {
			return _fggdc
		}
	}
	if _ggcbc.ShowCatName != nil {
		if _fgcbf := _ggcbc.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _fgcbf != nil {
			return _fgcbf
		}
	}
	if _ggcbc.ShowSerName != nil {
		if _gddef := _ggcbc.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _gddef != nil {
			return _gddef
		}
	}
	if _ggcbc.ShowPercent != nil {
		if _fcaag := _ggcbc.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fcaag != nil {
			return _fcaag
		}
	}
	if _ggcbc.ShowBubbleSize != nil {
		if _ccccf := _ggcbc.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _ccccf != nil {
			return _ccccf
		}
	}
	return nil
}
func (_dbbd ST_HPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dbbd.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_b.CharData(*_dbbd.ST_HPercentWithSymbol))
	}
	if _dbbd.ST_HPercentUShort != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_dbbd.ST_HPercentUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

type CT_Crosses struct{ ValAttr ST_Crosses }

func (_bcbf *CT_DispBlanksAs) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aga := range start.Attr {
		if _aga.Name.Local == "\u0076\u0061\u006c" {
			_bcbf.ValAttr.UnmarshalXMLAttr(_aga)
			continue
		}
	}
	for {
		_baeca, _fgccc := d.Token()
		if _fgccc != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _fgccc)
		}
		if _dbcc, _ecccc := _baeca.(_b.EndElement); _ecccc && _dbcc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cagdg *CT_RadarSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fdaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_cagdg.Idx, _fdaa)
	_gfffe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_cagdg.Order, _gfffe)
	if _cagdg.Tx != nil {
		_dfdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cagdg.Tx, _dfdg)
	}
	if _cagdg.SpPr != nil {
		_dagg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cagdg.SpPr, _dagg)
	}
	if _cagdg.Marker != nil {
		_fgefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_cagdg.Marker, _fgefd)
	}
	if _cagdg.DPt != nil {
		_eddec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dbaegf := range _cagdg.DPt {
			e.EncodeElement(_dbaegf, _eddec)
		}
	}
	if _cagdg.DLbls != nil {
		_fcdda := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cagdg.DLbls, _fcdda)
	}
	if _cagdg.Cat != nil {
		_fdec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_cagdg.Cat, _fdec)
	}
	if _cagdg.Val != nil {
		_adgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_cagdg.Val, _adgd)
	}
	if _cagdg.ExtLst != nil {
		_fgbeea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cagdg.ExtLst, _fgbeea)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

var ST_BubbleScalePercentPatternRe = _a.MustCompile(ST_BubbleScalePercentPattern)

type Group_DLbl struct {
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}
type ST_OfPieType byte
type CT_DLblsChoice struct {
	Delete          *CT_Boolean
	NumFmt          *CT_NumFmt
	SpPr            *_f.CT_ShapeProperties
	TxPr            *_f.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}
type CT_ChartLines struct{ SpPr *_f.CT_ShapeProperties }

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_gfgba *CT_StrVal) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_LblOffset and its children
func (_bbcd *CT_LblOffset) Validate() error {
	return _bbcd.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}
func (_efgef ST_BarGrouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_efgef.String(), start)
}
func (_fbaeda ST_PageSetupOrientation) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_acdaee := _b.Attr{}
	_acdaee.Name = name
	switch _fbaeda {
	case ST_PageSetupOrientationUnset:
		_acdaee.Value = ""
	case ST_PageSetupOrientationDefault:
		_acdaee.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_acdaee.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_acdaee.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _acdaee, nil
}
func (_cbegd *ST_CrossBetween) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cbegd = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_cbegd = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_cbegd = 2
	}
	return nil
}

type ST_Crosses byte

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

// Validate validates the CT_TrendlineLbl and its children
func (_dbbbc *CT_TrendlineLbl) Validate() error {
	return _dbbbc.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}
func (_cdagg *ST_SplitType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gcccg, _egcad := d.Token()
	if _egcad != nil {
		return _egcad
	}
	if _cdbge, _ffdec := _gcccg.(_b.EndElement); _ffdec && _cdbge.Name == start.Name {
		*_cdagg = 1
		return nil
	}
	if _ceabe, _bedad := _gcccg.(_b.CharData); !_bedad {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gcccg)
	} else {
		switch string(_ceabe) {
		case "":
			*_cdagg = 0
		case "\u0061\u0075\u0074\u006f":
			*_cdagg = 1
		case "\u0063\u0075\u0073\u0074":
			*_cdagg = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_cdagg = 3
		case "\u0070\u006f\u0073":
			*_cdagg = 4
		case "\u0076\u0061\u006c":
			*_cdagg = 5
		}
	}
	_gcccg, _egcad = d.Token()
	if _egcad != nil {
		return _egcad
	}
	if _eggba, _geeb := _gcccg.(_b.EndElement); _geeb && _eggba.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gcccg)
}

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_ecgdb *CT_LayoutMode) ValidateWithPath(path string) error {
	if _baga := _ecgdb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _baga != nil {
		return _baga
	}
	return nil
}
func (_deeef *CT_Legend) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fcbdg:
	for {
		_bcfa, _cgged := d.Token()
		if _cgged != nil {
			return _cgged
		}
		switch _adgc := _bcfa.(type) {
		case _b.StartElement:
			switch _adgc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_deeef.LegendPos = NewCT_LegendPos()
				if _gbaa := d.DecodeElement(_deeef.LegendPos, &_adgc); _gbaa != nil {
					return _gbaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_bcga := NewCT_LegendEntry()
				if _ggecb := d.DecodeElement(_bcga, &_adgc); _ggecb != nil {
					return _ggecb
				}
				_deeef.LegendEntry = append(_deeef.LegendEntry, _bcga)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_deeef.Layout = NewCT_Layout()
				if _ggabe := d.DecodeElement(_deeef.Layout, &_adgc); _ggabe != nil {
					return _ggabe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_deeef.Overlay = NewCT_Boolean()
				if _cabb := d.DecodeElement(_deeef.Overlay, &_adgc); _cabb != nil {
					return _cabb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_deeef.SpPr = _f.NewCT_ShapeProperties()
				if _gcfgg := d.DecodeElement(_deeef.SpPr, &_adgc); _gcfgg != nil {
					return _gcfgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_deeef.TxPr = _f.NewCT_TextBody()
				if _gecb := d.DecodeElement(_deeef.TxPr, &_adgc); _gecb != nil {
					return _gecb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deeef.ExtLst = NewCT_ExtensionList()
				if _cecb := d.DecodeElement(_deeef.ExtLst, &_adgc); _cecb != nil {
					return _cecb
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _adgc.Name)
				if _dfbd := d.Skip(); _dfbd != nil {
					return _dfbd
				}
			}
		case _b.EndElement:
			break _fcbdg
		case _b.CharData:
		}
	}
	return nil
}
func (_abaga ST_BuiltInUnit) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ccbc := _b.Attr{}
	_ccbc.Name = name
	switch _abaga {
	case ST_BuiltInUnitUnset:
		_ccbc.Value = ""
	case ST_BuiltInUnitHundreds:
		_ccbc.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_ccbc.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_ccbc.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_ccbc.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_ccbc.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_ccbc.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_ccbc.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_ccbc.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_ccbc.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _ccbc, nil
}

// Validate validates the CT_DispUnits and its children
func (_abbf *CT_DispUnits) Validate() error {
	return _abbf.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}
func (_ggebe *ST_Orientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ccfcd, _efcef := d.Token()
	if _efcef != nil {
		return _efcef
	}
	if _fcfdc, _acbc := _ccfcd.(_b.EndElement); _acbc && _fcfdc.Name == start.Name {
		*_ggebe = 1
		return nil
	}
	if _facfg, _feebf := _ccfcd.(_b.CharData); !_feebf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccfcd)
	} else {
		switch string(_facfg) {
		case "":
			*_ggebe = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_ggebe = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_ggebe = 2
		}
	}
	_ccfcd, _efcef = d.Token()
	if _efcef != nil {
		return _efcef
	}
	if _geff, _eefagg := _ccfcd.(_b.EndElement); _eefagg && _geff.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccfcd)
}
func (_efdcd *CT_UpDownBars) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _efdcd.GapWidth != nil {
		_caggg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_efdcd.GapWidth, _caggg)
	}
	if _efdcd.UpBars != nil {
		_fdbbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_efdcd.UpBars, _fdbbb)
	}
	if _efdcd.DownBars != nil {
		_eccbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_efdcd.DownBars, _eccbd)
	}
	if _efdcd.ExtLst != nil {
		_adegd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efdcd.ExtLst, _adegd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_eccff *ST_LblOffset) Validate() error { return _eccff.ValidateWithPath("") }

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_fecf *CT_DepthPercent) ValidateWithPath(path string) error {
	if _fecf.ValAttr != nil {
		if _ceeb := _fecf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ceeb != nil {
			return _ceeb
		}
	}
	return nil
}
func (_fggdd ST_BarGrouping) Validate() error { return _fggdd.ValidateWithPath("") }

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_dfbf *CT_LegendEntry) ValidateWithPath(path string) error {
	if _bfdfb := _dfbf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bfdfb != nil {
		return _bfdfb
	}
	if _dfbf.Choice != nil {
		if _afdbcf := _dfbf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _afdbcf != nil {
			return _afdbcf
		}
	}
	if _dfbf.ExtLst != nil {
		if _afaa := _dfbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afaa != nil {
			return _afaa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_afab *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _afab.AreaChart != nil {
		if _bcfaa := _afab.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _bcfaa != nil {
			return _bcfaa
		}
	}
	if _afab.Area3DChart != nil {
		if _gbfdf := _afab.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _gbfdf != nil {
			return _gbfdf
		}
	}
	if _afab.LineChart != nil {
		if _ebef := _afab.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _ebef != nil {
			return _ebef
		}
	}
	if _afab.Line3DChart != nil {
		if _cdbe := _afab.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _cdbe != nil {
			return _cdbe
		}
	}
	if _afab.StockChart != nil {
		if _gbbb := _afab.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _gbbb != nil {
			return _gbbb
		}
	}
	if _afab.RadarChart != nil {
		if _ddgb := _afab.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _ddgb != nil {
			return _ddgb
		}
	}
	if _afab.ScatterChart != nil {
		if _gdfge := _afab.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _gdfge != nil {
			return _gdfge
		}
	}
	if _afab.PieChart != nil {
		if _afcf := _afab.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _afcf != nil {
			return _afcf
		}
	}
	if _afab.Pie3DChart != nil {
		if _bgbeag := _afab.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _bgbeag != nil {
			return _bgbeag
		}
	}
	if _afab.DoughnutChart != nil {
		if _edcaa := _afab.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _edcaa != nil {
			return _edcaa
		}
	}
	if _afab.BarChart != nil {
		if _dbcef := _afab.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _dbcef != nil {
			return _dbcef
		}
	}
	if _afab.Bar3DChart != nil {
		if _afbg := _afab.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _afbg != nil {
			return _afbg
		}
	}
	if _afab.OfPieChart != nil {
		if _gdeg := _afab.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _gdeg != nil {
			return _gdeg
		}
	}
	if _afab.SurfaceChart != nil {
		if _dccg := _afab.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _dccg != nil {
			return _dccg
		}
	}
	if _afab.Surface3DChart != nil {
		if _ceca := _afab.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _ceca != nil {
			return _ceca
		}
	}
	if _afab.BubbleChart != nil {
		if _cgecbd := _afab.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _cgecbd != nil {
			return _cgecbd
		}
	}
	return nil
}
func (_gcd *CT_BandFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gddd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gcd.Idx, _gddd)
	if _gcd.SpPr != nil {
		_ddf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcd.SpPr, _ddf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

func (_gcgd *CT_PivotFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bbfde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gcgd.Idx, _bbfde)
	if _gcgd.SpPr != nil {
		_fgadb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcgd.SpPr, _fgadb)
	}
	if _gcgd.TxPr != nil {
		_aaeed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gcgd.TxPr, _aaeed)
	}
	if _gcgd.Marker != nil {
		_aeceb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_gcgd.Marker, _aeceb)
	}
	if _gcgd.DLbl != nil {
		_eebfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_gcgd.DLbl, _eebfg)
	}
	if _gcgd.ExtLst != nil {
		_bbag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcgd.ExtLst, _bbag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gdefc ST_Grouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_gdefc.String(), start)
}
func NewCT_DPt() *CT_DPt { _dacf := &CT_DPt{}; _dacf.Idx = NewCT_UnsignedInt(); return _dacf }
func (_bbcfd *Group_DLbls) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ebegbd:
	for {
		_ebeecf, _fdbea := d.Token()
		if _fdbea != nil {
			return _fdbea
		}
		switch _ecgad := _ebeecf.(type) {
		case _b.StartElement:
			switch _ecgad.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_bbcfd.NumFmt = NewCT_NumFmt()
				if _addfd := d.DecodeElement(_bbcfd.NumFmt, &_ecgad); _addfd != nil {
					return _addfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bbcfd.SpPr = _f.NewCT_ShapeProperties()
				if _faea := d.DecodeElement(_bbcfd.SpPr, &_ecgad); _faea != nil {
					return _faea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bbcfd.TxPr = _f.NewCT_TextBody()
				if _dffbg := d.DecodeElement(_bbcfd.TxPr, &_ecgad); _dffbg != nil {
					return _dffbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_bbcfd.DLblPos = NewCT_DLblPos()
				if _gcfc := d.DecodeElement(_bbcfd.DLblPos, &_ecgad); _gcfc != nil {
					return _gcfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_bbcfd.ShowLegendKey = NewCT_Boolean()
				if _daefae := d.DecodeElement(_bbcfd.ShowLegendKey, &_ecgad); _daefae != nil {
					return _daefae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_bbcfd.ShowVal = NewCT_Boolean()
				if _gcege := d.DecodeElement(_bbcfd.ShowVal, &_ecgad); _gcege != nil {
					return _gcege
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_bbcfd.ShowCatName = NewCT_Boolean()
				if _gefaf := d.DecodeElement(_bbcfd.ShowCatName, &_ecgad); _gefaf != nil {
					return _gefaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_bbcfd.ShowSerName = NewCT_Boolean()
				if _egcf := d.DecodeElement(_bbcfd.ShowSerName, &_ecgad); _egcf != nil {
					return _egcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bbcfd.ShowPercent = NewCT_Boolean()
				if _cggbd := d.DecodeElement(_bbcfd.ShowPercent, &_ecgad); _cggbd != nil {
					return _cggbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_bbcfd.ShowBubbleSize = NewCT_Boolean()
				if _gegbc := d.DecodeElement(_bbcfd.ShowBubbleSize, &_ecgad); _gegbc != nil {
					return _gegbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_bbcfd.Separator = new(string)
				if _ceacf := d.DecodeElement(_bbcfd.Separator, &_ecgad); _ceacf != nil {
					return _ceacf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_bbcfd.ShowLeaderLines = NewCT_Boolean()
				if _gdefg := d.DecodeElement(_bbcfd.ShowLeaderLines, &_ecgad); _gdefg != nil {
					return _gdefg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_bbcfd.LeaderLines = NewCT_ChartLines()
				if _caacf := d.DecodeElement(_bbcfd.LeaderLines, &_ecgad); _caacf != nil {
					return _caacf
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _ecgad.Name)
				if _cdgagf := d.Skip(); _cdgagf != nil {
					return _cdgagf
				}
			}
		case _b.EndElement:
			break _ebegbd
		case _b.CharData:
		}
	}
	return nil
}
func (_egea *CT_ErrValType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aedg := range start.Attr {
		if _aedg.Name.Local == "\u0076\u0061\u006c" {
			_egea.ValAttr.UnmarshalXMLAttr(_aedg)
			continue
		}
	}
	for {
		_ggeg, _ceba := d.Token()
		if _ceba != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _ceba)
		}
		if _gbca, _gdge := _ggeg.(_b.EndElement); _gdge && _gbca.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dddf *CT_Crosses) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_bgg, _eefd := _dddf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _eefd != nil {
		return _eefd
	}
	start.Attr = append(start.Attr, _bgg)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_beadb *CT_PictureFormat) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_beadb.ValAttr = ST_PictureFormat(1)
	for _, _ddbga := range start.Attr {
		if _ddbga.Name.Local == "\u0076\u0061\u006c" {
			_beadb.ValAttr.UnmarshalXMLAttr(_ddbga)
			continue
		}
	}
	for {
		_fcbeb, _aadbb := d.Token()
		if _aadbb != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _aadbb)
		}
		if _gdacab, _edbe := _fcbeb.(_b.EndElement); _edbe && _gdacab.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_dbfe *CT_GapAmount) ValidateWithPath(path string) error {
	if _dbfe.ValAttr != nil {
		if _dbcbf := _dbfe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dbcbf != nil {
			return _dbcbf
		}
	}
	return nil
}
func NewCT_MarkerSize() *CT_MarkerSize { _gbfag := &CT_MarkerSize{}; return _gbfag }

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_gccb *CT_LblAlgn) ValidateWithPath(path string) error {
	if _gccb.ValAttr == ST_LblAlgnUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _fbefb := _gccb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fbefb != nil {
		return _fbefb
	}
	return nil
}
func NewCT_AxisUnit() *CT_AxisUnit { _caf := &CT_AxisUnit{}; _caf.ValAttr = 0 + 1; return _caf }
func (_edggc *CT_LogBase) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edggc.ValAttr = 2
	for _, _adcbd := range start.Attr {
		if _adcbd.Name.Local == "\u0076\u0061\u006c" {
			_dbagbd, _ebcga := _bd.ParseFloat(_adcbd.Value, 64)
			if _ebcga != nil {
				return _ebcga
			}
			_edggc.ValAttr = _dbagbd
			continue
		}
	}
	for {
		_aefdg, _bfcdc := d.Token()
		if _bfcdc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _bfcdc)
		}
		if _aadde, _bcagf := _aefdg.(_b.EndElement); _bcagf && _aadde.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_DLblPos struct{ ValAttr ST_DLblPos }

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_degae *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _degae.VaryColors != nil {
		if _eccf := _degae.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _eccf != nil {
			return _eccf
		}
	}
	for _aged, _acbg := range _degae.Ser {
		if _bacg := _acbg.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aged)); _bacg != nil {
			return _bacg
		}
	}
	if _degae.DLbls != nil {
		if _ebggf := _degae.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebggf != nil {
			return _ebggf
		}
	}
	if _degae.ExtLst != nil {
		if _bgca := _degae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgca != nil {
			return _bgca
		}
	}
	return nil
}
func (_affg *CT_StrData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bbfgg:
	for {
		_dded, _ecdbb := d.Token()
		if _ecdbb != nil {
			return _ecdbb
		}
		switch _gffdd := _dded.(type) {
		case _b.StartElement:
			switch _gffdd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_affg.PtCount = NewCT_UnsignedInt()
				if _aafdb := d.DecodeElement(_affg.PtCount, &_gffdd); _aafdb != nil {
					return _aafdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_ffdef := NewCT_StrVal()
				if _afbfe := d.DecodeElement(_ffdef, &_gffdd); _afbfe != nil {
					return _afbfe
				}
				_affg.Pt = append(_affg.Pt, _ffdef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_affg.ExtLst = NewCT_ExtensionList()
				if _bdgge := d.DecodeElement(_affg.ExtLst, &_gffdd); _bdgge != nil {
					return _bdgge
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _gffdd.Name)
				if _bcebb := d.Skip(); _bcebb != nil {
					return _bcebb
				}
			}
		case _b.EndElement:
			break _bbfgg
		case _b.CharData:
		}
	}
	return nil
}
func (_daeb *CT_DispUnitsLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _daeb.Layout != nil {
		_fadd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_daeb.Layout, _fadd)
	}
	if _daeb.Tx != nil {
		_faacb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_daeb.Tx, _faacb)
	}
	if _daeb.SpPr != nil {
		_cbdea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_daeb.SpPr, _cbdea)
	}
	if _daeb.TxPr != nil {
		_cacaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_daeb.TxPr, _cacaa)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_DLblShared and its children
func (_ddbcga *EG_DLblShared) Validate() error {
	return _ddbcga.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_f.CT_ShapeProperties
}
type CT_TimeUnit struct{ ValAttr ST_TimeUnit }

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)

// Validate validates the CT_SizeRepresents and its children
func (_eeedbe *CT_SizeRepresents) Validate() error {
	return _eeedbe.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}
func (_abeee ST_TrendlineType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cfbddb := _b.Attr{}
	_cfbddb.Name = name
	switch _abeee {
	case ST_TrendlineTypeUnset:
		_cfbddb.Value = ""
	case ST_TrendlineTypeExp:
		_cfbddb.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_cfbddb.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_cfbddb.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_cfbddb.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_cfbddb.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_cfbddb.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _cfbddb, nil
}
func (_gdbea *ChartSpace) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _gdbea.CT_ChartSpace.MarshalXML(e, start)
}
func (_bfee *CT_DoughnutChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bfee.VaryColors != nil {
		_gead := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bfee.VaryColors, _gead)
	}
	if _bfee.Ser != nil {
		_gbed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eeacf := range _bfee.Ser {
			e.EncodeElement(_eeacf, _gbed)
		}
	}
	if _bfee.DLbls != nil {
		_fecb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bfee.DLbls, _fecb)
	}
	if _bfee.FirstSliceAng != nil {
		_ecae := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_bfee.FirstSliceAng, _ecae)
	}
	if _bfee.HoleSize != nil {
		_edac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bfee.HoleSize, _edac)
	}
	if _bfee.ExtLst != nil {
		_dgcbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfee.ExtLst, _dgcbc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dgcac *ST_ErrDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fdgad, _egcdf := d.Token()
	if _egcdf != nil {
		return _egcdf
	}
	if _eabb, _dcbdd := _fdgad.(_b.EndElement); _dcbdd && _eabb.Name == start.Name {
		*_dgcac = 1
		return nil
	}
	if _dcdgb, _eefcf := _fdgad.(_b.CharData); !_eefcf {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdgad)
	} else {
		switch string(_dcdgb) {
		case "":
			*_dgcac = 0
		case "\u0078":
			*_dgcac = 1
		case "\u0079":
			*_dgcac = 2
		}
	}
	_fdgad, _egcdf = d.Token()
	if _egcdf != nil {
		return _egcdf
	}
	if _cfdf, _afccb := _fdgad.(_b.EndElement); _afccb && _cfdf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdgad)
}

type CT_DLbls struct {
	DLbl   []*CT_DLbl
	Choice *CT_DLblsChoice
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_PlotArea and its children
func (_dcagd *CT_PlotArea) Validate() error {
	return _dcagd.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_abb *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _abb.MultiLvlStrRef != nil {
		if _bgcc := _abb.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _bgcc != nil {
			return _bgcc
		}
	}
	if _abb.NumRef != nil {
		if _fgef := _abb.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fgef != nil {
			return _fgef
		}
	}
	if _abb.NumLit != nil {
		if _agg := _abb.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _agg != nil {
			return _agg
		}
	}
	if _abb.StrRef != nil {
		if _bdgd := _abb.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _bdgd != nil {
			return _bdgd
		}
	}
	if _abb.StrLit != nil {
		if _fggb := _abb.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _fggb != nil {
			return _fggb
		}
	}
	return nil
}
func (_geaad *CT_PageSetup) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fcgaf := range start.Attr {
		if _fcgaf.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_afeced, _eefbb := _bd.ParseUint(_fcgaf.Value, 10, 32)
			if _eefbb != nil {
				return _eefbb
			}
			_bdbcc := uint32(_afeced)
			_geaad.PaperSizeAttr = &_bdbcc
			continue
		}
		if _fcgaf.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_fegf, _degc := _fcgaf.Value, error(nil)
			if _degc != nil {
				return _degc
			}
			_geaad.PaperHeightAttr = &_fegf
			continue
		}
		if _fcgaf.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_bcefd, _cfecc := _fcgaf.Value, error(nil)
			if _cfecc != nil {
				return _cfecc
			}
			_geaad.PaperWidthAttr = &_bcefd
			continue
		}
		if _fcgaf.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_gcbda, _dfgc := _bd.ParseUint(_fcgaf.Value, 10, 32)
			if _dfgc != nil {
				return _dfgc
			}
			_bdf := uint32(_gcbda)
			_geaad.FirstPageNumberAttr = &_bdf
			continue
		}
		if _fcgaf.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_geaad.OrientationAttr.UnmarshalXMLAttr(_fcgaf)
			continue
		}
		if _fcgaf.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_adcc, _becb := _bd.ParseBool(_fcgaf.Value)
			if _becb != nil {
				return _becb
			}
			_geaad.BlackAndWhiteAttr = &_adcc
			continue
		}
		if _fcgaf.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_bceb, _gbcgb := _bd.ParseBool(_fcgaf.Value)
			if _gbcgb != nil {
				return _gbcgb
			}
			_geaad.DraftAttr = &_bceb
			continue
		}
		if _fcgaf.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_fedg, _gdcbd := _bd.ParseBool(_fcgaf.Value)
			if _gdcbd != nil {
				return _gdcbd
			}
			_geaad.UseFirstPageNumberAttr = &_fedg
			continue
		}
		if _fcgaf.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_cbdc, _baae := _bd.ParseInt(_fcgaf.Value, 10, 32)
			if _baae != nil {
				return _baae
			}
			_gebf := int32(_cbdc)
			_geaad.HorizontalDpiAttr = &_gebf
			continue
		}
		if _fcgaf.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_dbaa, _badde := _bd.ParseInt(_fcgaf.Value, 10, 32)
			if _badde != nil {
				return _badde
			}
			_eagcb := int32(_dbaa)
			_geaad.VerticalDpiAttr = &_eagcb
			continue
		}
		if _fcgaf.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_fbed, _dceg := _bd.ParseUint(_fcgaf.Value, 10, 32)
			if _dceg != nil {
				return _dceg
			}
			_afafd := uint32(_fbed)
			_geaad.CopiesAttr = &_afafd
			continue
		}
	}
	for {
		_fecae, _dddcgg := d.Token()
		if _dddcgg != nil {
			return _aa.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _dddcgg)
		}
		if _adfgb, _dedc := _fecae.(_b.EndElement); _dedc && _adfgb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_AreaSer and its children
func (_dffd *CT_AreaSer) Validate() error {
	return _dffd.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}

type CT_PageSetup struct {
	PaperSizeAttr          *uint32
	PaperHeightAttr        *string
	PaperWidthAttr         *string
	FirstPageNumberAttr    *uint32
	OrientationAttr        ST_PageSetupOrientation
	BlackAndWhiteAttr      *bool
	DraftAttr              *bool
	UseFirstPageNumberAttr *bool
	HorizontalDpiAttr      *int32
	VerticalDpiAttr        *int32
	CopiesAttr             *uint32
}

func (_addga ST_Shape) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_egfgf := _b.Attr{}
	_egfgf.Name = name
	switch _addga {
	case ST_ShapeUnset:
		_egfgf.Value = ""
	case ST_ShapeCone:
		_egfgf.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_egfgf.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_egfgf.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_egfgf.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_egfgf.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_egfgf.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _egfgf, nil
}
func (_fccd *CT_ExtensionList) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fdae:
	for {
		_abdd, _ddbf := d.Token()
		if _ddbf != nil {
			return _ddbf
		}
		switch _accce := _abdd.(type) {
		case _b.StartElement:
			switch _accce.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_deae := NewCT_Extension()
				if _gfeag := d.DecodeElement(_deae, &_accce); _gfeag != nil {
					return _gfeag
				}
				_fccd.Ext = append(_fccd.Ext, _deae)
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _accce.Name)
				if _fcac := d.Skip(); _fcac != nil {
					return _fcac
				}
			}
		case _b.EndElement:
			break _fdae
		case _b.CharData:
		}
	}
	return nil
}
func (_dfcb ST_ErrDir) ValidateWithPath(path string) error {
	switch _dfcb {
	case 0, 1, 2:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfcb))
	}
	return nil
}
func (_gabc *UserShapes) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _gabc.CT_Drawing.MarshalXML(e, start)
}
func (_feegb *ST_RadarStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ffab, _bbeea := d.Token()
	if _bbeea != nil {
		return _bbeea
	}
	if _cebbc, _cefad := _ffab.(_b.EndElement); _cefad && _cebbc.Name == start.Name {
		*_feegb = 1
		return nil
	}
	if _dgfeg, _dcge := _ffab.(_b.CharData); !_dcge {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffab)
	} else {
		switch string(_dgfeg) {
		case "":
			*_feegb = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_feegb = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_feegb = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_feegb = 3
		}
	}
	_ffab, _bbeea = d.Token()
	if _bbeea != nil {
		return _bbeea
	}
	if _fdefa, _afaga := _ffab.(_b.EndElement); _afaga && _fdefa.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffab)
}

type CT_Perspective struct{ ValAttr *uint8 }

// Validate validates the CT_BandFmts and its children
func (_gdab *CT_BandFmts) Validate() error {
	return _gdab.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}
func (_aegf *CT_TickMark) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _aegf.ValAttr != ST_TickMarkUnset {
		_aecec, _babfa := _aegf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _babfa != nil {
			return _babfa
		}
		start.Attr = append(start.Attr, _aecec)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Shape() *CT_Shape               { _gbab := &CT_Shape{}; return _gbab }
func NewCT_SurfaceChart() *CT_SurfaceChart { _fafgc := &CT_SurfaceChart{}; return _fafgc }

type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}

func (_gcdc *CT_DLbls) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bdaa:
	for {
		_effa, _fgea := d.Token()
		if _fgea != nil {
			return _fgea
		}
		switch _ffegc := _effa.(type) {
		case _b.StartElement:
			switch _ffegc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_efeg := NewCT_DLbl()
				if _dfea := d.DecodeElement(_efeg, &_ffegc); _dfea != nil {
					return _dfea
				}
				_gcdc.DLbl = append(_gcdc.DLbl, _efeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _abaa := d.DecodeElement(&_gcdc.Choice.Delete, &_ffegc); _abaa != nil {
					return _abaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _bbcc := d.DecodeElement(&_gcdc.Choice.NumFmt, &_ffegc); _bbcc != nil {
					return _bbcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _eefb := d.DecodeElement(&_gcdc.Choice.SpPr, &_ffegc); _eefb != nil {
					return _eefb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _cdfg := d.DecodeElement(&_gcdc.Choice.TxPr, &_ffegc); _cdfg != nil {
					return _cdfg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _gggcc := d.DecodeElement(&_gcdc.Choice.DLblPos, &_ffegc); _gggcc != nil {
					return _gggcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _aeac := d.DecodeElement(&_gcdc.Choice.ShowLegendKey, &_ffegc); _aeac != nil {
					return _aeac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _gdbce := d.DecodeElement(&_gcdc.Choice.ShowVal, &_ffegc); _gdbce != nil {
					return _gdbce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _acde := d.DecodeElement(&_gcdc.Choice.ShowCatName, &_ffegc); _acde != nil {
					return _acde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _bacb := d.DecodeElement(&_gcdc.Choice.ShowSerName, &_ffegc); _bacb != nil {
					return _bacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _dgg := d.DecodeElement(&_gcdc.Choice.ShowPercent, &_ffegc); _dgg != nil {
					return _dgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _cccg := d.DecodeElement(&_gcdc.Choice.ShowBubbleSize, &_ffegc); _cccg != nil {
					return _cccg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _efce := d.DecodeElement(&_gcdc.Choice.Separator, &_ffegc); _efce != nil {
					return _efce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _beca := d.DecodeElement(&_gcdc.Choice.ShowLeaderLines, &_ffegc); _beca != nil {
					return _beca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _gcdc.Choice == nil {
					_gcdc.Choice = NewCT_DLblsChoice()
				}
				if _daac := d.DecodeElement(&_gcdc.Choice.LeaderLines, &_ffegc); _daac != nil {
					return _daac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gcdc.ExtLst = NewCT_ExtensionList()
				if _gdace := d.DecodeElement(_gcdc.ExtLst, &_ffegc); _gdace != nil {
					return _gdace
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _ffegc.Name)
				if _ecec := d.Skip(); _ecec != nil {
					return _ecec
				}
			}
		case _b.EndElement:
			break _bdaa
		case _b.CharData:
		}
	}
	return nil
}
func (_ebbf *CT_ChartSpace) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ebbf.Date1904 != nil {
		_bafa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_ebbf.Date1904, _bafa)
	}
	if _ebbf.Lang != nil {
		_abad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_ebbf.Lang, _abad)
	}
	if _ebbf.RoundedCorners != nil {
		_ccca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_ebbf.RoundedCorners, _ccca)
	}
	if _ebbf.Style != nil {
		_bgbf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_ebbf.Style, _bgbf)
	}
	if _ebbf.ClrMapOvr != nil {
		_aggb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_ebbf.ClrMapOvr, _aggb)
	}
	if _ebbf.PivotSource != nil {
		_fcbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_ebbf.PivotSource, _fcbf)
	}
	if _ebbf.Protection != nil {
		_cbfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_ebbf.Protection, _cbfe)
	}
	_fcafa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_ebbf.Chart, _fcafa)
	if _ebbf.SpPr != nil {
		_aecg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebbf.SpPr, _aecg)
	}
	if _ebbf.TxPr != nil {
		_afbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebbf.TxPr, _afbd)
	}
	if _ebbf.ExternalData != nil {
		_cfda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_ebbf.ExternalData, _cfda)
	}
	if _ebbf.PrintSettings != nil {
		_eddb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_ebbf.PrintSettings, _eddb)
	}
	if _ebbf.UserShapes != nil {
		_cgcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_ebbf.UserShapes, _cgcc)
	}
	if _ebbf.ExtLst != nil {
		_egaeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebbf.ExtLst, _egaeg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BarGrouping and its children
func (_bag *CT_BarGrouping) Validate() error {
	return _bag.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}
func (_aebfa ST_MarkerStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ddfca := _b.Attr{}
	_ddfca.Name = name
	switch _aebfa {
	case ST_MarkerStyleUnset:
		_ddfca.Value = ""
	case ST_MarkerStyleCircle:
		_ddfca.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_ddfca.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_ddfca.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_ddfca.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_ddfca.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_ddfca.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_ddfca.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_ddfca.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_ddfca.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_ddfca.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_ddfca.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_ddfca.Value = "\u0061\u0075\u0074\u006f"
	}
	return _ddfca, nil
}
func NewCT_Layout() *CT_Layout { _age := &CT_Layout{}; return _age }

type CT_OfPieType struct{ ValAttr ST_OfPieType }

// Validate validates the CT_Protection and its children
func (_dafdc *CT_Protection) Validate() error {
	return _dafdc.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_edfed *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _edfed.ValAttr <= 0 {
		return _aa.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _edfed.ValAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_eeee *CT_MarkerSize) ValidateWithPath(path string) error {
	if _eeee.ValAttr != nil {
		if *_eeee.ValAttr < 2 {
			return _aa.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_eeee.ValAttr)
		}
		if *_eeee.ValAttr > 72 {
			return _aa.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_eeee.ValAttr)
		}
	}
	return nil
}
func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_fcba, _aebae := _bd.ParseUint(s, 10, 16)
	if _aebae != nil {
		return ST_DepthPercent{}, _aebae
	}
	_fdcbbg := uint16(_fcba)
	return ST_DepthPercent{ST_DepthPercentUShort: &_fdcbbg}, nil
}

type EG_LineChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

func NewCT_DispUnitsLbl() *CT_DispUnitsLbl { _ecfc := &CT_DispUnitsLbl{}; return _ecfc }

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_dgad *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _dgad.PtCount != nil {
		if _agab := _dgad.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _agab != nil {
			return _agab
		}
	}
	for _cadf, _fcddf := range _dgad.Lvl {
		if _egfcb := _fcddf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _cadf)); _egfcb != nil {
			return _egfcb
		}
	}
	if _dgad.ExtLst != nil {
		if _edgff := _dgad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edgff != nil {
			return _edgff
		}
	}
	return nil
}

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_agde *CT_PieSer) ValidateWithPath(path string) error {
	if _gfaf := _agde.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gfaf != nil {
		return _gfaf
	}
	if _abega := _agde.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _abega != nil {
		return _abega
	}
	if _agde.Tx != nil {
		if _baaec := _agde.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _baaec != nil {
			return _baaec
		}
	}
	if _agde.SpPr != nil {
		if _deag := _agde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _deag != nil {
			return _deag
		}
	}
	if _agde.Explosion != nil {
		if _egcg := _agde.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _egcg != nil {
			return _egcg
		}
	}
	for _fbagb, _fafefa := range _agde.DPt {
		if _ebaf := _fafefa.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fbagb)); _ebaf != nil {
			return _ebaf
		}
	}
	if _agde.DLbls != nil {
		if _afef := _agde.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _afef != nil {
			return _afef
		}
	}
	if _agde.Cat != nil {
		if _edga := _agde.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _edga != nil {
			return _edga
		}
	}
	if _agde.Val != nil {
		if _gabgc := _agde.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _gabgc != nil {
			return _gabgc
		}
	}
	if _agde.ExtLst != nil {
		if _edfee := _agde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edfee != nil {
			return _edfee
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_effbb *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _effbb.Wireframe != nil {
		if _afagd := _effbb.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _afagd != nil {
			return _afagd
		}
	}
	for _abee, _daefbf := range _effbb.Ser {
		if _dggfc := _daefbf.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _abee)); _dggfc != nil {
			return _dggfc
		}
	}
	if _effbb.BandFmts != nil {
		if _ecab := _effbb.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _ecab != nil {
			return _ecab
		}
	}
	for _edef, _aadcg := range _effbb.AxId {
		if _dadca := _aadcg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _edef)); _dadca != nil {
			return _dadca
		}
	}
	if _effbb.ExtLst != nil {
		if _acfdd := _effbb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acfdd != nil {
			return _acfdd
		}
	}
	return nil
}
func (_abbfa ST_ScatterStyle) Validate() error { return _abbfa.ValidateWithPath("") }
func (_eaebdd *CT_PictureOptions) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bagd:
	for {
		_bbbfd, _cefab := d.Token()
		if _cefab != nil {
			return _cefab
		}
		switch _dddeec := _bbbfd.(type) {
		case _b.StartElement:
			switch _dddeec.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_eaebdd.ApplyToFront = NewCT_Boolean()
				if _cafa := d.DecodeElement(_eaebdd.ApplyToFront, &_dddeec); _cafa != nil {
					return _cafa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_eaebdd.ApplyToSides = NewCT_Boolean()
				if _ccea := d.DecodeElement(_eaebdd.ApplyToSides, &_dddeec); _ccea != nil {
					return _ccea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_eaebdd.ApplyToEnd = NewCT_Boolean()
				if _cdde := d.DecodeElement(_eaebdd.ApplyToEnd, &_dddeec); _cdde != nil {
					return _cdde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_eaebdd.PictureFormat = NewCT_PictureFormat()
				if _bfgf := d.DecodeElement(_eaebdd.PictureFormat, &_dddeec); _bfgf != nil {
					return _bfgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_eaebdd.PictureStackUnit = NewCT_PictureStackUnit()
				if _adfaf := d.DecodeElement(_eaebdd.PictureStackUnit, &_dddeec); _adfaf != nil {
					return _adfaf
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _dddeec.Name)
				if _cedda := d.Skip(); _cedda != nil {
					return _cedda
				}
			}
		case _b.EndElement:
			break _bagd
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_dbce *CT_ExternalData) ValidateWithPath(path string) error {
	if _dbce.AutoUpdate != nil {
		if _fgdbc := _dbce.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _fgdbc != nil {
			return _fgdbc
		}
	}
	return nil
}

type CT_SerTx struct{ Choice *CT_SerTxChoice }

func (_eggea ST_ErrDir) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bdab := _b.Attr{}
	_bdab.Name = name
	switch _eggea {
	case ST_ErrDirUnset:
		_bdab.Value = ""
	case ST_ErrDirX:
		_bdab.Value = "\u0078"
	case ST_ErrDirY:
		_bdab.Value = "\u0079"
	}
	return _bdab, nil
}
func NewCT_TrendlineLbl() *CT_TrendlineLbl { _eggge := &CT_TrendlineLbl{}; return _eggge }
func (_gcdegb ST_AxPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_egceg := _b.Attr{}
	_egceg.Name = name
	switch _gcdegb {
	case ST_AxPosUnset:
		_egceg.Value = ""
	case ST_AxPosB:
		_egceg.Value = "\u0062"
	case ST_AxPosL:
		_egceg.Value = "\u006c"
	case ST_AxPosR:
		_egceg.Value = "\u0072"
	case ST_AxPosT:
		_egceg.Value = "\u0074"
	}
	return _egceg, nil
}
func NewCT_DTable() *CT_DTable { _decc := &CT_DTable{}; return _decc }
func (_cfde *CT_Title) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfde.Tx != nil {
		_gfbdaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cfde.Tx, _gfbdaa)
	}
	if _cfde.Layout != nil {
		_ddaac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_cfde.Layout, _ddaac)
	}
	if _cfde.Overlay != nil {
		_eabaab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_cfde.Overlay, _eabaab)
	}
	if _cfde.SpPr != nil {
		_dgbaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cfde.SpPr, _dgbaf)
	}
	if _cfde.TxPr != nil {
		_gaba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cfde.TxPr, _gaba)
	}
	if _cfde.ExtLst != nil {
		_afbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfde.ExtLst, _afbc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

func (_fabfe ST_Thickness) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fabfe.ST_ThicknessPercent != nil {
		e.EncodeToken(_b.CharData(*_fabfe.ST_ThicknessPercent))
	}
	if _fabfe.Uint32 != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_fabfe.Uint32)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_dffef *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _dffef.Wireframe != nil {
		if _efagd := _dffef.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _efagd != nil {
			return _efagd
		}
	}
	for _dbabe, _bffd := range _dffef.Ser {
		if _bdfg := _bffd.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dbabe)); _bdfg != nil {
			return _bdfg
		}
	}
	if _dffef.BandFmts != nil {
		if _adbbf := _dffef.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _adbbf != nil {
			return _adbbf
		}
	}
	for _ebaa, _deecg := range _dffef.AxId {
		if _cabge := _deecg.ValidateWithPath(_aa.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ebaa)); _cabge != nil {
			return _cabge
		}
	}
	if _dffef.ExtLst != nil {
		if _edbec := _dffef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edbec != nil {
			return _edbec
		}
	}
	return nil
}
func (_dbgc *CT_Line3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dbgc.Grouping = NewCT_Grouping()
_egdb:
	for {
		_cgbe, _ccfc := d.Token()
		if _ccfc != nil {
			return _ccfc
		}
		switch _dbcf := _cgbe.(type) {
		case _b.StartElement:
			switch _dbcf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _efegb := d.DecodeElement(_dbgc.Grouping, &_dbcf); _efegb != nil {
					return _efegb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dbgc.VaryColors = NewCT_Boolean()
				if _agdc := d.DecodeElement(_dbgc.VaryColors, &_dbcf); _agdc != nil {
					return _agdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_beda := NewCT_LineSer()
				if _egcd := d.DecodeElement(_beda, &_dbcf); _egcd != nil {
					return _egcd
				}
				_dbgc.Ser = append(_dbgc.Ser, _beda)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dbgc.DLbls = NewCT_DLbls()
				if _gdadd := d.DecodeElement(_dbgc.DLbls, &_dbcf); _gdadd != nil {
					return _gdadd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_dbgc.DropLines = NewCT_ChartLines()
				if _bebd := d.DecodeElement(_dbgc.DropLines, &_dbcf); _bebd != nil {
					return _bebd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_dbgc.GapDepth = NewCT_GapAmount()
				if _cegd := d.DecodeElement(_dbgc.GapDepth, &_dbcf); _cegd != nil {
					return _cegd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cfca := NewCT_UnsignedInt()
				if _agcb := d.DecodeElement(_cfca, &_dbcf); _agcb != nil {
					return _agcb
				}
				_dbgc.AxId = append(_dbgc.AxId, _cfca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbgc.ExtLst = NewCT_ExtensionList()
				if _gcbce := d.DecodeElement(_dbgc.ExtLst, &_dbcf); _gcbce != nil {
					return _gcbce
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _dbcf.Name)
				if _cgbf := d.Skip(); _cgbf != nil {
					return _cgbf
				}
			}
		case _b.EndElement:
			break _egdb
		case _b.CharData:
		}
	}
	return nil
}
func (_daaf *CT_UpDownBar) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _daaf.SpPr != nil {
		_bffff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_daaf.SpPr, _bffff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebca ST_LegendPos) Validate() error { return _ebca.ValidateWithPath("") }

type ST_BarDir byte

func (_cccfa ST_OfPieType) Validate() error { return _cccfa.ValidateWithPath("") }
func (_fafcaf ST_RadarStyle) String() string {
	switch _fafcaf {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_dggd *CT_DateAx) ValidateWithPath(path string) error {
	if _dgbf := _dggd.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _dgbf != nil {
		return _dgbf
	}
	if _eecf := _dggd.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _eecf != nil {
		return _eecf
	}
	if _dggd.Delete != nil {
		if _afbf := _dggd.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _afbf != nil {
			return _afbf
		}
	}
	if _faae := _dggd.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _faae != nil {
		return _faae
	}
	if _dggd.MajorGridlines != nil {
		if _dggg := _dggd.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dggg != nil {
			return _dggg
		}
	}
	if _dggd.MinorGridlines != nil {
		if _cbfga := _dggd.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cbfga != nil {
			return _cbfga
		}
	}
	if _dggd.Title != nil {
		if _dage := _dggd.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _dage != nil {
			return _dage
		}
	}
	if _dggd.NumFmt != nil {
		if _efaf := _dggd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _efaf != nil {
			return _efaf
		}
	}
	if _dggd.MajorTickMark != nil {
		if _gegc := _dggd.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gegc != nil {
			return _gegc
		}
	}
	if _dggd.MinorTickMark != nil {
		if _cgff := _dggd.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cgff != nil {
			return _cgff
		}
	}
	if _dggd.TickLblPos != nil {
		if _cbbf := _dggd.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _cbbf != nil {
			return _cbbf
		}
	}
	if _dggd.SpPr != nil {
		if _edcc := _dggd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edcc != nil {
			return _edcc
		}
	}
	if _dggd.TxPr != nil {
		if _gffb := _dggd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gffb != nil {
			return _gffb
		}
	}
	if _efgbe := _dggd.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _efgbe != nil {
		return _efgbe
	}
	if _dggd.Choice != nil {
		if _acffg := _dggd.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _acffg != nil {
			return _acffg
		}
	}
	if _dggd.Auto != nil {
		if _cgacf := _dggd.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _cgacf != nil {
			return _cgacf
		}
	}
	if _dggd.LblOffset != nil {
		if _acec := _dggd.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _acec != nil {
			return _acec
		}
	}
	if _dggd.BaseTimeUnit != nil {
		if _eged := _dggd.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _eged != nil {
			return _eged
		}
	}
	if _dggd.MajorUnit != nil {
		if _acgfc := _dggd.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _acgfc != nil {
			return _acgfc
		}
	}
	if _dggd.MajorTimeUnit != nil {
		if _gcdeg := _dggd.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _gcdeg != nil {
			return _gcdeg
		}
	}
	if _dggd.MinorUnit != nil {
		if _fefa := _dggd.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _fefa != nil {
			return _fefa
		}
	}
	if _dggd.MinorTimeUnit != nil {
		if _bfbb := _dggd.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _bfbb != nil {
			return _bfbb
		}
	}
	if _dggd.ExtLst != nil {
		if _aded := _dggd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aded != nil {
			return _aded
		}
	}
	return nil
}
func (_deccd ST_PageSetupOrientation) String() string {
	switch _deccd {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}
func (_cgdg ST_CrossBetween) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cgdg.String(), start)
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_aabab *CT_TickLblPos) ValidateWithPath(path string) error {
	if _bdebe := _aabab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bdebe != nil {
		return _bdebe
	}
	return nil
}

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_cgba *CT_Crosses) ValidateWithPath(path string) error {
	if _cgba.ValAttr == ST_CrossesUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bcgc := _cgba.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bcgc != nil {
		return _bcgc
	}
	return nil
}

type CT_NumRef struct {
	F        string
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}

func (_gbfad ST_HPercent) String() string {
	if _gbfad.ST_HPercentWithSymbol != nil {
		return _aa.Sprintf("\u0025\u0076", *_gbfad.ST_HPercentWithSymbol)
	}
	if _gbfad.ST_HPercentUShort != nil {
		return _aa.Sprintf("\u0025\u0076", *_gbfad.ST_HPercentUShort)
	}
	return ""
}
func (_ddddb ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _ddddb {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddddb))
	}
	return nil
}

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_aageg *CT_Thickness) ValidateWithPath(path string) error {
	if _gegb := _aageg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gegb != nil {
		return _gegb
	}
	return nil
}
func (_acgd ST_ErrValType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_acgd.String(), start)
}
func (_afged *CT_Protection) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _afged.ChartObject != nil {
		_ecacg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_afged.ChartObject, _ecacg)
	}
	if _afged.Data != nil {
		_cgbfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_afged.Data, _cgbfe)
	}
	if _afged.Formatting != nil {
		_ffgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_afged.Formatting, _ffgf)
	}
	if _afged.Selection != nil {
		_aafge := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_afged.Selection, _aafge)
	}
	if _afged.UserInterface != nil {
		_aegc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_afged.UserInterface, _aegc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_BubbleScale struct{ ValAttr *ST_BubbleScale }

func (_bcega ST_MarkerStyle) String() string {
	switch _bcega {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}
func (_bged *CT_PrintSettings) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bged.HeaderFooter != nil {
		_dadef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_bged.HeaderFooter, _dadef)
	}
	if _bged.PageMargins != nil {
		_cddf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_bged.PageMargins, _cddf)
	}
	if _bged.PageSetup != nil {
		_cdcce := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_bged.PageSetup, _cdcce)
	}
	if _bged.LegacyDrawingHF != nil {
		_fbaga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_bged.LegacyDrawingHF, _fbaga)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_BubbleSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_f.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          []*CT_ErrBars
	XVal             *CT_AxDataSource
	YVal             *CT_NumDataSource
	BubbleSize       *CT_NumDataSource
	Bubble3D         *CT_Boolean
	ExtLst           *CT_ExtensionList
}

func (_egagcc *EG_LineChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_egagcc.Grouping = NewCT_Grouping()
_efcfa:
	for {
		_cedb, _eeddg := d.Token()
		if _eeddg != nil {
			return _eeddg
		}
		switch _eeaaa := _cedb.(type) {
		case _b.StartElement:
			switch _eeaaa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _gaca := d.DecodeElement(_egagcc.Grouping, &_eeaaa); _gaca != nil {
					return _gaca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_egagcc.VaryColors = NewCT_Boolean()
				if _ggdfb := d.DecodeElement(_egagcc.VaryColors, &_eeaaa); _ggdfb != nil {
					return _ggdfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffaee := NewCT_LineSer()
				if _ffbgbe := d.DecodeElement(_ffaee, &_eeaaa); _ffbgbe != nil {
					return _ffbgbe
				}
				_egagcc.Ser = append(_egagcc.Ser, _ffaee)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_egagcc.DLbls = NewCT_DLbls()
				if _ggacdg := d.DecodeElement(_egagcc.DLbls, &_eeaaa); _ggacdg != nil {
					return _ggacdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_egagcc.DropLines = NewCT_ChartLines()
				if _gagc := d.DecodeElement(_egagcc.DropLines, &_eeaaa); _gagc != nil {
					return _gagc
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _eeaaa.Name)
				if _dgeebe := d.Skip(); _dgeebe != nil {
					return _dgeebe
				}
			}
		case _b.EndElement:
			break _efcfa
		case _b.CharData:
		}
	}
	return nil
}
func NewEG_AreaChartShared() *EG_AreaChartShared { _adbae := &EG_AreaChartShared{}; return _adbae }
func (_bbcaa *ST_ErrBarType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dabgf, _gddafa := d.Token()
	if _gddafa != nil {
		return _gddafa
	}
	if _bcee, _gfaa := _dabgf.(_b.EndElement); _gfaa && _bcee.Name == start.Name {
		*_bbcaa = 1
		return nil
	}
	if _ddeg, _bfagd := _dabgf.(_b.CharData); !_bfagd {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dabgf)
	} else {
		switch string(_ddeg) {
		case "":
			*_bbcaa = 0
		case "\u0062\u006f\u0074\u0068":
			*_bbcaa = 1
		case "\u006d\u0069\u006eu\u0073":
			*_bbcaa = 2
		case "\u0070\u006c\u0075\u0073":
			*_bbcaa = 3
		}
	}
	_dabgf, _gddafa = d.Token()
	if _gddafa != nil {
		return _gddafa
	}
	if _cecdc, _ddabf := _dabgf.(_b.EndElement); _ddabf && _cecdc.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dabgf)
}

const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_gdbf *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _gdbf.StrRef != nil {
		if _ggegc := _gdbf.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _ggegc != nil {
			return _ggegc
		}
	}
	return nil
}

type CT_LblOffset struct{ ValAttr *ST_LblOffset }

func (_cbffe ST_Crosses) String() string {
	switch _cbffe {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}
func (_acfge *CT_HeaderFooter) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _acfge.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acfge.AlignWithMarginsAttr))})
	}
	if _acfge.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acfge.DifferentOddEvenAttr))})
	}
	if _acfge.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _aa.Sprintf("\u0025\u0064", _fedee(*_acfge.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _acfge.OddHeader != nil {
		_becf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_becf, *_acfge.OddHeader)
		e.EncodeElement(_acfge.OddHeader, _becf)
	}
	if _acfge.OddFooter != nil {
		_gbefbf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_gbefbf, *_acfge.OddFooter)
		e.EncodeElement(_acfge.OddFooter, _gbefbf)
	}
	if _acfge.EvenHeader != nil {
		_cfae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_cfae, *_acfge.EvenHeader)
		e.EncodeElement(_acfge.EvenHeader, _cfae)
	}
	if _acfge.EvenFooter != nil {
		_egfeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_egfeb, *_acfge.EvenFooter)
		e.EncodeElement(_acfge.EvenFooter, _egfeb)
	}
	if _acfge.FirstHeader != nil {
		_efef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_efef, *_acfge.FirstHeader)
		e.EncodeElement(_acfge.FirstHeader, _efef)
	}
	if _acfge.FirstFooter != nil {
		_fdggd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_dc.AddPreserveSpaceAttr(&_fdggd, *_acfge.FirstFooter)
		e.EncodeElement(_acfge.FirstFooter, _fdggd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_ScatterChart() *CT_ScatterChart {
	_fffdg := &CT_ScatterChart{}
	_fffdg.ScatterStyle = NewCT_ScatterStyle()
	return _fffdg
}
func (_adead ST_Shape) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_adead.String(), start)
}

type CT_LegendEntry struct {
	Idx    *CT_UnsignedInt
	Choice *CT_LegendEntryChoice
	ExtLst *CT_ExtensionList
}

func (_cfecfb *ST_SplitType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cfecfb = 0
	case "\u0061\u0075\u0074\u006f":
		*_cfecfb = 1
	case "\u0063\u0075\u0073\u0074":
		*_cfecfb = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_cfecfb = 3
	case "\u0070\u006f\u0073":
		*_cfecfb = 4
	case "\u0076\u0061\u006c":
		*_cfecfb = 5
	}
	return nil
}

// Validate validates the CT_Surface and its children
func (_acaeb *CT_Surface) Validate() error {
	return _acaeb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}

// Validate validates the CT_AxPos and its children
func (_bdbe *CT_AxPos) Validate() error {
	return _bdbe.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}

func (_fdaee *ST_BarGrouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fgeac, _ggfc := d.Token()
	if _ggfc != nil {
		return _ggfc
	}
	if _dbdba, _aefebe := _fgeac.(_b.EndElement); _aefebe && _dbdba.Name == start.Name {
		*_fdaee = 1
		return nil
	}
	if _befbd, _cdaeg := _fgeac.(_b.CharData); !_cdaeg {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgeac)
	} else {
		switch string(_befbd) {
		case "":
			*_fdaee = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_fdaee = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_fdaee = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_fdaee = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_fdaee = 4
		}
	}
	_fgeac, _ggfc = d.Token()
	if _ggfc != nil {
		return _ggfc
	}
	if _cagdf, _bbcdg := _fgeac.(_b.EndElement); _bbcdg && _cagdf.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgeac)
}
func NewCT_LblAlgn() *CT_LblAlgn { _bcdf := &CT_LblAlgn{}; _bcdf.ValAttr = ST_LblAlgn(1); return _bcdf }
func (_gdefb ST_LblOffset) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _gdefb.ST_LblOffsetPercent != nil {
		e.EncodeToken(_b.CharData(*_gdefb.ST_LblOffsetPercent))
	}
	if _gdefb.ST_LblOffsetUShort != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_gdefb.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

type ST_Orientation byte

func (_fgfag ST_ErrDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fgfag.String(), start)
}
func (_ddaf ST_RadarStyle) Validate() error { return _ddaf.ValidateWithPath("") }
func (_aage *CT_AreaSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aage.Idx = NewCT_UnsignedInt()
	_aage.Order = NewCT_UnsignedInt()
_eg:
	for {
		_adg, _bae := d.Token()
		if _bae != nil {
			return _bae
		}
		switch _gca := _adg.(type) {
		case _b.StartElement:
			switch _gca.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dff := d.DecodeElement(_aage.Idx, &_gca); _dff != nil {
					return _dff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bcg := d.DecodeElement(_aage.Order, &_gca); _bcg != nil {
					return _bcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_aage.Tx = NewCT_SerTx()
				if _egc := d.DecodeElement(_aage.Tx, &_gca); _egc != nil {
					return _egc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aage.SpPr = _f.NewCT_ShapeProperties()
				if _ada := d.DecodeElement(_aage.SpPr, &_gca); _ada != nil {
					return _ada
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_aage.PictureOptions = NewCT_PictureOptions()
				if _cebd := d.DecodeElement(_aage.PictureOptions, &_gca); _cebd != nil {
					return _cebd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_eea := NewCT_DPt()
				if _aee := d.DecodeElement(_eea, &_gca); _aee != nil {
					return _aee
				}
				_aage.DPt = append(_aage.DPt, _eea)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_aage.DLbls = NewCT_DLbls()
				if _eeg := d.DecodeElement(_aage.DLbls, &_gca); _eeg != nil {
					return _eeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_gdd := NewCT_Trendline()
				if _ac := d.DecodeElement(_gdd, &_gca); _ac != nil {
					return _ac
				}
				_aage.Trendline = append(_aage.Trendline, _gdd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gea := NewCT_ErrBars()
				if _fdce := d.DecodeElement(_gea, &_gca); _fdce != nil {
					return _fdce
				}
				_aage.ErrBars = append(_aage.ErrBars, _gea)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_aage.Cat = NewCT_AxDataSource()
				if _bgag := d.DecodeElement(_aage.Cat, &_gca); _bgag != nil {
					return _bgag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_aage.Val = NewCT_NumDataSource()
				if _eb := d.DecodeElement(_aage.Val, &_gca); _eb != nil {
					return _eb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aage.ExtLst = NewCT_ExtensionList()
				if _gee := d.DecodeElement(_aage.ExtLst, &_gca); _gee != nil {
					return _gee
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _gca.Name)
				if _abf := d.Skip(); _abf != nil {
					return _abf
				}
			}
		case _b.EndElement:
			break _eg
		case _b.CharData:
		}
	}
	return nil
}
func (_cdge *CT_RotX) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cdge.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_cdge.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_ccefg *CT_TickMark) ValidateWithPath(path string) error {
	if _becc := _ccefg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _becc != nil {
		return _becc
	}
	return nil
}
func (_ffe *CT_AxDataSourceChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ffe.MultiLvlStrRef != nil {
		_bfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_ffe.MultiLvlStrRef, _bfa)
	}
	if _ffe.NumRef != nil {
		_dfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_ffe.NumRef, _dfc)
	}
	if _ffe.NumLit != nil {
		_fcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_ffe.NumLit, _fcc)
	}
	if _ffe.StrRef != nil {
		_ccb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_ffe.StrRef, _ccb)
	}
	if _ffe.StrLit != nil {
		_dgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_ffe.StrLit, _dgd)
	}
	return nil
}
func (_aecccc ST_HoleSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aecccc.ST_HoleSizePercent != nil {
		e.EncodeToken(_b.CharData(*_aecccc.ST_HoleSizePercent))
	}
	if _aecccc.ST_HoleSizeUByte != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_aecccc.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func (_dggbe ST_Crosses) Validate() error { return _dggbe.ValidateWithPath("") }
func (_baaed ST_LayoutTarget) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_baaed.String(), start)
}
func (_fcaffec *Group_DLbls) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fcaffec.NumFmt != nil {
		_ddffg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fcaffec.NumFmt, _ddffg)
	}
	if _fcaffec.SpPr != nil {
		_gfdfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcaffec.SpPr, _gfdfa)
	}
	if _fcaffec.TxPr != nil {
		_dcbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fcaffec.TxPr, _dcbad)
	}
	if _fcaffec.DLblPos != nil {
		_dceff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_fcaffec.DLblPos, _dceff)
	}
	if _fcaffec.ShowLegendKey != nil {
		_cfecf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_fcaffec.ShowLegendKey, _cfecf)
	}
	if _fcaffec.ShowVal != nil {
		_fccca := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_fcaffec.ShowVal, _fccca)
	}
	if _fcaffec.ShowCatName != nil {
		_afdbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fcaffec.ShowCatName, _afdbb)
	}
	if _fcaffec.ShowSerName != nil {
		_eecc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fcaffec.ShowSerName, _eecc)
	}
	if _fcaffec.ShowPercent != nil {
		_fgbfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_fcaffec.ShowPercent, _fgbfg)
	}
	if _fcaffec.ShowBubbleSize != nil {
		_dddg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_fcaffec.ShowBubbleSize, _dddg)
	}
	if _fcaffec.Separator != nil {
		_eaed := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_dc.AddPreserveSpaceAttr(&_eaed, *_fcaffec.Separator)
		e.EncodeElement(_fcaffec.Separator, _eaed)
	}
	if _fcaffec.ShowLeaderLines != nil {
		_fgbfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcaffec.ShowLeaderLines, _fgbfa)
	}
	if _fcaffec.LeaderLines != nil {
		_cafg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fcaffec.LeaderLines, _cafg)
	}
	return nil
}
func (_efgbd ST_GapAmount) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _efgbd.ST_GapAmountPercent != nil {
		e.EncodeToken(_b.CharData(*_efgbd.ST_GapAmountPercent))
	}
	if _efgbd.ST_GapAmountUShort != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_efgbd.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

func (_dacfcb ST_OfPieType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dacfcb.String(), start)
}
func NewCT_StrData() *CT_StrData { _fefgb := &CT_StrData{}; return _fefgb }
func (_dcagc *CT_ErrDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcagc.ValAttr = ST_ErrDir(1)
	for _, _gecdg := range start.Attr {
		if _gecdg.Name.Local == "\u0076\u0061\u006c" {
			_dcagc.ValAttr.UnmarshalXMLAttr(_gecdg)
			continue
		}
	}
	for {
		_cfdbe, _bfff := d.Token()
		if _bfff != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _bfff)
		}
		if _bbbd, _eggec := _cfdbe.(_b.EndElement); _eggec && _bbbd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ddeee ST_LayoutMode) String() string {
	switch _ddeee {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}

type CT_UpDownBar struct{ SpPr *_f.CT_ShapeProperties }

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_egfda *CT_ExtensionList) ValidateWithPath(path string) error {
	for _ggaeg, _addb := range _egfda.Ext {
		if _agf := _addb.ValidateWithPath(_aa.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _ggaeg)); _agf != nil {
			return _agf
		}
	}
	return nil
}
func (_dgcfcg *ST_DispBlanksAs) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dgcfcg = 0
	case "\u0073\u0070\u0061\u006e":
		*_dgcfcg = 1
	case "\u0067\u0061\u0070":
		*_dgcfcg = 2
	case "\u007a\u0065\u0072\u006f":
		*_dgcfcg = 3
	}
	return nil
}

type ST_ErrBarType byte
type CT_ChartSpace struct {
	Date1904       *CT_Boolean
	Lang           *CT_TextLanguageID
	RoundedCorners *CT_Boolean
	Style          *CT_Style
	ClrMapOvr      *_f.CT_ColorMapping
	PivotSource    *CT_PivotSource
	Protection     *CT_Protection
	Chart          *CT_Chart
	SpPr           *_f.CT_ShapeProperties
	TxPr           *_f.CT_TextBody
	ExternalData   *CT_ExternalData
	PrintSettings  *CT_PrintSettings
	UserShapes     *CT_RelId
	ExtLst         *CT_ExtensionList
}

func (_gefb *CT_FirstSliceAng) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _abege := range start.Attr {
		if _abege.Name.Local == "\u0076\u0061\u006c" {
			_edde, _daaa := _bd.ParseUint(_abege.Value, 10, 16)
			if _daaa != nil {
				return _daaa
			}
			_ffce := uint16(_edde)
			_gefb.ValAttr = &_ffce
			continue
		}
	}
	for {
		_aeeg, _fafbc := d.Token()
		if _fafbc != nil {
			return _aa.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _fafbc)
		}
		if _afgbc, _cgca := _aeeg.(_b.EndElement); _cgca && _afgbc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_abfaf *CT_Title) ValidateWithPath(path string) error {
	if _abfaf.Tx != nil {
		if _bagaa := _abfaf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bagaa != nil {
			return _bagaa
		}
	}
	if _abfaf.Layout != nil {
		if _ffdde := _abfaf.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _ffdde != nil {
			return _ffdde
		}
	}
	if _abfaf.Overlay != nil {
		if _daefbb := _abfaf.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _daefbb != nil {
			return _daefbb
		}
	}
	if _abfaf.SpPr != nil {
		if _dbfg := _abfaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dbfg != nil {
			return _dbfg
		}
	}
	if _abfaf.TxPr != nil {
		if _dgddf := _abfaf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dgddf != nil {
			return _dgddf
		}
	}
	if _abfaf.ExtLst != nil {
		if _cfcddg := _abfaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfcddg != nil {
			return _cfcddg
		}
	}
	return nil
}
func NewCT_ValAx() *CT_ValAx {
	_gcgdg := &CT_ValAx{}
	_gcgdg.AxId = NewCT_UnsignedInt()
	_gcgdg.Scaling = NewCT_Scaling()
	_gcgdg.AxPos = NewCT_AxPos()
	_gcgdg.CrossAx = NewCT_UnsignedInt()
	return _gcgdg
}
func (_egebb ST_SizeRepresents) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cfaa := _b.Attr{}
	_cfaa.Name = name
	switch _egebb {
	case ST_SizeRepresentsUnset:
		_cfaa.Value = ""
	case ST_SizeRepresentsArea:
		_cfaa.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_cfaa.Value = "\u0077"
	}
	return _cfaa, nil
}
func (_fafag *CT_Lvl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fafag.Pt != nil {
		_fcaef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _ddfda := range _fafag.Pt {
			e.EncodeElement(_ddfda, _fcaef)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_LayoutMode() *CT_LayoutMode { _adad := &CT_LayoutMode{}; return _adad }
func (_bgcbc ST_PictureFormat) ValidateWithPath(path string) error {
	switch _bgcbc {
	case 0, 1, 2, 3:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgcbc))
	}
	return nil
}
func NewCT_DLbls() *CT_DLbls { _ceac := &CT_DLbls{}; return _ceac }

// Validate validates the CT_LineChart and its children
func (_fgcce *CT_LineChart) Validate() error {
	return _fgcce.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}

type CT_Area3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_edfa *ST_AxPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_edfa = 0
	case "\u0062":
		*_edfa = 1
	case "\u006c":
		*_edfa = 2
	case "\u0072":
		*_edfa = 3
	case "\u0074":
		*_edfa = 4
	}
	return nil
}
func (_ccgcgc ST_ScatterStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_ccgcgc.String(), start)
}
func (_afda *CT_NumDataSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afda.Choice = NewCT_NumDataSourceChoice()
_afeec:
	for {
		_dfbff, _bcab := d.Token()
		if _bcab != nil {
			return _bcab
		}
		switch _begd := _dfbff.(type) {
		case _b.StartElement:
			switch _begd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_afda.Choice = NewCT_NumDataSourceChoice()
				if _gbfab := d.DecodeElement(&_afda.Choice.NumRef, &_begd); _gbfab != nil {
					return _gbfab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_afda.Choice = NewCT_NumDataSourceChoice()
				if _cdcg := d.DecodeElement(&_afda.Choice.NumLit, &_begd); _cdcg != nil {
					return _cdcg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _begd.Name)
				if _dgbec := d.Skip(); _dgbec != nil {
					return _dgbec
				}
			}
		case _b.EndElement:
			break _afeec
		case _b.CharData:
		}
	}
	return nil
}
func (_dadc *CT_NumData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fcgc:
	for {
		_ffggf, _caaag := d.Token()
		if _caaag != nil {
			return _caaag
		}
		switch _bfaed := _ffggf.(type) {
		case _b.StartElement:
			switch _bfaed.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_dadc.FormatCode = new(string)
				if _fgcec := d.DecodeElement(_dadc.FormatCode, &_bfaed); _fgcec != nil {
					return _fgcec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_dadc.PtCount = NewCT_UnsignedInt()
				if _addaa := d.DecodeElement(_dadc.PtCount, &_bfaed); _addaa != nil {
					return _addaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_ggceg := NewCT_NumVal()
				if _dfabe := d.DecodeElement(_ggceg, &_bfaed); _dfabe != nil {
					return _dfabe
				}
				_dadc.Pt = append(_dadc.Pt, _ggceg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dadc.ExtLst = NewCT_ExtensionList()
				if _gcda := d.DecodeElement(_dadc.ExtLst, &_bfaed); _gcda != nil {
					return _gcda
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _bfaed.Name)
				if _debg := d.Skip(); _debg != nil {
					return _debg
				}
			}
		case _b.EndElement:
			break _fcgc
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_cabgc *CT_NumVal) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_bagb *CT_PictureOptions) ValidateWithPath(path string) error {
	if _bagb.ApplyToFront != nil {
		if _ddfcb := _bagb.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _ddfcb != nil {
			return _ddfcb
		}
	}
	if _bagb.ApplyToSides != nil {
		if _ceab := _bagb.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _ceab != nil {
			return _ceab
		}
	}
	if _bagb.ApplyToEnd != nil {
		if _edfcc := _bagb.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _edfcc != nil {
			return _edfcc
		}
	}
	if _bagb.PictureFormat != nil {
		if _dfaf := _bagb.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _dfaf != nil {
			return _dfaf
		}
	}
	if _bagb.PictureStackUnit != nil {
		if _cfeb := _bagb.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _cfeb != nil {
			return _cfeb
		}
	}
	return nil
}

// Validate validates the CT_HeaderFooter and its children
func (_gbga *CT_HeaderFooter) Validate() error {
	return _gbga.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_aefd *CT_CrossBetween) ValidateWithPath(path string) error {
	if _aefd.ValAttr == ST_CrossBetweenUnset {
		return _aa.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ggbb := _aefd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggbb != nil {
		return _ggbb
	}
	return nil
}

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_bgbea *CT_NumRef) ValidateWithPath(path string) error {
	if _bgbea.NumCache != nil {
		if _gceg := _bgbea.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _gceg != nil {
			return _gceg
		}
	}
	if _bgbea.ExtLst != nil {
		if _bcggd := _bgbea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bcggd != nil {
			return _bcggd
		}
	}
	return nil
}
func (_edaa *ST_BubbleScale) Validate() error { return _edaa.ValidateWithPath("") }
func (_gbffe ST_LblAlgn) String() string {
	switch _gbffe {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}
func (_egccf *CT_TextLanguageID) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _egccf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

var ST_ThicknessPercentPatternRe = _a.MustCompile(ST_ThicknessPercentPattern)

type CT_TickMark struct{ ValAttr ST_TickMark }

func (_ecaaee ST_PictureFormat) String() string {
	switch _ecaaee {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}
func (_ffdbg ST_TickMark) Validate() error { return _ffdbg.ValidateWithPath("") }

type CT_BarGrouping struct{ ValAttr ST_BarGrouping }
type CT_AxPos struct{ ValAttr ST_AxPos }

func (_fffceb ST_TickMark) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cbag := _b.Attr{}
	_cbag.Name = name
	switch _fffceb {
	case ST_TickMarkUnset:
		_cbag.Value = ""
	case ST_TickMarkCross:
		_cbag.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_cbag.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_cbag.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_cbag.Value = "\u006f\u0075\u0074"
	}
	return _cbag, nil
}
func (_ec *CT_AxisUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", _ec.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_bebe *CT_UpDownBar) ValidateWithPath(path string) error {
	if _bebe.SpPr != nil {
		if _babce := _bebe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _babce != nil {
			return _babce
		}
	}
	return nil
}

// Validate validates the CT_MarkerSize and its children
func (_eefe *CT_MarkerSize) Validate() error {
	return _eefe.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}
func NewCT_DoughnutChart() *CT_DoughnutChart { _cccc := &CT_DoughnutChart{}; return _cccc }
func NewCT_Chart() *CT_Chart                 { _fgdf := &CT_Chart{}; _fgdf.PlotArea = NewCT_PlotArea(); return _fgdf }

type CT_CrossBetween struct{ ValAttr ST_CrossBetween }

func (_fbbdf ST_OfPieType) String() string {
	switch _fbbdf {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}
func NewCT_NumDataSource() *CT_NumDataSource {
	_cdbg := &CT_NumDataSource{}
	_cdbg.Choice = NewCT_NumDataSourceChoice()
	return _cdbg
}
func (_fcbbd *CT_ExternalData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _aa.Sprintf("\u0025\u0076", _fcbbd.IdAttr)})
	e.EncodeToken(start)
	if _fcbbd.AutoUpdate != nil {
		_gddae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_fcbbd.AutoUpdate, _gddae)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cgfec ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _cgfec {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cgfec))
	}
	return nil
}

// Validate validates the CT_HPercent and its children
func (_faef *CT_HPercent) Validate() error {
	return _faef.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_fdabf ST_SplitType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fdabf.String(), start)
}

// Validate validates the CT_Bar3DChart and its children
func (_egb *CT_Bar3DChart) Validate() error {
	return _egb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}
func (_acbe *ST_DepthPercent) ValidateWithPath(path string) error {
	_fagbg := []string{}
	if _acbe.ST_DepthPercentWithSymbol != nil {
		_fagbg = append(_fagbg, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _acbe.ST_DepthPercentUShort != nil {
		_fagbg = append(_fagbg, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_fagbg) > 1 {
		return _aa.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fagbg)
	}
	return nil
}
func (_bfceb ST_ErrBarType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cagb := _b.Attr{}
	_cagb.Name = name
	switch _bfceb {
	case ST_ErrBarTypeUnset:
		_cagb.Value = ""
	case ST_ErrBarTypeBoth:
		_cagb.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_cagb.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_cagb.Value = "\u0070\u006c\u0075\u0073"
	}
	return _cagb, nil
}
func (_dgbgf *EG_LineChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_ceega := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_dgbgf.Grouping, _ceega)
	if _dgbgf.VaryColors != nil {
		_dfeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dgbgf.VaryColors, _dfeb)
	}
	if _dgbgf.Ser != nil {
		_cebdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gaafg := range _dgbgf.Ser {
			e.EncodeElement(_gaafg, _cebdg)
		}
	}
	if _dgbgf.DLbls != nil {
		_dgdfa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dgbgf.DLbls, _dgdfa)
	}
	if _dgbgf.DropLines != nil {
		_aaebg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dgbgf.DropLines, _aaebg)
	}
	return nil
}
func (_cgae *ST_TrendlineType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dacd, _cddbd := d.Token()
	if _cddbd != nil {
		return _cddbd
	}
	if _aadaa, _egebbe := _dacd.(_b.EndElement); _egebbe && _aadaa.Name == start.Name {
		*_cgae = 1
		return nil
	}
	if _ebffb, _fcaad := _dacd.(_b.CharData); !_fcaad {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dacd)
	} else {
		switch string(_ebffb) {
		case "":
			*_cgae = 0
		case "\u0065\u0078\u0070":
			*_cgae = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_cgae = 2
		case "\u006c\u006f\u0067":
			*_cgae = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_cgae = 4
		case "\u0070\u006f\u006c\u0079":
			*_cgae = 5
		case "\u0070\u006f\u0077e\u0072":
			*_cgae = 6
		}
	}
	_dacd, _cddbd = d.Token()
	if _cddbd != nil {
		return _cddbd
	}
	if _deda, _baacd := _dacd.(_b.EndElement); _baacd && _deda.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dacd)
}
func (_bdae ST_TickLblPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_gdgad := _b.Attr{}
	_gdgad.Name = name
	switch _bdae {
	case ST_TickLblPosUnset:
		_gdgad.Value = ""
	case ST_TickLblPosHigh:
		_gdgad.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_gdgad.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_gdgad.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_gdgad.Value = "\u006e\u006f\u006e\u0065"
	}
	return _gdgad, nil
}
func (_geecgf *CT_OfPieChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_afec := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_geecgf.OfPieType, _afec)
	if _geecgf.VaryColors != nil {
		_gddc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_geecgf.VaryColors, _gddc)
	}
	if _geecgf.Ser != nil {
		_ddab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bbbbg := range _geecgf.Ser {
			e.EncodeElement(_bbbbg, _ddab)
		}
	}
	if _geecgf.DLbls != nil {
		_dcgc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_geecgf.DLbls, _dcgc)
	}
	if _geecgf.GapWidth != nil {
		_gbeed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_geecgf.GapWidth, _gbeed)
	}
	if _geecgf.SplitType != nil {
		_cacag := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_geecgf.SplitType, _cacag)
	}
	if _geecgf.SplitPos != nil {
		_bfed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_geecgf.SplitPos, _bfed)
	}
	if _geecgf.CustSplit != nil {
		_bcede := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_geecgf.CustSplit, _bcede)
	}
	if _geecgf.SecondPieSize != nil {
		_ggfac := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_geecgf.SecondPieSize, _ggfac)
	}
	if _geecgf.SerLines != nil {
		_gbbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _degff := range _geecgf.SerLines {
			e.EncodeElement(_degff, _gbbf)
		}
	}
	if _geecgf.ExtLst != nil {
		_cade := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_geecgf.ExtLst, _cade)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_SerTx() *CT_SerTx { _ebbg := &CT_SerTx{}; _ebbg.Choice = NewCT_SerTxChoice(); return _ebbg }
func (_fgfg *CT_MultiLvlStrRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gcfae:
	for {
		_bcce, _abfae := d.Token()
		if _abfae != nil {
			return _abfae
		}
		switch _dbefa := _bcce.(type) {
		case _b.StartElement:
			switch _dbefa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _faabbf := d.DecodeElement(&_fgfg.F, &_dbefa); _faabbf != nil {
					return _faabbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_fgfg.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _afcb := d.DecodeElement(_fgfg.MultiLvlStrCache, &_dbefa); _afcb != nil {
					return _afcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgfg.ExtLst = NewCT_ExtensionList()
				if _gdgbe := d.DecodeElement(_fgfg.ExtLst, &_dbefa); _gdgbe != nil {
					return _gdgbe
				}
			default:
				_dc.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _dbefa.Name)
				if _fbcc := d.Skip(); _fbcc != nil {
					return _fbcc
				}
			}
		case _b.EndElement:
			break _gcfae
		case _b.CharData:
		}
	}
	return nil
}

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

func (_aebbf *CT_DLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cbfb, _cgge := _aebbf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _cgge != nil {
		return _cgge
	}
	start.Attr = append(start.Attr, _cbfb)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_NumData() *CT_NumData               { _bgcbf := &CT_NumData{}; return _bgcbf }
func NewCT_DLbl() *CT_DLbl                     { _ggaf := &CT_DLbl{}; _ggaf.Idx = NewCT_UnsignedInt(); return _ggaf }
func (_agbfa ST_DispBlanksAs) Validate() error { return _agbfa.ValidateWithPath("") }

type ST_ErrValType byte

func (_ddgbg ST_BubbleScale) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ddgbg.ST_BubbleScalePercent != nil {
		e.EncodeToken(_b.CharData(*_ddgbg.ST_BubbleScalePercent))
	}
	if _ddgbg.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_b.CharData(_aa.Sprintf("\u0025\u0064", *_ddgbg.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// Validate validates the UserShapes and its children
func (_bgaaf *UserShapes) Validate() error {
	return _bgaaf.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}

type CT_BandFmts struct{ BandFmt []*CT_BandFmt }

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_eagd *CT_ErrValType) ValidateWithPath(path string) error {
	if _ecce := _eagd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecce != nil {
		return _ecce
	}
	return nil
}
func NewCT_SplitType() *CT_SplitType { _dafdg := &CT_SplitType{}; return _dafdg }

type CT_HeaderFooter struct {
	AlignWithMarginsAttr *bool
	DifferentOddEvenAttr *bool
	DifferentFirstAttr   *bool
	OddHeader            *string
	OddFooter            *string
	EvenHeader           *string
	EvenFooter           *string
	FirstHeader          *string
	FirstFooter          *string
}

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_gfdg *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _gfdg.NumRef != nil {
		if _ddcbg := _gfdg.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _ddcbg != nil {
			return _ddcbg
		}
	}
	if _gfdg.NumLit != nil {
		if _effd := _gfdg.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _effd != nil {
			return _effd
		}
	}
	return nil
}
func (_gebec *CT_DispUnits) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gdgc:
	for {
		_begfb, _fgde := d.Token()
		if _fgde != nil {
			return _fgde
		}
		switch _gcdba := _begfb.(type) {
		case _b.StartElement:
			switch _gcdba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_gebec.Choice = NewCT_DispUnitsChoice()
				if _ddge := d.DecodeElement(&_gebec.Choice.CustUnit, &_gcdba); _ddge != nil {
					return _ddge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_gebec.Choice = NewCT_DispUnitsChoice()
				if _bbae := d.DecodeElement(&_gebec.Choice.BuiltInUnit, &_gcdba); _bbae != nil {
					return _bbae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_gebec.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _dbeb := d.DecodeElement(_gebec.DispUnitsLbl, &_gcdba); _dbeb != nil {
					return _dbeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gebec.ExtLst = NewCT_ExtensionList()
				if _eacge := d.DecodeElement(_gebec.ExtLst, &_gcdba); _eacge != nil {
					return _eacge
				}
			default:
				_dc.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _gcdba.Name)
				if _cagc := d.Skip(); _cagc != nil {
					return _cagc
				}
			}
		case _b.EndElement:
			break _gdgc
		case _b.CharData:
		}
	}
	return nil
}
func (_dcdbf *CT_OfPieChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcdbf.OfPieType = NewCT_OfPieType()
_ddba:
	for {
		_bccg, _faaab := d.Token()
		if _faaab != nil {
			return _faaab
		}
		switch _efdda := _bccg.(type) {
		case _b.StartElement:
			switch _efdda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _efbdg := d.DecodeElement(_dcdbf.OfPieType, &_efdda); _efbdg != nil {
					return _efbdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dcdbf.VaryColors = NewCT_Boolean()
				if _eedf := d.DecodeElement(_dcdbf.VaryColors, &_efdda); _eedf != nil {
					return _eedf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_adfag := NewCT_PieSer()
				if _ebgge := d.DecodeElement(_adfag, &_efdda); _ebgge != nil {
					return _ebgge
				}
				_dcdbf.Ser = append(_dcdbf.Ser, _adfag)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dcdbf.DLbls = NewCT_DLbls()
				if _fadfg := d.DecodeElement(_dcdbf.DLbls, &_efdda); _fadfg != nil {
					return _fadfg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_dcdbf.GapWidth = NewCT_GapAmount()
				if _ceaf := d.DecodeElement(_dcdbf.GapWidth, &_efdda); _ceaf != nil {
					return _ceaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_dcdbf.SplitType = NewCT_SplitType()
				if _ggcdb := d.DecodeElement(_dcdbf.SplitType, &_efdda); _ggcdb != nil {
					return _ggcdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_dcdbf.SplitPos = NewCT_Double()
				if _abgeb := d.DecodeElement(_dcdbf.SplitPos, &_efdda); _abgeb != nil {
					return _abgeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_dcdbf.CustSplit = NewCT_CustSplit()
				if _cbea := d.DecodeElement(_dcdbf.CustSplit, &_efdda); _cbea != nil {
					return _cbea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_dcdbf.SecondPieSize = NewCT_SecondPieSize()
				if _fggbgc := d.DecodeElement(_dcdbf.SecondPieSize, &_efdda); _fggbgc != nil {
					return _fggbgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_bbedb := NewCT_ChartLines()
				if _afag := d.DecodeElement(_bbedb, &_efdda); _afag != nil {
					return _afag
				}
				_dcdbf.SerLines = append(_dcdbf.SerLines, _bbedb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcdbf.ExtLst = NewCT_ExtensionList()
				if _gbedg := d.DecodeElement(_dcdbf.ExtLst, &_efdda); _gbedg != nil {
					return _gbedg
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _efdda.Name)
				if _efga := d.Skip(); _efga != nil {
					return _efga
				}
			}
		case _b.EndElement:
			break _ddba
		case _b.CharData:
		}
	}
	return nil
}
func (_gcdg *CT_DepthPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gcdg.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _aa.Sprintf("\u0025\u0076", *_gcdg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_ccaga *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _ccaga.Layout != nil {
		if _dafaa := _ccaga.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dafaa != nil {
			return _dafaa
		}
	}
	if _ccaga.Tx != nil {
		if _eeab := _ccaga.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _eeab != nil {
			return _eeab
		}
	}
	if _ccaga.SpPr != nil {
		if _cebc := _ccaga.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cebc != nil {
			return _cebc
		}
	}
	if _ccaga.TxPr != nil {
		if _bgbd := _ccaga.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bgbd != nil {
			return _bgbd
		}
	}
	return nil
}

// Validate validates the CT_LblAlgn and its children
func (_fbgbf *CT_LblAlgn) Validate() error {
	return _fbgbf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}

// Validate validates the Group_DLbls and its children
func (_fgeae *Group_DLbls) Validate() error {
	return _fgeae.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}

type CT_NumDataSource struct{ Choice *CT_NumDataSourceChoice }

func (_bcaf *CT_Scaling) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gbgee:
	for {
		_aeaa, _bbge := d.Token()
		if _bbge != nil {
			return _bbge
		}
		switch _bbbba := _aeaa.(type) {
		case _b.StartElement:
			switch _bbbba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_bcaf.LogBase = NewCT_LogBase()
				if _cadg := d.DecodeElement(_bcaf.LogBase, &_bbbba); _cadg != nil {
					return _cadg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_bcaf.Orientation = NewCT_Orientation()
				if _dcbc := d.DecodeElement(_bcaf.Orientation, &_bbbba); _dcbc != nil {
					return _dcbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_bcaf.Max = NewCT_Double()
				if _gage := d.DecodeElement(_bcaf.Max, &_bbbba); _gage != nil {
					return _gage
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_bcaf.Min = NewCT_Double()
				if _agfa := d.DecodeElement(_bcaf.Min, &_bbbba); _agfa != nil {
					return _agfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcaf.ExtLst = NewCT_ExtensionList()
				if _dggba := d.DecodeElement(_bcaf.ExtLst, &_bbbba); _dggba != nil {
					return _dggba
				}
			default:
				_dc.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _bbbba.Name)
				if _degbf := d.Skip(); _degbf != nil {
					return _degbf
				}
			}
		case _b.EndElement:
			break _gbgee
		case _b.CharData:
		}
	}
	return nil
}
func (_gfeg ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _gfeg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfeg))
	}
	return nil
}
func (_eagf *CT_DLblChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bbcf:
	for {
		_fdgac, _adbf := d.Token()
		if _adbf != nil {
			return _adbf
		}
		switch _ffcb := _fdgac.(type) {
		case _b.StartElement:
			switch _ffcb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_eagf.Delete = NewCT_Boolean()
				if _ffeg := d.DecodeElement(_eagf.Delete, &_ffcb); _ffeg != nil {
					return _ffeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_eagf.Layout = NewCT_Layout()
				if _ebba := d.DecodeElement(_eagf.Layout, &_ffcb); _ebba != nil {
					return _ebba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_eagf.Tx = NewCT_Tx()
				if _ffbe := d.DecodeElement(_eagf.Tx, &_ffcb); _ffbe != nil {
					return _ffbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_eagf.NumFmt = NewCT_NumFmt()
				if _dccf := d.DecodeElement(_eagf.NumFmt, &_ffcb); _dccf != nil {
					return _dccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eagf.SpPr = _f.NewCT_ShapeProperties()
				if _ggfge := d.DecodeElement(_eagf.SpPr, &_ffcb); _ggfge != nil {
					return _ggfge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_eagf.TxPr = _f.NewCT_TextBody()
				if _fadg := d.DecodeElement(_eagf.TxPr, &_ffcb); _fadg != nil {
					return _fadg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_eagf.DLblPos = NewCT_DLblPos()
				if _dgcb := d.DecodeElement(_eagf.DLblPos, &_ffcb); _dgcb != nil {
					return _dgcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_eagf.ShowLegendKey = NewCT_Boolean()
				if _bce := d.DecodeElement(_eagf.ShowLegendKey, &_ffcb); _bce != nil {
					return _bce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_eagf.ShowVal = NewCT_Boolean()
				if _accc := d.DecodeElement(_eagf.ShowVal, &_ffcb); _accc != nil {
					return _accc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_eagf.ShowCatName = NewCT_Boolean()
				if _afa := d.DecodeElement(_eagf.ShowCatName, &_ffcb); _afa != nil {
					return _afa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_eagf.ShowSerName = NewCT_Boolean()
				if _gde := d.DecodeElement(_eagf.ShowSerName, &_ffcb); _gde != nil {
					return _gde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_eagf.ShowPercent = NewCT_Boolean()
				if _edfe := d.DecodeElement(_eagf.ShowPercent, &_ffcb); _edfe != nil {
					return _edfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_eagf.ShowBubbleSize = NewCT_Boolean()
				if _adfa := d.DecodeElement(_eagf.ShowBubbleSize, &_ffcb); _adfa != nil {
					return _adfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_eagf.Separator = new(string)
				if _fgad := d.DecodeElement(_eagf.Separator, &_ffcb); _fgad != nil {
					return _fgad
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _ffcb.Name)
				if _bacf := d.Skip(); _bacf != nil {
					return _bacf
				}
			}
		case _b.EndElement:
			break _bbcf
		case _b.CharData:
		}
	}
	return nil
}

var ST_GapAmountPercentPatternRe = _a.MustCompile(ST_GapAmountPercentPattern)

func NewCT_Double() *CT_Double { _cdgb := &CT_Double{}; return _cdgb }
func NewCT_Period() *CT_Period { _gbaae := &CT_Period{}; return _gbaae }

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_fdad *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }
func (_cccee ST_DLblPos) String() string {
	switch _cccee {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}
func (_dab *CT_DLblsChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gggff:
	for {
		_abe, _abdc := d.Token()
		if _abdc != nil {
			return _abdc
		}
		switch _caec := _abe.(type) {
		case _b.StartElement:
			switch _caec.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_dab.Delete = NewCT_Boolean()
				if _dega := d.DecodeElement(_dab.Delete, &_caec); _dega != nil {
					return _dega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_dab.NumFmt = NewCT_NumFmt()
				if _fadf := d.DecodeElement(_dab.NumFmt, &_caec); _fadf != nil {
					return _fadf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dab.SpPr = _f.NewCT_ShapeProperties()
				if _fcbdc := d.DecodeElement(_dab.SpPr, &_caec); _fcbdc != nil {
					return _fcbdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dab.TxPr = _f.NewCT_TextBody()
				if _fage := d.DecodeElement(_dab.TxPr, &_caec); _fage != nil {
					return _fage
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_dab.DLblPos = NewCT_DLblPos()
				if _ddbc := d.DecodeElement(_dab.DLblPos, &_caec); _ddbc != nil {
					return _ddbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_dab.ShowLegendKey = NewCT_Boolean()
				if _bdba := d.DecodeElement(_dab.ShowLegendKey, &_caec); _bdba != nil {
					return _bdba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_dab.ShowVal = NewCT_Boolean()
				if _dddee := d.DecodeElement(_dab.ShowVal, &_caec); _dddee != nil {
					return _dddee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_dab.ShowCatName = NewCT_Boolean()
				if _faabb := d.DecodeElement(_dab.ShowCatName, &_caec); _faabb != nil {
					return _faabb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_dab.ShowSerName = NewCT_Boolean()
				if _eade := d.DecodeElement(_dab.ShowSerName, &_caec); _eade != nil {
					return _eade
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_dab.ShowPercent = NewCT_Boolean()
				if _dcce := d.DecodeElement(_dab.ShowPercent, &_caec); _dcce != nil {
					return _dcce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_dab.ShowBubbleSize = NewCT_Boolean()
				if _cgac := d.DecodeElement(_dab.ShowBubbleSize, &_caec); _cgac != nil {
					return _cgac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_dab.Separator = new(string)
				if _dcag := d.DecodeElement(_dab.Separator, &_caec); _dcag != nil {
					return _dcag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_dab.ShowLeaderLines = NewCT_Boolean()
				if _afbdd := d.DecodeElement(_dab.ShowLeaderLines, &_caec); _afbdd != nil {
					return _afbdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_dab.LeaderLines = NewCT_ChartLines()
				if _cgabe := d.DecodeElement(_dab.LeaderLines, &_caec); _cgabe != nil {
					return _cgabe
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _caec.Name)
				if _eeaf := d.Skip(); _eeaf != nil {
					return _eeaf
				}
			}
		case _b.EndElement:
			break _gggff
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_BarChart and its children
func (_degb *CT_BarChart) Validate() error {
	return _degb.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

type CT_PivotFmt struct {
	Idx    *CT_UnsignedInt
	SpPr   *_f.CT_ShapeProperties
	TxPr   *_f.CT_TextBody
	Marker *CT_Marker
	DLbl   *CT_DLbl
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_Scaling and its children
func (_bgbg *CT_Scaling) Validate() error {
	return _bgbg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}

// Validate validates the CT_DoughnutChart and its children
func (_aabg *CT_DoughnutChart) Validate() error {
	return _aabg.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_DispUnitsLbl and its children
func (_eega *CT_DispUnitsLbl) Validate() error {
	return _eega.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}
func (_bdacg *ST_BarDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dffbgc, _ffbcf := d.Token()
	if _ffbcf != nil {
		return _ffbcf
	}
	if _fddad, _dfdc := _dffbgc.(_b.EndElement); _dfdc && _fddad.Name == start.Name {
		*_bdacg = 1
		return nil
	}
	if _daagb, _eecaa := _dffbgc.(_b.CharData); !_eecaa {
		return _aa.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dffbgc)
	} else {
		switch string(_daagb) {
		case "":
			*_bdacg = 0
		case "\u0062\u0061\u0072":
			*_bdacg = 1
		case "\u0063\u006f\u006c":
			*_bdacg = 2
		}
	}
	_dffbgc, _ffbcf = d.Token()
	if _ffbcf != nil {
		return _ffbcf
	}
	if _gagcd, _eadbb := _dffbgc.(_b.EndElement); _eadbb && _gagcd.Name == start.Name {
		return nil
	}
	return _aa.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dffbgc)
}

type CT_HoleSize struct{ ValAttr *ST_HoleSize }
type Chart struct{ CT_RelId }
type CT_Protection struct {
	ChartObject   *CT_Boolean
	Data          *CT_Boolean
	Formatting    *CT_Boolean
	Selection     *CT_Boolean
	UserInterface *CT_Boolean
}

func (_dccgf *ST_TimeUnit) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dccgf = 0
	case "\u0064\u0061\u0079\u0073":
		*_dccgf = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_dccgf = 2
	case "\u0079\u0065\u0061r\u0073":
		*_dccgf = 3
	}
	return nil
}
func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_gfbb, _ffafg := _bd.ParseUint(s, 10, 16)
	if _ffafg != nil {
		return ST_LblOffset{}, _ffafg
	}
	_befea := uint16(_gfbb)
	return ST_LblOffset{ST_LblOffsetUShort: &_befea}, nil
}
func (_bbafd *CT_SerTxChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bbafd.StrRef != nil {
		_degfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_bbafd.StrRef, _degfc)
	}
	if _bbafd.V != nil {
		_cccb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
		_dc.AddPreserveSpaceAttr(&_cccb, *_bbafd.V)
		e.EncodeElement(_bbafd.V, _cccb)
	}
	return nil
}
func NewEG_SerShared() *EG_SerShared {
	_ffdcga := &EG_SerShared{}
	_ffdcga.Idx = NewCT_UnsignedInt()
	_ffdcga.Order = NewCT_UnsignedInt()
	return _ffdcga
}

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_cbcbe *CT_Trendline) ValidateWithPath(path string) error {
	if _cbcbe.SpPr != nil {
		if _fgdeb := _cbcbe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fgdeb != nil {
			return _fgdeb
		}
	}
	if _ebgga := _cbcbe.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _ebgga != nil {
		return _ebgga
	}
	if _cbcbe.Order != nil {
		if _abeb := _cbcbe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _abeb != nil {
			return _abeb
		}
	}
	if _cbcbe.Period != nil {
		if _babg := _cbcbe.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _babg != nil {
			return _babg
		}
	}
	if _cbcbe.Forward != nil {
		if _caacc := _cbcbe.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _caacc != nil {
			return _caacc
		}
	}
	if _cbcbe.Backward != nil {
		if _baffb := _cbcbe.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _baffb != nil {
			return _baffb
		}
	}
	if _cbcbe.Intercept != nil {
		if _ffegb := _cbcbe.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _ffegb != nil {
			return _ffegb
		}
	}
	if _cbcbe.DispRSqr != nil {
		if _ccdbe := _cbcbe.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _ccdbe != nil {
			return _ccdbe
		}
	}
	if _cbcbe.DispEq != nil {
		if _cbebe := _cbcbe.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _cbebe != nil {
			return _cbebe
		}
	}
	if _cbcbe.TrendlineLbl != nil {
		if _agcde := _cbcbe.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _agcde != nil {
			return _agcde
		}
	}
	if _cbcbe.ExtLst != nil {
		if _bbgea := _cbcbe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbgea != nil {
			return _bbgea
		}
	}
	return nil
}

// Validate validates the CT_NumRef and its children
func (_cbcca *CT_NumRef) Validate() error {
	return _cbcca.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_bacfd *CT_Grouping) ValidateWithPath(path string) error {
	if _fggd := _bacfd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fggd != nil {
		return _fggd
	}
	return nil
}

type CT_FirstSliceAng struct{ ValAttr *uint16 }

// Validate validates the CT_PictureFormat and its children
func (_bgaa *CT_PictureFormat) Validate() error {
	return _bgaa.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}
func (_ddee *CT_Grouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ddee.ValAttr != ST_GroupingUnset {
		_gdca, _eeed := _ddee.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _eeed != nil {
			return _eeed
		}
		start.Attr = append(start.Attr, _gdca)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aebaf *EG_SurfaceChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_geacg:
	for {
		_dgbgc, _acade := d.Token()
		if _acade != nil {
			return _acade
		}
		switch _dgde := _dgbgc.(type) {
		case _b.StartElement:
			switch _dgde.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_aebaf.Wireframe = NewCT_Boolean()
				if _cbcfb := d.DecodeElement(_aebaf.Wireframe, &_dgde); _cbcfb != nil {
					return _cbcfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fbfbe := NewCT_SurfaceSer()
				if _gbccc := d.DecodeElement(_fbfbe, &_dgde); _gbccc != nil {
					return _gbccc
				}
				_aebaf.Ser = append(_aebaf.Ser, _fbfbe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_aebaf.BandFmts = NewCT_BandFmts()
				if _cdba := d.DecodeElement(_aebaf.BandFmts, &_dgde); _cdba != nil {
					return _cdba
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _dgde.Name)
				if _dgecb := d.Skip(); _dgecb != nil {
					return _dgecb
				}
			}
		case _b.EndElement:
			break _geacg
		case _b.CharData:
		}
	}
	return nil
}
func (_cbgd ST_BuiltInUnit) String() string {
	switch _cbgd {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

type CT_Extension struct {
	UriAttr *string
	Any     _dc.Any
}

func (_eggg *CT_CrossBetween) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_acfg, _ffgc := _eggg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _ffgc != nil {
		return _ffgc
	}
	start.Attr = append(start.Attr, _acfg)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_Lvl struct{ Pt []*CT_StrVal }

func (_bfbg *CT_RelId) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ecece := range start.Attr {
		if _ecece.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ecece.Name.Local == "\u0069\u0064" || _ecece.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ecece.Name.Local == "\u0069\u0064" {
			_aaefc, _gadfe := _ecece.Value, error(nil)
			if _gadfe != nil {
				return _gadfe
			}
			_bfbg.IdAttr = _aaefc
			continue
		}
	}
	for {
		_gabe, _aafeb := d.Token()
		if _aafeb != nil {
			return _aa.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _aafeb)
		}
		if _gceb, _daea := _gabe.(_b.EndElement); _daea && _gceb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_addc *CT_Period) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gcee := range start.Attr {
		if _gcee.Name.Local == "\u0076\u0061\u006c" {
			_bdce, _bcbg := _bd.ParseUint(_gcee.Value, 10, 32)
			if _bcbg != nil {
				return _bcbg
			}
			_aabed := uint32(_bdce)
			_addc.ValAttr = &_aabed
			continue
		}
	}
	for {
		_fedc, _egdg := d.Token()
		if _egdg != nil {
			return _aa.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _egdg)
		}
		if _cfbe, _cffbg := _fedc.(_b.EndElement); _cffbg && _cfbe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_eeadfd *CT_TrendlineType) ValidateWithPath(path string) error {
	if _fgfeb := _eeadfd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgfeb != nil {
		return _fgfeb
	}
	return nil
}

type CT_PieChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	ExtLst        *CT_ExtensionList
}

func (_gcce *CT_MultiLvlStrData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_eceg:
	for {
		_cfaf, _eeda := d.Token()
		if _eeda != nil {
			return _eeda
		}
		switch _abae := _cfaf.(type) {
		case _b.StartElement:
			switch _abae.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_gcce.PtCount = NewCT_UnsignedInt()
				if _agbe := d.DecodeElement(_gcce.PtCount, &_abae); _agbe != nil {
					return _agbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_fefe := NewCT_Lvl()
				if _gaggc := d.DecodeElement(_fefe, &_abae); _gaggc != nil {
					return _gaggc
				}
				_gcce.Lvl = append(_gcce.Lvl, _fefe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gcce.ExtLst = NewCT_ExtensionList()
				if _agge := d.DecodeElement(_gcce.ExtLst, &_abae); _agge != nil {
					return _agge
				}
			default:
				_dc.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _abae.Name)
				if _dacg := d.Skip(); _dacg != nil {
					return _dacg
				}
			}
		case _b.EndElement:
			break _eceg
		case _b.CharData:
		}
	}
	return nil
}
func (_ccdf *CT_LineChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fdbfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_ccdf.Grouping, _fdbfe)
	if _ccdf.VaryColors != nil {
		_geab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ccdf.VaryColors, _geab)
	}
	if _ccdf.Ser != nil {
		_eeecc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fdgd := range _ccdf.Ser {
			e.EncodeElement(_fdgd, _eeecc)
		}
	}
	if _ccdf.DLbls != nil {
		_adcad := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ccdf.DLbls, _adcad)
	}
	if _ccdf.DropLines != nil {
		_bbbf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccdf.DropLines, _bbbf)
	}
	if _ccdf.HiLowLines != nil {
		_fgdce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccdf.HiLowLines, _fgdce)
	}
	if _ccdf.UpDownBars != nil {
		_fcdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_ccdf.UpDownBars, _fcdc)
	}
	if _ccdf.Marker != nil {
		_geag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ccdf.Marker, _geag)
	}
	if _ccdf.Smooth != nil {
		_cddbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_ccdf.Smooth, _cddbf)
	}
	_cggd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _gddbg := range _ccdf.AxId {
		e.EncodeElement(_gddbg, _cggd)
	}
	if _ccdf.ExtLst != nil {
		_geccc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccdf.ExtLst, _geccc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_Bar3DChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	GapDepth   *CT_GapAmount
	Shape      *CT_Shape
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_acabd ST_LayoutMode) Validate() error { return _acabd.ValidateWithPath("") }
func (_cbfbf *CT_Grouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _becg := range start.Attr {
		if _becg.Name.Local == "\u0076\u0061\u006c" {
			_cbfbf.ValAttr.UnmarshalXMLAttr(_becg)
			continue
		}
	}
	for {
		_gdcb, _befad := d.Token()
		if _befad != nil {
			return _aa.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _befad)
		}
		if _caed, _bacd := _gdcb.(_b.EndElement); _bacd && _caed.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Trendline() *CT_Trendline {
	_bdfa := &CT_Trendline{}
	_bdfa.TrendlineType = NewCT_TrendlineType()
	return _bdfa
}
func (_dadfff ST_BarDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dadfff.String(), start)
}
func (_gbgfd *ST_Grouping) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gbgfd = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_gbgfd = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_gbgfd = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_gbgfd = 3
	}
	return nil
}
func (_abcc *CT_Layout) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _abcc.ManualLayout != nil {
		_egdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_abcc.ManualLayout, _egdf)
	}
	if _abcc.ExtLst != nil {
		_feag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abcc.ExtLst, _feag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewEG_PieChartShared() *EG_PieChartShared { _fcag := &EG_PieChartShared{}; return _fcag }
func (_bcbcf ST_TrendlineType) ValidateWithPath(path string) error {
	switch _bcbcf {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _aa.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcbcf))
	}
	return nil
}

// Validate validates the CT_NumDataSource and its children
func (_cbedc *CT_NumDataSource) Validate() error {
	return _cbedc.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}
func init() {
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_dc.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
